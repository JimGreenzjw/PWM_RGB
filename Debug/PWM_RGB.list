
PWM_RGB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d60  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004e6c  08004e6c  00005e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ed4  08004ed4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ed4  08004ed4  00005ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004edc  08004edc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004edc  08004edc  00005edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ee0  08004ee0  00005ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004ee4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  2000005c  08004f40  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  08004f40  000067c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010941  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ca  00000000  00000000  000169c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00019190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd9  00000000  00000000  0001a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017362  00000000  00000000  0001aea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146ac  00000000  00000000  00032203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d7d8  00000000  00000000  000468af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4087  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004948  00000000  00000000  000d40cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d8a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e54 	.word	0x08004e54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004e54 	.word	0x08004e54

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b20      	ldr	r3, [pc, #128]	@ (80001f4 <MX_GPIO_Init+0x98>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a1f      	ldr	r2, [pc, #124]	@ (80001f4 <MX_GPIO_Init+0x98>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b1d      	ldr	r3, [pc, #116]	@ (80001f4 <MX_GPIO_Init+0x98>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b1a      	ldr	r3, [pc, #104]	@ (80001f4 <MX_GPIO_Init+0x98>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a19      	ldr	r2, [pc, #100]	@ (80001f4 <MX_GPIO_Init+0x98>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b17      	ldr	r3, [pc, #92]	@ (80001f4 <MX_GPIO_Init+0x98>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b14      	ldr	r3, [pc, #80]	@ (80001f4 <MX_GPIO_Init+0x98>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a13      	ldr	r2, [pc, #76]	@ (80001f4 <MX_GPIO_Init+0x98>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b11      	ldr	r3, [pc, #68]	@ (80001f4 <MX_GPIO_Init+0x98>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b0e      	ldr	r3, [pc, #56]	@ (80001f4 <MX_GPIO_Init+0x98>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a0d      	ldr	r2, [pc, #52]	@ (80001f4 <MX_GPIO_Init+0x98>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b0b      	ldr	r3, [pc, #44]	@ (80001f4 <MX_GPIO_Init+0x98>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80001d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001d6:	2300      	movs	r3, #0
 80001d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001da:	2300      	movs	r3, #0
 80001dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80001de:	f107 0310 	add.w	r3, r7, #16
 80001e2:	4619      	mov	r1, r3
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <MX_GPIO_Init+0x9c>)
 80001e6:	f000 fff5 	bl	80011d4 <HAL_GPIO_Init>

}
 80001ea:	bf00      	nop
 80001ec:	3720      	adds	r7, #32
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	40021000 	.word	0x40021000
 80001f8:	40011000 	.word	0x40011000

080001fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000200:	4b12      	ldr	r3, [pc, #72]	@ (800024c <MX_I2C1_Init+0x50>)
 8000202:	4a13      	ldr	r2, [pc, #76]	@ (8000250 <MX_I2C1_Init+0x54>)
 8000204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000206:	4b11      	ldr	r3, [pc, #68]	@ (800024c <MX_I2C1_Init+0x50>)
 8000208:	4a12      	ldr	r2, [pc, #72]	@ (8000254 <MX_I2C1_Init+0x58>)
 800020a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800020c:	4b0f      	ldr	r3, [pc, #60]	@ (800024c <MX_I2C1_Init+0x50>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000212:	4b0e      	ldr	r3, [pc, #56]	@ (800024c <MX_I2C1_Init+0x50>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000218:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <MX_I2C1_Init+0x50>)
 800021a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800021e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000220:	4b0a      	ldr	r3, [pc, #40]	@ (800024c <MX_I2C1_Init+0x50>)
 8000222:	2200      	movs	r2, #0
 8000224:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000226:	4b09      	ldr	r3, [pc, #36]	@ (800024c <MX_I2C1_Init+0x50>)
 8000228:	2200      	movs	r2, #0
 800022a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800022c:	4b07      	ldr	r3, [pc, #28]	@ (800024c <MX_I2C1_Init+0x50>)
 800022e:	2200      	movs	r2, #0
 8000230:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000232:	4b06      	ldr	r3, [pc, #24]	@ (800024c <MX_I2C1_Init+0x50>)
 8000234:	2200      	movs	r2, #0
 8000236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000238:	4804      	ldr	r0, [pc, #16]	@ (800024c <MX_I2C1_Init+0x50>)
 800023a:	f001 f94f 	bl	80014dc <HAL_I2C_Init>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000244:	f000 f974 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	20000078 	.word	0x20000078
 8000250:	40005400 	.word	0x40005400
 8000254:	00061a80 	.word	0x00061a80

08000258 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b08a      	sub	sp, #40	@ 0x28
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a1d      	ldr	r2, [pc, #116]	@ (80002e8 <HAL_I2C_MspInit+0x90>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d132      	bne.n	80002de <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000278:	4b1c      	ldr	r3, [pc, #112]	@ (80002ec <HAL_I2C_MspInit+0x94>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a1b      	ldr	r2, [pc, #108]	@ (80002ec <HAL_I2C_MspInit+0x94>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b19      	ldr	r3, [pc, #100]	@ (80002ec <HAL_I2C_MspInit+0x94>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0308 	and.w	r3, r3, #8
 800028c:	613b      	str	r3, [r7, #16]
 800028e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000290:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000296:	2312      	movs	r3, #18
 8000298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800029a:	2303      	movs	r3, #3
 800029c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	4619      	mov	r1, r3
 80002a4:	4812      	ldr	r0, [pc, #72]	@ (80002f0 <HAL_I2C_MspInit+0x98>)
 80002a6:	f000 ff95 	bl	80011d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80002aa:	4b12      	ldr	r3, [pc, #72]	@ (80002f4 <HAL_I2C_MspInit+0x9c>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80002b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002b2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80002b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80002b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002ba:	f043 0302 	orr.w	r3, r3, #2
 80002be:	627b      	str	r3, [r7, #36]	@ 0x24
 80002c0:	4a0c      	ldr	r2, [pc, #48]	@ (80002f4 <HAL_I2C_MspInit+0x9c>)
 80002c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002c4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002c6:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <HAL_I2C_MspInit+0x94>)
 80002c8:	69db      	ldr	r3, [r3, #28]
 80002ca:	4a08      	ldr	r2, [pc, #32]	@ (80002ec <HAL_I2C_MspInit+0x94>)
 80002cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002d0:	61d3      	str	r3, [r2, #28]
 80002d2:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <HAL_I2C_MspInit+0x94>)
 80002d4:	69db      	ldr	r3, [r3, #28]
 80002d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80002de:	bf00      	nop
 80002e0:	3728      	adds	r7, #40	@ 0x28
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40005400 	.word	0x40005400
 80002ec:	40021000 	.word	0x40021000
 80002f0:	40010c00 	.word	0x40010c00
 80002f4:	40010000 	.word	0x40010000

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08e      	sub	sp, #56	@ 0x38
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fe:	f000 fd23 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000302:	f000 f837 	bl	8000374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000306:	f7ff ff29 	bl	800015c <MX_GPIO_Init>
  MX_TIM2_Init();
 800030a:	f000 fb2f 	bl	800096c <MX_TIM2_Init>
  MX_TIM1_Init();
 800030e:	f000 fa81 	bl	8000814 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000312:	f000 fc77 	bl	8000c04 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000316:	f7ff ff71 	bl	80001fc <MX_I2C1_Init>
  MX_TIM3_Init();
 800031a:	f000 fb7b 	bl	8000a14 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800031e:	213c      	movs	r1, #60	@ 0x3c
 8000320:	4810      	ldr	r0, [pc, #64]	@ (8000364 <main+0x6c>)
 8000322:	f002 fbc5 	bl	8002ab0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8000326:	4810      	ldr	r0, [pc, #64]	@ (8000368 <main+0x70>)
 8000328:	f002 f9d4 	bl	80026d4 <HAL_TIM_Base_Start_IT>

	htim2.Instance->CNT = 0;
 800032c:	4b0d      	ldr	r3, [pc, #52]	@ (8000364 <main+0x6c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2200      	movs	r2, #0
 8000332:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_Delay(20); // 单片机启动比OLED上电快,需要延迟等待一下
 8000334:	2014      	movs	r0, #20
 8000336:	f000 fd69 	bl	8000e0c <HAL_Delay>
	OLED_Init(); // 初始化OLED
 800033a:	f000 f927 	bl	800058c <OLED_Init>
	// 开启串口中断接收
	HAL_UART_Receive_IT(&huart2, rx_data, 2);
 800033e:	2202      	movs	r2, #2
 8000340:	490a      	ldr	r1, [pc, #40]	@ (800036c <main+0x74>)
 8000342:	480b      	ldr	r0, [pc, #44]	@ (8000370 <main+0x78>)
 8000344:	f003 fb30 	bl	80039a8 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	char send_buf[50] = { 0 };
 8000348:	2300      	movs	r3, #0
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	f107 0308 	add.w	r3, r7, #8
 8000350:	222e      	movs	r2, #46	@ 0x2e
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f004 f8ed 	bl	8004534 <memset>
	uint8_t mapped_value;
	uint16_t cnt_encoder = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	86fb      	strh	r3, [r7, #54]	@ 0x36

	while (1) {
 800035e:	bf00      	nop
 8000360:	e7fd      	b.n	800035e <main+0x66>
 8000362:	bf00      	nop
 8000364:	200005a4 	.word	0x200005a4
 8000368:	200005ec 	.word	0x200005ec
 800036c:	200000cc 	.word	0x200000cc
 8000370:	20000634 	.word	0x20000634

08000374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b090      	sub	sp, #64	@ 0x40
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0318 	add.w	r3, r7, #24
 800037e:	2228      	movs	r2, #40	@ 0x28
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f004 f8d6 	bl	8004534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000396:	2301      	movs	r3, #1
 8000398:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800039a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800039e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a4:	2301      	movs	r3, #1
 80003a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a8:	2302      	movs	r3, #2
 80003aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b8:	f107 0318 	add.w	r3, r7, #24
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 fd29 	bl	8001e14 <HAL_RCC_OscConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003c8:	f000 f8b2 	bl	8000530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003cc:	230f      	movs	r3, #15
 80003ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d0:	2302      	movs	r3, #2
 80003d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2102      	movs	r1, #2
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 ff96 	bl	8002318 <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003f2:	f000 f89d 	bl	8000530 <Error_Handler>
  }
}
 80003f6:	bf00      	nop
 80003f8:	3740      	adds	r7, #64	@ 0x40
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// 串口接收完成（收到2个字节）中断回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a1f      	ldr	r2, [pc, #124]	@ (800048c <HAL_UART_RxCpltCallback+0x8c>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d137      	bne.n	8000482 <HAL_UART_RxCpltCallback+0x82>
		uint8_t tens = rx_data[0] - '0';
 8000412:	4b1f      	ldr	r3, [pc, #124]	@ (8000490 <HAL_UART_RxCpltCallback+0x90>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	3b30      	subs	r3, #48	@ 0x30
 8000418:	73fb      	strb	r3, [r7, #15]
		uint8_t ones = rx_data[1] - '0';
 800041a:	4b1d      	ldr	r3, [pc, #116]	@ (8000490 <HAL_UART_RxCpltCallback+0x90>)
 800041c:	785b      	ldrb	r3, [r3, #1]
 800041e:	3b30      	subs	r3, #48	@ 0x30
 8000420:	73bb      	strb	r3, [r7, #14]

		uint8_t numeric_value = tens * 10 + ones;
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	461a      	mov	r2, r3
 8000426:	0092      	lsls	r2, r2, #2
 8000428:	4413      	add	r3, r2
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	b2da      	uxtb	r2, r3
 800042e:	7bbb      	ldrb	r3, [r7, #14]
 8000430:	4413      	add	r3, r2
 8000432:	737b      	strb	r3, [r7, #13]
		char send_buf[2];
		sprintf(send_buf, "%d", numeric_value);
 8000434:	7b7a      	ldrb	r2, [r7, #13]
 8000436:	f107 0308 	add.w	r3, r7, #8
 800043a:	4916      	ldr	r1, [pc, #88]	@ (8000494 <HAL_UART_RxCpltCallback+0x94>)
 800043c:	4618      	mov	r0, r3
 800043e:	f004 f859 	bl	80044f4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) send_buf, strlen(send_buf), 10);
 8000442:	f107 0308 	add.w	r3, r7, #8
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff fe80 	bl	800014c <strlen>
 800044c:	4603      	mov	r3, r0
 800044e:	b29a      	uxth	r2, r3
 8000450:	f107 0108 	add.w	r1, r7, #8
 8000454:	230a      	movs	r3, #10
 8000456:	4810      	ldr	r0, [pc, #64]	@ (8000498 <HAL_UART_RxCpltCallback+0x98>)
 8000458:	f003 fa23 	bl	80038a2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 10);
 800045c:	230a      	movs	r3, #10
 800045e:	2202      	movs	r2, #2
 8000460:	490e      	ldr	r1, [pc, #56]	@ (800049c <HAL_UART_RxCpltCallback+0x9c>)
 8000462:	480d      	ldr	r0, [pc, #52]	@ (8000498 <HAL_UART_RxCpltCallback+0x98>)
 8000464:	f003 fa1d 	bl	80038a2 <HAL_UART_Transmit>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000468:	210c      	movs	r1, #12
 800046a:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <HAL_UART_RxCpltCallback+0xa0>)
 800046c:	f002 f9dc 	bl	8002828 <HAL_TIM_PWM_Start>
		// 配置通道1的占空比，影响电机转速（占空比过低可能导致电机无法启动）
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, numeric_value);
 8000470:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <HAL_UART_RxCpltCallback+0xa0>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	7b7a      	ldrb	r2, [r7, #13]
 8000476:	641a      	str	r2, [r3, #64]	@ 0x40

		// Re-enable interrupt receive
		HAL_UART_Receive_IT(&huart2, rx_data, 2);
 8000478:	2202      	movs	r2, #2
 800047a:	4905      	ldr	r1, [pc, #20]	@ (8000490 <HAL_UART_RxCpltCallback+0x90>)
 800047c:	4806      	ldr	r0, [pc, #24]	@ (8000498 <HAL_UART_RxCpltCallback+0x98>)
 800047e:	f003 fa93 	bl	80039a8 <HAL_UART_Receive_IT>
	}
}
 8000482:	bf00      	nop
 8000484:	3710      	adds	r7, #16
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40004400 	.word	0x40004400
 8000490:	200000cc 	.word	0x200000cc
 8000494:	08004e6c 	.word	0x08004e6c
 8000498:	20000634 	.word	0x20000634
 800049c:	08004e70 	.word	0x08004e70
 80004a0:	2000055c 	.word	0x2000055c

080004a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b090      	sub	sp, #64	@ 0x40
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)  // Assuming you're using TIM3 for the interrupt
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a1a      	ldr	r2, [pc, #104]	@ (800051c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d12e      	bne.n	8000514 <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		char send_buf[50] = { 0 };
 80004b6:	2300      	movs	r3, #0
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	222e      	movs	r2, #46	@ 0x2e
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f004 f836 	bl	8004534 <memset>
		uint16_t cnt_encoder = __HAL_TIM_GET_COUNTER(&htim2);
 80004c8:	4b15      	ldr	r3, [pc, #84]	@ (8000520 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004ce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		uint8_t mapped_value = MAP_MIN
				+ ((uint32_t) cnt_encoder * (MAP_MAX - MAP_MIN) / ENCODER_MAX);
 80004d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80004d2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80004d6:	fb02 f303 	mul.w	r3, r2, r3
 80004da:	0c1b      	lsrs	r3, r3, #16
		uint8_t mapped_value = MAP_MIN
 80004dc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
		sprintf(send_buf, "%d", cnt_encoder);
 80004e0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	490f      	ldr	r1, [pc, #60]	@ (8000524 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80004e8:	4618      	mov	r0, r3
 80004ea:	f004 f803 	bl	80044f4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) send_buf, strlen(send_buf), 10);
 80004ee:	f107 0308 	add.w	r3, r7, #8
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fe2a 	bl	800014c <strlen>
 80004f8:	4603      	mov	r3, r0
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	f107 0108 	add.w	r1, r7, #8
 8000500:	230a      	movs	r3, #10
 8000502:	4809      	ldr	r0, [pc, #36]	@ (8000528 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000504:	f003 f9cd 	bl	80038a2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 10); // New line for better readability
 8000508:	230a      	movs	r3, #10
 800050a:	2202      	movs	r2, #2
 800050c:	4907      	ldr	r1, [pc, #28]	@ (800052c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800050e:	4806      	ldr	r0, [pc, #24]	@ (8000528 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000510:	f003 f9c7 	bl	80038a2 <HAL_UART_Transmit>

	}
}
 8000514:	bf00      	nop
 8000516:	3740      	adds	r7, #64	@ 0x40
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40000400 	.word	0x40000400
 8000520:	200005a4 	.word	0x200005a4
 8000524:	08004e6c 	.word	0x08004e6c
 8000528:	20000634 	.word	0x20000634
 800052c:	08004e70 	.word	0x08004e70

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <Error_Handler+0x8>

0800053c <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af02      	add	r7, sp, #8
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	b29b      	uxth	r3, r3
 800054c:	f04f 32ff 	mov.w	r2, #4294967295
 8000550:	9200      	str	r2, [sp, #0]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	217a      	movs	r1, #122	@ 0x7a
 8000556:	4803      	ldr	r0, [pc, #12]	@ (8000564 <OLED_Send+0x28>)
 8000558:	f001 f904 	bl	8001764 <HAL_I2C_Master_Transmit>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000078 	.word	0x20000078

08000568 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8000572:	4a05      	ldr	r2, [pc, #20]	@ (8000588 <OLED_SendCmd+0x20>)
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8000578:	2102      	movs	r1, #2
 800057a:	4803      	ldr	r0, [pc, #12]	@ (8000588 <OLED_SendCmd+0x20>)
 800057c:	f7ff ffde 	bl	800053c <OLED_Send>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200004d0 	.word	0x200004d0

0800058c <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8000590:	20ae      	movs	r0, #174	@ 0xae
 8000592:	f7ff ffe9 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 8000596:	2002      	movs	r0, #2
 8000598:	f7ff ffe6 	bl	8000568 <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 800059c:	2010      	movs	r0, #16
 800059e:	f7ff ffe3 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 80005a2:	2040      	movs	r0, #64	@ 0x40
 80005a4:	f7ff ffe0 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 80005a8:	20b0      	movs	r0, #176	@ 0xb0
 80005aa:	f7ff ffdd 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 80005ae:	2081      	movs	r0, #129	@ 0x81
 80005b0:	f7ff ffda 	bl	8000568 <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 80005b4:	20cf      	movs	r0, #207	@ 0xcf
 80005b6:	f7ff ffd7 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 80005ba:	20a1      	movs	r0, #161	@ 0xa1
 80005bc:	f7ff ffd4 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 80005c0:	20a6      	movs	r0, #166	@ 0xa6
 80005c2:	f7ff ffd1 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 80005c6:	20a8      	movs	r0, #168	@ 0xa8
 80005c8:	f7ff ffce 	bl	8000568 <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 80005cc:	203f      	movs	r0, #63	@ 0x3f
 80005ce:	f7ff ffcb 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 80005d2:	20ad      	movs	r0, #173	@ 0xad
 80005d4:	f7ff ffc8 	bl	8000568 <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 80005d8:	208b      	movs	r0, #139	@ 0x8b
 80005da:	f7ff ffc5 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 80005de:	2033      	movs	r0, #51	@ 0x33
 80005e0:	f7ff ffc2 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 80005e4:	20c8      	movs	r0, #200	@ 0xc8
 80005e6:	f7ff ffbf 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 80005ea:	20d3      	movs	r0, #211	@ 0xd3
 80005ec:	f7ff ffbc 	bl	8000568 <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 80005f0:	2000      	movs	r0, #0
 80005f2:	f7ff ffb9 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 80005f6:	20d5      	movs	r0, #213	@ 0xd5
 80005f8:	f7ff ffb6 	bl	8000568 <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 80005fc:	20c0      	movs	r0, #192	@ 0xc0
 80005fe:	f7ff ffb3 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 8000602:	20d9      	movs	r0, #217	@ 0xd9
 8000604:	f7ff ffb0 	bl	8000568 <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 8000608:	201f      	movs	r0, #31
 800060a:	f7ff ffad 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 800060e:	20da      	movs	r0, #218	@ 0xda
 8000610:	f7ff ffaa 	bl	8000568 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8000614:	2012      	movs	r0, #18
 8000616:	f7ff ffa7 	bl	8000568 <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 800061a:	20db      	movs	r0, #219	@ 0xdb
 800061c:	f7ff ffa4 	bl	8000568 <OLED_SendCmd>
  OLED_SendCmd(0x40);
 8000620:	2040      	movs	r0, #64	@ 0x40
 8000622:	f7ff ffa1 	bl	8000568 <OLED_SendCmd>

  OLED_NewFrame();
 8000626:	f000 f807 	bl	8000638 <OLED_NewFrame>
  OLED_ShowFrame();
 800062a:	f000 f811 	bl	8000650 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 800062e:	20af      	movs	r0, #175	@ 0xaf
 8000630:	f7ff ff9a 	bl	8000568 <OLED_SendCmd>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 800063c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000640:	2100      	movs	r1, #0
 8000642:	4802      	ldr	r0, [pc, #8]	@ (800064c <OLED_NewFrame+0x14>)
 8000644:	f003 ff76 	bl	8004534 <memset>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000d0 	.word	0x200000d0

08000650 <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8000656:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <OLED_ShowFrame+0x5c>)
 8000658:	2240      	movs	r2, #64	@ 0x40
 800065a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 800065c:	2300      	movs	r3, #0
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	e01b      	b.n	800069a <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	3b50      	subs	r3, #80	@ 0x50
 8000666:	b2db      	uxtb	r3, r3
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff7d 	bl	8000568 <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 800066e:	2002      	movs	r0, #2
 8000670:	f7ff ff7a 	bl	8000568 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8000674:	2010      	movs	r0, #16
 8000676:	f7ff ff77 	bl	8000568 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 800067a:	480d      	ldr	r0, [pc, #52]	@ (80006b0 <OLED_ShowFrame+0x60>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	01db      	lsls	r3, r3, #7
 8000680:	4a0c      	ldr	r2, [pc, #48]	@ (80006b4 <OLED_ShowFrame+0x64>)
 8000682:	4413      	add	r3, r2
 8000684:	2280      	movs	r2, #128	@ 0x80
 8000686:	4619      	mov	r1, r3
 8000688:	f003 ff88 	bl	800459c <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 800068c:	2181      	movs	r1, #129	@ 0x81
 800068e:	4807      	ldr	r0, [pc, #28]	@ (80006ac <OLED_ShowFrame+0x5c>)
 8000690:	f7ff ff54 	bl	800053c <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	3301      	adds	r3, #1
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b07      	cmp	r3, #7
 800069e:	d9e0      	bls.n	8000662 <OLED_ShowFrame+0x12>
  }
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200004d4 	.word	0x200004d4
 80006b0:	200004d5 	.word	0x200004d5
 80006b4:	200000d0 	.word	0x200000d0

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <HAL_MspInit+0x5c>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <HAL_MspInit+0x5c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6193      	str	r3, [r2, #24]
 80006ca:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <HAL_MspInit+0x5c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <HAL_MspInit+0x5c>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a0e      	ldr	r2, [pc, #56]	@ (8000714 <HAL_MspInit+0x5c>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <HAL_MspInit+0x5c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <HAL_MspInit+0x60>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	4a04      	ldr	r2, [pc, #16]	@ (8000718 <HAL_MspInit+0x60>)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40021000 	.word	0x40021000
 8000718:	40010000 	.word	0x40010000

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <NMI_Handler+0x4>

08000724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <MemManage_Handler+0x4>

08000734 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <UsageFault_Handler+0x4>

08000744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 fb32 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000778:	4802      	ldr	r0, [pc, #8]	@ (8000784 <TIM3_IRQHandler+0x10>)
 800077a:	f002 fa27 	bl	8002bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200005ec 	.word	0x200005ec

08000788 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800078c:	4802      	ldr	r0, [pc, #8]	@ (8000798 <USART2_IRQHandler+0x10>)
 800078e:	f003 f931 	bl	80039f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000634 	.word	0x20000634

0800079c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a4:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <_sbrk+0x5c>)
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <_sbrk+0x60>)
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <_sbrk+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <_sbrk+0x64>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	@ (8000804 <_sbrk+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <_sbrk+0x64>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d207      	bcs.n	80007dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007cc:	f003 feba 	bl	8004544 <__errno>
 80007d0:	4603      	mov	r3, r0
 80007d2:	220c      	movs	r2, #12
 80007d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	e009      	b.n	80007f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007dc:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e2:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <_sbrk+0x64>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	4a05      	ldr	r2, [pc, #20]	@ (8000800 <_sbrk+0x64>)
 80007ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20005000 	.word	0x20005000
 80007fc:	00000400 	.word	0x00000400
 8000800:	20000558 	.word	0x20000558
 8000804:	200007c8 	.word	0x200007c8

08000808 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b096      	sub	sp, #88	@ 0x58
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2220      	movs	r2, #32
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f003 fe71 	bl	8004534 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000852:	4b44      	ldr	r3, [pc, #272]	@ (8000964 <MX_TIM1_Init+0x150>)
 8000854:	4a44      	ldr	r2, [pc, #272]	@ (8000968 <MX_TIM1_Init+0x154>)
 8000856:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000858:	4b42      	ldr	r3, [pc, #264]	@ (8000964 <MX_TIM1_Init+0x150>)
 800085a:	2247      	movs	r2, #71	@ 0x47
 800085c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	4b41      	ldr	r3, [pc, #260]	@ (8000964 <MX_TIM1_Init+0x150>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000864:	4b3f      	ldr	r3, [pc, #252]	@ (8000964 <MX_TIM1_Init+0x150>)
 8000866:	2263      	movs	r2, #99	@ 0x63
 8000868:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086a:	4b3e      	ldr	r3, [pc, #248]	@ (8000964 <MX_TIM1_Init+0x150>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000870:	4b3c      	ldr	r3, [pc, #240]	@ (8000964 <MX_TIM1_Init+0x150>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b3b      	ldr	r3, [pc, #236]	@ (8000964 <MX_TIM1_Init+0x150>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800087c:	4839      	ldr	r0, [pc, #228]	@ (8000964 <MX_TIM1_Init+0x150>)
 800087e:	f001 fed9 	bl	8002634 <HAL_TIM_Base_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000888:	f7ff fe52 	bl	8000530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000890:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000892:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000896:	4619      	mov	r1, r3
 8000898:	4832      	ldr	r0, [pc, #200]	@ (8000964 <MX_TIM1_Init+0x150>)
 800089a:	f002 fb61 	bl	8002f60 <HAL_TIM_ConfigClockSource>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80008a4:	f7ff fe44 	bl	8000530 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008a8:	482e      	ldr	r0, [pc, #184]	@ (8000964 <MX_TIM1_Init+0x150>)
 80008aa:	f001 ff65 	bl	8002778 <HAL_TIM_PWM_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80008b4:	f7ff fe3c 	bl	8000530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008c4:	4619      	mov	r1, r3
 80008c6:	4827      	ldr	r0, [pc, #156]	@ (8000964 <MX_TIM1_Init+0x150>)
 80008c8:	f002 feda 	bl	8003680 <HAL_TIMEx_MasterConfigSynchronization>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80008d2:	f7ff fe2d 	bl	8000530 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d6:	2360      	movs	r3, #96	@ 0x60
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008e2:	2300      	movs	r3, #0
 80008e4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f6:	2208      	movs	r2, #8
 80008f8:	4619      	mov	r1, r3
 80008fa:	481a      	ldr	r0, [pc, #104]	@ (8000964 <MX_TIM1_Init+0x150>)
 80008fc:	f002 fa6e 	bl	8002ddc <HAL_TIM_PWM_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000906:	f7ff fe13 	bl	8000530 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800090a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090e:	220c      	movs	r2, #12
 8000910:	4619      	mov	r1, r3
 8000912:	4814      	ldr	r0, [pc, #80]	@ (8000964 <MX_TIM1_Init+0x150>)
 8000914:	f002 fa62 	bl	8002ddc <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800091e:	f7ff fe07 	bl	8000530 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000936:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4619      	mov	r1, r3
 8000944:	4807      	ldr	r0, [pc, #28]	@ (8000964 <MX_TIM1_Init+0x150>)
 8000946:	f002 fef9 	bl	800373c <HAL_TIMEx_ConfigBreakDeadTime>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000950:	f7ff fdee 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000954:	4803      	ldr	r0, [pc, #12]	@ (8000964 <MX_TIM1_Init+0x150>)
 8000956:	f000 f921 	bl	8000b9c <HAL_TIM_MspPostInit>

}
 800095a:	bf00      	nop
 800095c:	3758      	adds	r7, #88	@ 0x58
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000055c 	.word	0x2000055c
 8000968:	40012c00 	.word	0x40012c00

0800096c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	@ 0x30
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	2224      	movs	r2, #36	@ 0x24
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f003 fdda 	bl	8004534 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000988:	4b21      	ldr	r3, [pc, #132]	@ (8000a10 <MX_TIM2_Init+0xa4>)
 800098a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800098e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000990:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <MX_TIM2_Init+0xa4>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_TIM2_Init+0xa4>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <MX_TIM2_Init+0xa4>)
 800099e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_TIM2_Init+0xa4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009aa:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <MX_TIM2_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009b0:	2303      	movs	r3, #3
 80009b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009b8:	2301      	movs	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009c8:	2301      	movs	r3, #1
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	4619      	mov	r1, r3
 80009da:	480d      	ldr	r0, [pc, #52]	@ (8000a10 <MX_TIM2_Init+0xa4>)
 80009dc:	f001 ffc6 	bl	800296c <HAL_TIM_Encoder_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80009e6:	f7ff fda3 	bl	8000530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	4619      	mov	r1, r3
 80009f6:	4806      	ldr	r0, [pc, #24]	@ (8000a10 <MX_TIM2_Init+0xa4>)
 80009f8:	f002 fe42 	bl	8003680 <HAL_TIMEx_MasterConfigSynchronization>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a02:	f7ff fd95 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	@ 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200005a4 	.word	0x200005a4

08000a14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a30:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa8 <MX_TIM3_Init+0x94>)
 8000a32:	4a1e      	ldr	r2, [pc, #120]	@ (8000aac <MX_TIM3_Init+0x98>)
 8000a34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa8 <MX_TIM3_Init+0x94>)
 8000a38:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000a3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <MX_TIM3_Init+0x94>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000a44:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <MX_TIM3_Init+0x94>)
 8000a46:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <MX_TIM3_Init+0x94>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <MX_TIM3_Init+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a58:	4813      	ldr	r0, [pc, #76]	@ (8000aa8 <MX_TIM3_Init+0x94>)
 8000a5a:	f001 fdeb 	bl	8002634 <HAL_TIM_Base_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a64:	f7ff fd64 	bl	8000530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a6e:	f107 0308 	add.w	r3, r7, #8
 8000a72:	4619      	mov	r1, r3
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <MX_TIM3_Init+0x94>)
 8000a76:	f002 fa73 	bl	8002f60 <HAL_TIM_ConfigClockSource>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a80:	f7ff fd56 	bl	8000530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <MX_TIM3_Init+0x94>)
 8000a92:	f002 fdf5 	bl	8003680 <HAL_TIMEx_MasterConfigSynchronization>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f7ff fd48 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200005ec 	.word	0x200005ec
 8000aac:	40000400 	.word	0x40000400

08000ab0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a16      	ldr	r2, [pc, #88]	@ (8000b18 <HAL_TIM_Base_MspInit+0x68>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d10c      	bne.n	8000adc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac2:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <HAL_TIM_Base_MspInit+0x6c>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	4a15      	ldr	r2, [pc, #84]	@ (8000b1c <HAL_TIM_Base_MspInit+0x6c>)
 8000ac8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000acc:	6193      	str	r3, [r2, #24]
 8000ace:	4b13      	ldr	r3, [pc, #76]	@ (8000b1c <HAL_TIM_Base_MspInit+0x6c>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ada:	e018      	b.n	8000b0e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b20 <HAL_TIM_Base_MspInit+0x70>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d113      	bne.n	8000b0e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <HAL_TIM_Base_MspInit+0x6c>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	4a0c      	ldr	r2, [pc, #48]	@ (8000b1c <HAL_TIM_Base_MspInit+0x6c>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	61d3      	str	r3, [r2, #28]
 8000af2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <HAL_TIM_Base_MspInit+0x6c>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	201d      	movs	r0, #29
 8000b04:	f000 fa7d 	bl	8001002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b08:	201d      	movs	r0, #29
 8000b0a:	f000 fa96 	bl	800103a <HAL_NVIC_EnableIRQ>
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40012c00 	.word	0x40012c00
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40000400 	.word	0x40000400

08000b24 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b42:	d123      	bne.n	8000b8c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b44:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b46:	69db      	ldr	r3, [r3, #28]
 8000b48:	4a12      	ldr	r2, [pc, #72]	@ (8000b94 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	61d3      	str	r3, [r2, #28]
 8000b50:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a0c      	ldr	r2, [pc, #48]	@ (8000b94 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <HAL_TIM_Encoder_MspInit+0x70>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b74:	2303      	movs	r3, #3
 8000b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <HAL_TIM_Encoder_MspInit+0x74>)
 8000b88:	f000 fb24 	bl	80011d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010800 	.word	0x40010800

08000b9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a10      	ldr	r2, [pc, #64]	@ (8000bf8 <HAL_TIM_MspPostInit+0x5c>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d118      	bne.n	8000bee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <HAL_TIM_MspPostInit+0x60>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <HAL_TIM_MspPostInit+0x60>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_TIM_MspPostInit+0x60>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bd4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <HAL_TIM_MspPostInit+0x64>)
 8000bea:	f000 faf3 	bl	80011d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40012c00 	.word	0x40012c00
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010800 	.word	0x40010800

08000c04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <MX_USART2_UART_Init+0x50>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c3c:	f002 fde1 	bl	8003802 <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c46:	f7ff fc73 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000634 	.word	0x20000634
 8000c54:	40004400 	.word	0x40004400

08000c58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf0 <HAL_UART_MspInit+0x98>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d137      	bne.n	8000ce8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <HAL_UART_MspInit+0x9c>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000cf4 <HAL_UART_MspInit+0x9c>)
 8000c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c82:	61d3      	str	r3, [r2, #28]
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <HAL_UART_MspInit+0x9c>)
 8000c86:	69db      	ldr	r3, [r3, #28]
 8000c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <HAL_UART_MspInit+0x9c>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a17      	ldr	r2, [pc, #92]	@ (8000cf4 <HAL_UART_MspInit+0x9c>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <HAL_UART_MspInit+0x9c>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480f      	ldr	r0, [pc, #60]	@ (8000cf8 <HAL_UART_MspInit+0xa0>)
 8000cbc:	f000 fa8a 	bl	80011d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4809      	ldr	r0, [pc, #36]	@ (8000cf8 <HAL_UART_MspInit+0xa0>)
 8000cd4:	f000 fa7e 	bl	80011d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2026      	movs	r0, #38	@ 0x26
 8000cde:	f000 f990 	bl	8001002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ce2:	2026      	movs	r0, #38	@ 0x26
 8000ce4:	f000 f9a9 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40004400 	.word	0x40004400
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010800 	.word	0x40010800

08000cfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cfc:	480c      	ldr	r0, [pc, #48]	@ (8000d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cfe:	490d      	ldr	r1, [pc, #52]	@ (8000d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d00:	4a0d      	ldr	r2, [pc, #52]	@ (8000d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d14:	4c0a      	ldr	r4, [pc, #40]	@ (8000d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d22:	f7ff fd71 	bl	8000808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d26:	f003 fc13 	bl	8004550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2a:	f7ff fae5 	bl	80002f8 <main>
  bx lr
 8000d2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d38:	08004ee4 	.word	0x08004ee4
  ldr r2, =_sbss
 8000d3c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d40:	200007c8 	.word	0x200007c8

08000d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_2_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <HAL_Init+0x28>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	@ (8000d70 <HAL_Init+0x28>)
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f947 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f808 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fca8 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f95f 	bl	8001056 <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f927 	bl	8001002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	@ (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <HAL_IncTick+0x1c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <HAL_IncTick+0x20>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a03      	ldr	r2, [pc, #12]	@ (8000df4 <HAL_IncTick+0x20>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	20000008 	.word	0x20000008
 8000df4:	2000067c 	.word	0x2000067c

08000df8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b02      	ldr	r3, [pc, #8]	@ (8000e08 <HAL_GetTick+0x10>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	2000067c 	.word	0x2000067c

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff fff0 	bl	8000df8 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffe0 	bl	8000df8 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4906      	ldr	r1, [pc, #24]	@ (8000eec <__NVIC_EnableIRQ+0x34>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	@ (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	@ (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	@ 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	@ 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f7ff ff90 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff2d 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff42 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff90 	bl	8000f44 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5f 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff35 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa2 	bl	8000fa8 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d008      	beq.n	8001098 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2204      	movs	r2, #4
 800108a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e020      	b.n	80010da <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 020e 	bic.w	r2, r2, #14
 80010a6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0201 	bic.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c0:	2101      	movs	r1, #1
 80010c2:	fa01 f202 	lsl.w	r2, r1, r2
 80010c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d005      	beq.n	8001108 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2204      	movs	r2, #4
 8001100:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e051      	b.n	80011ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 020e 	bic.w	r2, r2, #14
 8001116:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0201 	bic.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a22      	ldr	r2, [pc, #136]	@ (80011b8 <HAL_DMA_Abort_IT+0xd4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d029      	beq.n	8001186 <HAL_DMA_Abort_IT+0xa2>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a21      	ldr	r2, [pc, #132]	@ (80011bc <HAL_DMA_Abort_IT+0xd8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d022      	beq.n	8001182 <HAL_DMA_Abort_IT+0x9e>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a1f      	ldr	r2, [pc, #124]	@ (80011c0 <HAL_DMA_Abort_IT+0xdc>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d01a      	beq.n	800117c <HAL_DMA_Abort_IT+0x98>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1e      	ldr	r2, [pc, #120]	@ (80011c4 <HAL_DMA_Abort_IT+0xe0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d012      	beq.n	8001176 <HAL_DMA_Abort_IT+0x92>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a1c      	ldr	r2, [pc, #112]	@ (80011c8 <HAL_DMA_Abort_IT+0xe4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d00a      	beq.n	8001170 <HAL_DMA_Abort_IT+0x8c>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <HAL_DMA_Abort_IT+0xe8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d102      	bne.n	800116a <HAL_DMA_Abort_IT+0x86>
 8001164:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001168:	e00e      	b.n	8001188 <HAL_DMA_Abort_IT+0xa4>
 800116a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800116e:	e00b      	b.n	8001188 <HAL_DMA_Abort_IT+0xa4>
 8001170:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001174:	e008      	b.n	8001188 <HAL_DMA_Abort_IT+0xa4>
 8001176:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117a:	e005      	b.n	8001188 <HAL_DMA_Abort_IT+0xa4>
 800117c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001180:	e002      	b.n	8001188 <HAL_DMA_Abort_IT+0xa4>
 8001182:	2310      	movs	r3, #16
 8001184:	e000      	b.n	8001188 <HAL_DMA_Abort_IT+0xa4>
 8001186:	2301      	movs	r3, #1
 8001188:	4a11      	ldr	r2, [pc, #68]	@ (80011d0 <HAL_DMA_Abort_IT+0xec>)
 800118a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	4798      	blx	r3
    } 
  }
  return status;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020008 	.word	0x40020008
 80011bc:	4002001c 	.word	0x4002001c
 80011c0:	40020030 	.word	0x40020030
 80011c4:	40020044 	.word	0x40020044
 80011c8:	40020058 	.word	0x40020058
 80011cc:	4002006c 	.word	0x4002006c
 80011d0:	40020000 	.word	0x40020000

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b08b      	sub	sp, #44	@ 0x2c
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e6:	e169      	b.n	80014bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011e8:	2201      	movs	r2, #1
 80011ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	429a      	cmp	r2, r3
 8001202:	f040 8158 	bne.w	80014b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4a9a      	ldr	r2, [pc, #616]	@ (8001474 <HAL_GPIO_Init+0x2a0>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d05e      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001210:	4a98      	ldr	r2, [pc, #608]	@ (8001474 <HAL_GPIO_Init+0x2a0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d875      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001216:	4a98      	ldr	r2, [pc, #608]	@ (8001478 <HAL_GPIO_Init+0x2a4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d058      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 800121c:	4a96      	ldr	r2, [pc, #600]	@ (8001478 <HAL_GPIO_Init+0x2a4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d86f      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001222:	4a96      	ldr	r2, [pc, #600]	@ (800147c <HAL_GPIO_Init+0x2a8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d052      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001228:	4a94      	ldr	r2, [pc, #592]	@ (800147c <HAL_GPIO_Init+0x2a8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d869      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800122e:	4a94      	ldr	r2, [pc, #592]	@ (8001480 <HAL_GPIO_Init+0x2ac>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d04c      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001234:	4a92      	ldr	r2, [pc, #584]	@ (8001480 <HAL_GPIO_Init+0x2ac>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d863      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800123a:	4a92      	ldr	r2, [pc, #584]	@ (8001484 <HAL_GPIO_Init+0x2b0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d046      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
 8001240:	4a90      	ldr	r2, [pc, #576]	@ (8001484 <HAL_GPIO_Init+0x2b0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d85d      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 8001246:	2b12      	cmp	r3, #18
 8001248:	d82a      	bhi.n	80012a0 <HAL_GPIO_Init+0xcc>
 800124a:	2b12      	cmp	r3, #18
 800124c:	d859      	bhi.n	8001302 <HAL_GPIO_Init+0x12e>
 800124e:	a201      	add	r2, pc, #4	@ (adr r2, 8001254 <HAL_GPIO_Init+0x80>)
 8001250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001254:	080012cf 	.word	0x080012cf
 8001258:	080012a9 	.word	0x080012a9
 800125c:	080012bb 	.word	0x080012bb
 8001260:	080012fd 	.word	0x080012fd
 8001264:	08001303 	.word	0x08001303
 8001268:	08001303 	.word	0x08001303
 800126c:	08001303 	.word	0x08001303
 8001270:	08001303 	.word	0x08001303
 8001274:	08001303 	.word	0x08001303
 8001278:	08001303 	.word	0x08001303
 800127c:	08001303 	.word	0x08001303
 8001280:	08001303 	.word	0x08001303
 8001284:	08001303 	.word	0x08001303
 8001288:	08001303 	.word	0x08001303
 800128c:	08001303 	.word	0x08001303
 8001290:	08001303 	.word	0x08001303
 8001294:	08001303 	.word	0x08001303
 8001298:	080012b1 	.word	0x080012b1
 800129c:	080012c5 	.word	0x080012c5
 80012a0:	4a79      	ldr	r2, [pc, #484]	@ (8001488 <HAL_GPIO_Init+0x2b4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012a6:	e02c      	b.n	8001302 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e029      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	3304      	adds	r3, #4
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	e024      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	3308      	adds	r3, #8
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e01f      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	330c      	adds	r3, #12
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e01a      	b.n	8001304 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012d6:	2304      	movs	r3, #4
 80012d8:	623b      	str	r3, [r7, #32]
          break;
 80012da:	e013      	b.n	8001304 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d105      	bne.n	80012f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e4:	2308      	movs	r3, #8
 80012e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	611a      	str	r2, [r3, #16]
          break;
 80012ee:	e009      	b.n	8001304 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f0:	2308      	movs	r3, #8
 80012f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	615a      	str	r2, [r3, #20]
          break;
 80012fa:	e003      	b.n	8001304 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x130>
          break;
 8001302:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2bff      	cmp	r3, #255	@ 0xff
 8001308:	d801      	bhi.n	800130e <HAL_GPIO_Init+0x13a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	e001      	b.n	8001312 <HAL_GPIO_Init+0x13e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3304      	adds	r3, #4
 8001312:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2bff      	cmp	r3, #255	@ 0xff
 8001318:	d802      	bhi.n	8001320 <HAL_GPIO_Init+0x14c>
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	e002      	b.n	8001326 <HAL_GPIO_Init+0x152>
 8001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001322:	3b08      	subs	r3, #8
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	210f      	movs	r1, #15
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	401a      	ands	r2, r3
 8001338:	6a39      	ldr	r1, [r7, #32]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	431a      	orrs	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 80b1 	beq.w	80014b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001354:	4b4d      	ldr	r3, [pc, #308]	@ (800148c <HAL_GPIO_Init+0x2b8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a4c      	ldr	r2, [pc, #304]	@ (800148c <HAL_GPIO_Init+0x2b8>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b4a      	ldr	r3, [pc, #296]	@ (800148c <HAL_GPIO_Init+0x2b8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800136c:	4a48      	ldr	r2, [pc, #288]	@ (8001490 <HAL_GPIO_Init+0x2bc>)
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001378:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a40      	ldr	r2, [pc, #256]	@ (8001494 <HAL_GPIO_Init+0x2c0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d013      	beq.n	80013c0 <HAL_GPIO_Init+0x1ec>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a3f      	ldr	r2, [pc, #252]	@ (8001498 <HAL_GPIO_Init+0x2c4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d00d      	beq.n	80013bc <HAL_GPIO_Init+0x1e8>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a3e      	ldr	r2, [pc, #248]	@ (800149c <HAL_GPIO_Init+0x2c8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d007      	beq.n	80013b8 <HAL_GPIO_Init+0x1e4>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a3d      	ldr	r2, [pc, #244]	@ (80014a0 <HAL_GPIO_Init+0x2cc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_GPIO_Init+0x1e0>
 80013b0:	2303      	movs	r3, #3
 80013b2:	e006      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013b4:	2304      	movs	r3, #4
 80013b6:	e004      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e002      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <HAL_GPIO_Init+0x1ee>
 80013c0:	2300      	movs	r3, #0
 80013c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013c4:	f002 0203 	and.w	r2, r2, #3
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	4093      	lsls	r3, r2
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013d2:	492f      	ldr	r1, [pc, #188]	@ (8001490 <HAL_GPIO_Init+0x2bc>)
 80013d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013ec:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	492c      	ldr	r1, [pc, #176]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	608b      	str	r3, [r1, #8]
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013fa:	4b2a      	ldr	r3, [pc, #168]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	43db      	mvns	r3, r3
 8001402:	4928      	ldr	r1, [pc, #160]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001404:	4013      	ands	r3, r2
 8001406:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001414:	4b23      	ldr	r3, [pc, #140]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	4922      	ldr	r1, [pc, #136]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	60cb      	str	r3, [r1, #12]
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001422:	4b20      	ldr	r3, [pc, #128]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	43db      	mvns	r3, r3
 800142a:	491e      	ldr	r1, [pc, #120]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800142c:	4013      	ands	r3, r2
 800142e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800143c:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	4918      	ldr	r1, [pc, #96]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800144a:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	43db      	mvns	r3, r3
 8001452:	4914      	ldr	r1, [pc, #80]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001454:	4013      	ands	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d021      	beq.n	80014a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	490e      	ldr	r1, [pc, #56]	@ (80014a4 <HAL_GPIO_Init+0x2d0>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e021      	b.n	80014b6 <HAL_GPIO_Init+0x2e2>
 8001472:	bf00      	nop
 8001474:	10320000 	.word	0x10320000
 8001478:	10310000 	.word	0x10310000
 800147c:	10220000 	.word	0x10220000
 8001480:	10210000 	.word	0x10210000
 8001484:	10120000 	.word	0x10120000
 8001488:	10110000 	.word	0x10110000
 800148c:	40021000 	.word	0x40021000
 8001490:	40010000 	.word	0x40010000
 8001494:	40010800 	.word	0x40010800
 8001498:	40010c00 	.word	0x40010c00
 800149c:	40011000 	.word	0x40011000
 80014a0:	40011400 	.word	0x40011400
 80014a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	4909      	ldr	r1, [pc, #36]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b8:	3301      	adds	r3, #1
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c2:	fa22 f303 	lsr.w	r3, r2, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f47f ae8e 	bne.w	80011e8 <HAL_GPIO_Init+0x14>
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	372c      	adds	r7, #44	@ 0x2c
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e12b      	b.n	8001746 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d106      	bne.n	8001508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7fe fea8 	bl	8000258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2224      	movs	r2, #36	@ 0x24
 800150c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800152e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800153e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001540:	f001 f832 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 8001544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4a81      	ldr	r2, [pc, #516]	@ (8001750 <HAL_I2C_Init+0x274>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d807      	bhi.n	8001560 <HAL_I2C_Init+0x84>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4a80      	ldr	r2, [pc, #512]	@ (8001754 <HAL_I2C_Init+0x278>)
 8001554:	4293      	cmp	r3, r2
 8001556:	bf94      	ite	ls
 8001558:	2301      	movls	r3, #1
 800155a:	2300      	movhi	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	e006      	b.n	800156e <HAL_I2C_Init+0x92>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4a7d      	ldr	r2, [pc, #500]	@ (8001758 <HAL_I2C_Init+0x27c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	bf94      	ite	ls
 8001568:	2301      	movls	r3, #1
 800156a:	2300      	movhi	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0e7      	b.n	8001746 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4a78      	ldr	r2, [pc, #480]	@ (800175c <HAL_I2C_Init+0x280>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	0c9b      	lsrs	r3, r3, #18
 8001580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	430a      	orrs	r2, r1
 8001594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001750 <HAL_I2C_Init+0x274>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d802      	bhi.n	80015b0 <HAL_I2C_Init+0xd4>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3301      	adds	r3, #1
 80015ae:	e009      	b.n	80015c4 <HAL_I2C_Init+0xe8>
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	4a69      	ldr	r2, [pc, #420]	@ (8001760 <HAL_I2C_Init+0x284>)
 80015bc:	fba2 2303 	umull	r2, r3, r2, r3
 80015c0:	099b      	lsrs	r3, r3, #6
 80015c2:	3301      	adds	r3, #1
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	495c      	ldr	r1, [pc, #368]	@ (8001750 <HAL_I2C_Init+0x274>)
 80015e0:	428b      	cmp	r3, r1
 80015e2:	d819      	bhi.n	8001618 <HAL_I2C_Init+0x13c>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1e59      	subs	r1, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80015f2:	1c59      	adds	r1, r3, #1
 80015f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015f8:	400b      	ands	r3, r1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00a      	beq.n	8001614 <HAL_I2C_Init+0x138>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1e59      	subs	r1, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fbb1 f3f3 	udiv	r3, r1, r3
 800160c:	3301      	adds	r3, #1
 800160e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001612:	e051      	b.n	80016b8 <HAL_I2C_Init+0x1dc>
 8001614:	2304      	movs	r3, #4
 8001616:	e04f      	b.n	80016b8 <HAL_I2C_Init+0x1dc>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d111      	bne.n	8001644 <HAL_I2C_Init+0x168>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1e58      	subs	r0, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6859      	ldr	r1, [r3, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	440b      	add	r3, r1
 800162e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001632:	3301      	adds	r3, #1
 8001634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	e012      	b.n	800166a <HAL_I2C_Init+0x18e>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1e58      	subs	r0, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6859      	ldr	r1, [r3, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	0099      	lsls	r1, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	fbb0 f3f3 	udiv	r3, r0, r3
 800165a:	3301      	adds	r3, #1
 800165c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2C_Init+0x196>
 800166e:	2301      	movs	r3, #1
 8001670:	e022      	b.n	80016b8 <HAL_I2C_Init+0x1dc>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10e      	bne.n	8001698 <HAL_I2C_Init+0x1bc>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1e58      	subs	r0, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6859      	ldr	r1, [r3, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	440b      	add	r3, r1
 8001688:	fbb0 f3f3 	udiv	r3, r0, r3
 800168c:	3301      	adds	r3, #1
 800168e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001696:	e00f      	b.n	80016b8 <HAL_I2C_Init+0x1dc>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1e58      	subs	r0, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	0099      	lsls	r1, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ae:	3301      	adds	r3, #1
 80016b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	6809      	ldr	r1, [r1, #0]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69da      	ldr	r2, [r3, #28]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6911      	ldr	r1, [r2, #16]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68d2      	ldr	r2, [r2, #12]
 80016f2:	4311      	orrs	r1, r2
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	430b      	orrs	r3, r1
 80016fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0201 	orr.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2220      	movs	r2, #32
 8001732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	000186a0 	.word	0x000186a0
 8001754:	001e847f 	.word	0x001e847f
 8001758:	003d08ff 	.word	0x003d08ff
 800175c:	431bde83 	.word	0x431bde83
 8001760:	10624dd3 	.word	0x10624dd3

08001764 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af02      	add	r7, sp, #8
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	461a      	mov	r2, r3
 8001770:	460b      	mov	r3, r1
 8001772:	817b      	strh	r3, [r7, #10]
 8001774:	4613      	mov	r3, r2
 8001776:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff fb3e 	bl	8000df8 <HAL_GetTick>
 800177c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b20      	cmp	r3, #32
 8001788:	f040 80e0 	bne.w	800194c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2319      	movs	r3, #25
 8001792:	2201      	movs	r2, #1
 8001794:	4970      	ldr	r1, [pc, #448]	@ (8001958 <HAL_I2C_Master_Transmit+0x1f4>)
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f964 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017a2:	2302      	movs	r3, #2
 80017a4:	e0d3      	b.n	800194e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_I2C_Master_Transmit+0x50>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e0cc      	b.n	800194e <HAL_I2C_Master_Transmit+0x1ea>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d007      	beq.n	80017da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 0201 	orr.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2221      	movs	r2, #33	@ 0x21
 80017ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2210      	movs	r2, #16
 80017f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	893a      	ldrh	r2, [r7, #8]
 800180a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001810:	b29a      	uxth	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4a50      	ldr	r2, [pc, #320]	@ (800195c <HAL_I2C_Master_Transmit+0x1f8>)
 800181a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800181c:	8979      	ldrh	r1, [r7, #10]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	6a3a      	ldr	r2, [r7, #32]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f89c 	bl	8001960 <I2C_MasterRequestWrite>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e08d      	b.n	800194e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001848:	e066      	b.n	8001918 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	6a39      	ldr	r1, [r7, #32]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 fa22 	bl	8001c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00d      	beq.n	8001876 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	2b04      	cmp	r3, #4
 8001860:	d107      	bne.n	8001872 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001870:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e06b      	b.n	800194e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001890:	b29b      	uxth	r3, r3
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d11b      	bne.n	80018ec <HAL_I2C_Master_Transmit+0x188>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d017      	beq.n	80018ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	3b01      	subs	r3, #1
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	6a39      	ldr	r1, [r7, #32]
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 fa19 	bl	8001d28 <I2C_WaitOnBTFFlagUntilTimeout>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00d      	beq.n	8001918 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	2b04      	cmp	r3, #4
 8001902:	d107      	bne.n	8001914 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001912:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e01a      	b.n	800194e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	d194      	bne.n	800184a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800192e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2220      	movs	r2, #32
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	e000      	b.n	800194e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800194c:	2302      	movs	r3, #2
  }
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	00100002 	.word	0x00100002
 800195c:	ffff0000 	.word	0xffff0000

08001960 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af02      	add	r7, sp, #8
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	460b      	mov	r3, r1
 800196e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001974:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d006      	beq.n	800198a <I2C_MasterRequestWrite+0x2a>
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d003      	beq.n	800198a <I2C_MasterRequestWrite+0x2a>
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001988:	d108      	bne.n	800199c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e00b      	b.n	80019b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a0:	2b12      	cmp	r3, #18
 80019a2:	d107      	bne.n	80019b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 f84f 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00d      	beq.n	80019e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019da:	d103      	bne.n	80019e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e035      	b.n	8001a54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019f0:	d108      	bne.n	8001a04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019f2:	897b      	ldrh	r3, [r7, #10]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a00:	611a      	str	r2, [r3, #16]
 8001a02:	e01b      	b.n	8001a3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a04:	897b      	ldrh	r3, [r7, #10]
 8001a06:	11db      	asrs	r3, r3, #7
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f003 0306 	and.w	r3, r3, #6
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f063 030f 	orn	r3, r3, #15
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	490e      	ldr	r1, [pc, #56]	@ (8001a5c <I2C_MasterRequestWrite+0xfc>)
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f898 	bl	8001b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e010      	b.n	8001a54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a32:	897b      	ldrh	r3, [r7, #10]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4907      	ldr	r1, [pc, #28]	@ (8001a60 <I2C_MasterRequestWrite+0x100>)
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 f888 	bl	8001b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	00010008 	.word	0x00010008
 8001a60:	00010002 	.word	0x00010002

08001a64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	4613      	mov	r3, r2
 8001a72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a74:	e048      	b.n	8001b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d044      	beq.n	8001b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a7e:	f7ff f9bb 	bl	8000df8 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d302      	bcc.n	8001a94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d139      	bne.n	8001b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	0c1b      	lsrs	r3, r3, #16
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d10d      	bne.n	8001aba <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf0c      	ite	eq
 8001ab0:	2301      	moveq	r3, #1
 8001ab2:	2300      	movne	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	e00c      	b.n	8001ad4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	43da      	mvns	r2, r3
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf0c      	ite	eq
 8001acc:	2301      	moveq	r3, #1
 8001ace:	2300      	movne	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d116      	bne.n	8001b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	f043 0220 	orr.w	r2, r3, #32
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e023      	b.n	8001b50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	0c1b      	lsrs	r3, r3, #16
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d10d      	bne.n	8001b2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf0c      	ite	eq
 8001b24:	2301      	moveq	r3, #1
 8001b26:	2300      	movne	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	e00c      	b.n	8001b48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	43da      	mvns	r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d093      	beq.n	8001a76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b66:	e071      	b.n	8001c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b76:	d123      	bne.n	8001bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	f043 0204 	orr.w	r2, r3, #4
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e067      	b.n	8001c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc6:	d041      	beq.n	8001c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc8:	f7ff f916 	bl	8000df8 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d302      	bcc.n	8001bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d136      	bne.n	8001c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	0c1b      	lsrs	r3, r3, #16
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d10c      	bne.n	8001c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bf14      	ite	ne
 8001bfa:	2301      	movne	r3, #1
 8001bfc:	2300      	moveq	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	e00b      	b.n	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	43da      	mvns	r2, r3
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d016      	beq.n	8001c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	f043 0220 	orr.w	r2, r3, #32
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e021      	b.n	8001c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d10c      	bne.n	8001c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	43da      	mvns	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4013      	ands	r3, r2
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	e00b      	b.n	8001c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	43da      	mvns	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf14      	ite	ne
 8001c82:	2301      	movne	r3, #1
 8001c84:	2300      	moveq	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f47f af6d 	bne.w	8001b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ca4:	e034      	b.n	8001d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f886 	bl	8001db8 <I2C_IsAcknowledgeFailed>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e034      	b.n	8001d20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d028      	beq.n	8001d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cbe:	f7ff f89b 	bl	8000df8 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d302      	bcc.n	8001cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d11d      	bne.n	8001d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cde:	2b80      	cmp	r3, #128	@ 0x80
 8001ce0:	d016      	beq.n	8001d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	f043 0220 	orr.w	r2, r3, #32
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e007      	b.n	8001d20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d1a:	2b80      	cmp	r3, #128	@ 0x80
 8001d1c:	d1c3      	bne.n	8001ca6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d34:	e034      	b.n	8001da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f83e 	bl	8001db8 <I2C_IsAcknowledgeFailed>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e034      	b.n	8001db0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d028      	beq.n	8001da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d4e:	f7ff f853 	bl	8000df8 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d302      	bcc.n	8001d64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d11d      	bne.n	8001da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d016      	beq.n	8001da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8c:	f043 0220 	orr.w	r2, r3, #32
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e007      	b.n	8001db0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d1c3      	bne.n	8001d36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dce:	d11b      	bne.n	8001e08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001dd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	f043 0204 	orr.w	r2, r3, #4
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e272      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8087 	beq.w	8001f42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e34:	4b92      	ldr	r3, [pc, #584]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d00c      	beq.n	8001e5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e40:	4b8f      	ldr	r3, [pc, #572]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d112      	bne.n	8001e72 <HAL_RCC_OscConfig+0x5e>
 8001e4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e58:	d10b      	bne.n	8001e72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5a:	4b89      	ldr	r3, [pc, #548]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d06c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x12c>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d168      	bne.n	8001f40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e24c      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x76>
 8001e7c:	4b80      	ldr	r3, [pc, #512]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a7f      	ldr	r2, [pc, #508]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	e02e      	b.n	8001ee8 <HAL_RCC_OscConfig+0xd4>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0x98>
 8001e92:	4b7b      	ldr	r3, [pc, #492]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a7a      	ldr	r2, [pc, #488]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b78      	ldr	r3, [pc, #480]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a77      	ldr	r2, [pc, #476]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e01d      	b.n	8001ee8 <HAL_RCC_OscConfig+0xd4>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0xbc>
 8001eb6:	4b72      	ldr	r3, [pc, #456]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a71      	ldr	r2, [pc, #452]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b6f      	ldr	r3, [pc, #444]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a6e      	ldr	r2, [pc, #440]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0xd4>
 8001ed0:	4b6b      	ldr	r3, [pc, #428]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a6a      	ldr	r2, [pc, #424]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b68      	ldr	r3, [pc, #416]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a67      	ldr	r2, [pc, #412]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ee6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d013      	beq.n	8001f18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7fe ff82 	bl	8000df8 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7fe ff7e 	bl	8000df8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	@ 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e200      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xe4>
 8001f16:	e014      	b.n	8001f42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7fe ff6e 	bl	8000df8 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f20:	f7fe ff6a 	bl	8000df8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	@ 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1ec      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f32:	4b53      	ldr	r3, [pc, #332]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x10c>
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d063      	beq.n	8002016 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00b      	beq.n	8001f72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f5a:	4b49      	ldr	r3, [pc, #292]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d11c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x18c>
 8001f66:	4b46      	ldr	r3, [pc, #280]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d116      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	4b43      	ldr	r3, [pc, #268]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_RCC_OscConfig+0x176>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d001      	beq.n	8001f8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e1c0      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4939      	ldr	r1, [pc, #228]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	e03a      	b.n	8002016 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d020      	beq.n	8001fea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa8:	4b36      	ldr	r3, [pc, #216]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7fe ff23 	bl	8000df8 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb6:	f7fe ff1f 	bl	8000df8 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e1a1      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4927      	ldr	r1, [pc, #156]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]
 8001fe8:	e015      	b.n	8002016 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fea:	4b26      	ldr	r3, [pc, #152]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7fe ff02 	bl	8000df8 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff8:	f7fe fefe 	bl	8000df8 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e180      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d03a      	beq.n	8002098 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d019      	beq.n	800205e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202a:	4b17      	ldr	r3, [pc, #92]	@ (8002088 <HAL_RCC_OscConfig+0x274>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7fe fee2 	bl	8000df8 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7fe fede 	bl	8000df8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e160      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002056:	2001      	movs	r0, #1
 8002058:	f000 face 	bl	80025f8 <RCC_Delay>
 800205c:	e01c      	b.n	8002098 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205e:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_RCC_OscConfig+0x274>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002064:	f7fe fec8 	bl	8000df8 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206a:	e00f      	b.n	800208c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206c:	f7fe fec4 	bl	8000df8 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d908      	bls.n	800208c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e146      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	42420000 	.word	0x42420000
 8002088:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	4b92      	ldr	r3, [pc, #584]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1e9      	bne.n	800206c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a6 	beq.w	80021f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b8b      	ldr	r3, [pc, #556]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10d      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	4b88      	ldr	r3, [pc, #544]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a87      	ldr	r2, [pc, #540]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	61d3      	str	r3, [r2, #28]
 80020c2:	4b85      	ldr	r3, [pc, #532]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4b82      	ldr	r3, [pc, #520]	@ (80022dc <HAL_RCC_OscConfig+0x4c8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d118      	bne.n	8002110 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020de:	4b7f      	ldr	r3, [pc, #508]	@ (80022dc <HAL_RCC_OscConfig+0x4c8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a7e      	ldr	r2, [pc, #504]	@ (80022dc <HAL_RCC_OscConfig+0x4c8>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ea:	f7fe fe85 	bl	8000df8 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7fe fe81 	bl	8000df8 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b64      	cmp	r3, #100	@ 0x64
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e103      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	4b75      	ldr	r3, [pc, #468]	@ (80022dc <HAL_RCC_OscConfig+0x4c8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x312>
 8002118:	4b6f      	ldr	r3, [pc, #444]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a6e      	ldr	r2, [pc, #440]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6213      	str	r3, [r2, #32]
 8002124:	e02d      	b.n	8002182 <HAL_RCC_OscConfig+0x36e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x334>
 800212e:	4b6a      	ldr	r3, [pc, #424]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a69      	ldr	r2, [pc, #420]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	6213      	str	r3, [r2, #32]
 800213a:	4b67      	ldr	r3, [pc, #412]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4a66      	ldr	r2, [pc, #408]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	f023 0304 	bic.w	r3, r3, #4
 8002144:	6213      	str	r3, [r2, #32]
 8002146:	e01c      	b.n	8002182 <HAL_RCC_OscConfig+0x36e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d10c      	bne.n	800216a <HAL_RCC_OscConfig+0x356>
 8002150:	4b61      	ldr	r3, [pc, #388]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a60      	ldr	r2, [pc, #384]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	4b5e      	ldr	r3, [pc, #376]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a5d      	ldr	r2, [pc, #372]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	e00b      	b.n	8002182 <HAL_RCC_OscConfig+0x36e>
 800216a:	4b5b      	ldr	r3, [pc, #364]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a5a      	ldr	r2, [pc, #360]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6213      	str	r3, [r2, #32]
 8002176:	4b58      	ldr	r3, [pc, #352]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a57      	ldr	r2, [pc, #348]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d015      	beq.n	80021b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218a:	f7fe fe35 	bl	8000df8 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe fe31 	bl	8000df8 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0b1      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a8:	4b4b      	ldr	r3, [pc, #300]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ee      	beq.n	8002192 <HAL_RCC_OscConfig+0x37e>
 80021b4:	e014      	b.n	80021e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7fe fe1f 	bl	8000df8 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7fe fe1b 	bl	8000df8 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e09b      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d4:	4b40      	ldr	r3, [pc, #256]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ee      	bne.n	80021be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d105      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e6:	4b3c      	ldr	r3, [pc, #240]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4a3b      	ldr	r2, [pc, #236]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8087 	beq.w	800230a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021fc:	4b36      	ldr	r3, [pc, #216]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b08      	cmp	r3, #8
 8002206:	d061      	beq.n	80022cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d146      	bne.n	800229e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002210:	4b33      	ldr	r3, [pc, #204]	@ (80022e0 <HAL_RCC_OscConfig+0x4cc>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe fdef 	bl	8000df8 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221e:	f7fe fdeb 	bl	8000df8 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e06d      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002230:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002244:	d108      	bne.n	8002258 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002246:	4b24      	ldr	r3, [pc, #144]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4921      	ldr	r1, [pc, #132]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a19      	ldr	r1, [r3, #32]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	430b      	orrs	r3, r1
 800226a:	491b      	ldr	r1, [pc, #108]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002270:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <HAL_RCC_OscConfig+0x4cc>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7fe fdbf 	bl	8000df8 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7fe fdbb 	bl	8000df8 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e03d      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x46a>
 800229c:	e035      	b.n	800230a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <HAL_RCC_OscConfig+0x4cc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7fe fda8 	bl	8000df8 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ac:	f7fe fda4 	bl	8000df8 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e026      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022be:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x498>
 80022ca:	e01e      	b.n	800230a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e019      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40007000 	.word	0x40007000
 80022e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_RCC_OscConfig+0x500>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0d0      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b6a      	ldr	r3, [pc, #424]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d910      	bls.n	800235c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b67      	ldr	r3, [pc, #412]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 0207 	bic.w	r2, r3, #7
 8002342:	4965      	ldr	r1, [pc, #404]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b63      	ldr	r3, [pc, #396]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0b8      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002374:	4b59      	ldr	r3, [pc, #356]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a58      	ldr	r2, [pc, #352]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800237e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800238c:	4b53      	ldr	r3, [pc, #332]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a52      	ldr	r2, [pc, #328]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002396:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002398:	4b50      	ldr	r3, [pc, #320]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	494d      	ldr	r1, [pc, #308]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d040      	beq.n	8002438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b47      	ldr	r3, [pc, #284]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d115      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e07f      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	4b41      	ldr	r3, [pc, #260]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e073      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	4b3d      	ldr	r3, [pc, #244]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e06b      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f6:	4b39      	ldr	r3, [pc, #228]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4936      	ldr	r1, [pc, #216]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002408:	f7fe fcf6 	bl	8000df8 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7fe fcf2 	bl	8000df8 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e053      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	4b2d      	ldr	r3, [pc, #180]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 020c 	and.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d1eb      	bne.n	8002410 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002438:	4b27      	ldr	r3, [pc, #156]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d210      	bcs.n	8002468 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 0207 	bic.w	r2, r3, #7
 800244e:	4922      	ldr	r1, [pc, #136]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b20      	ldr	r3, [pc, #128]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e032      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002474:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4916      	ldr	r1, [pc, #88]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002492:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	490e      	ldr	r1, [pc, #56]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024a6:	f000 f821 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	490a      	ldr	r1, [pc, #40]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	5ccb      	ldrb	r3, [r1, r3]
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	4a09      	ldr	r2, [pc, #36]	@ (80024e4 <HAL_RCC_ClockConfig+0x1cc>)
 80024c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024c2:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <HAL_RCC_ClockConfig+0x1d0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fc54 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40021000 	.word	0x40021000
 80024e0:	08004e74 	.word	0x08004e74
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20000004 	.word	0x20000004

080024ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002506:	4b1e      	ldr	r3, [pc, #120]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x94>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b04      	cmp	r3, #4
 8002514:	d002      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x30>
 8002516:	2b08      	cmp	r3, #8
 8002518:	d003      	beq.n	8002522 <HAL_RCC_GetSysClockFreq+0x36>
 800251a:	e027      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800251c:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x98>)
 800251e:	613b      	str	r3, [r7, #16]
      break;
 8002520:	e027      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	0c9b      	lsrs	r3, r3, #18
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	4a17      	ldr	r2, [pc, #92]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x9c>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d010      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800253a:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x94>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	0c5b      	lsrs	r3, r3, #17
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	4a11      	ldr	r2, [pc, #68]	@ (800258c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a0d      	ldr	r2, [pc, #52]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x98>)
 800254e:	fb03 f202 	mul.w	r2, r3, r2
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e004      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a0c      	ldr	r2, [pc, #48]	@ (8002590 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002560:	fb02 f303 	mul.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	613b      	str	r3, [r7, #16]
      break;
 800256a:	e002      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x98>)
 800256e:	613b      	str	r3, [r7, #16]
      break;
 8002570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002572:	693b      	ldr	r3, [r7, #16]
}
 8002574:	4618      	mov	r0, r3
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	007a1200 	.word	0x007a1200
 8002588:	08004e8c 	.word	0x08004e8c
 800258c:	08004e9c 	.word	0x08004e9c
 8002590:	003d0900 	.word	0x003d0900

08002594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002598:	4b02      	ldr	r3, [pc, #8]	@ (80025a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	20000000 	.word	0x20000000

080025a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025ac:	f7ff fff2 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	4903      	ldr	r1, [pc, #12]	@ (80025cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025be:	5ccb      	ldrb	r3, [r1, r3]
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08004e84 	.word	0x08004e84

080025d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025d4:	f7ff ffde 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	0adb      	lsrs	r3, r3, #11
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	4903      	ldr	r1, [pc, #12]	@ (80025f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08004e84 	.word	0x08004e84

080025f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002600:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <RCC_Delay+0x34>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <RCC_Delay+0x38>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	0a5b      	lsrs	r3, r3, #9
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002614:	bf00      	nop
  }
  while (Delay --);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1e5a      	subs	r2, r3, #1
 800261a:	60fa      	str	r2, [r7, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f9      	bne.n	8002614 <RCC_Delay+0x1c>
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	20000000 	.word	0x20000000
 8002630:	10624dd3 	.word	0x10624dd3

08002634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e041      	b.n	80026ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe fa28 	bl	8000ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3304      	adds	r3, #4
 8002670:	4619      	mov	r1, r3
 8002672:	4610      	mov	r0, r2
 8002674:	f000 fd60 	bl	8003138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d001      	beq.n	80026ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e03a      	b.n	8002762 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a18      	ldr	r2, [pc, #96]	@ (800276c <HAL_TIM_Base_Start_IT+0x98>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00e      	beq.n	800272c <HAL_TIM_Base_Start_IT+0x58>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002716:	d009      	beq.n	800272c <HAL_TIM_Base_Start_IT+0x58>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a14      	ldr	r2, [pc, #80]	@ (8002770 <HAL_TIM_Base_Start_IT+0x9c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d004      	beq.n	800272c <HAL_TIM_Base_Start_IT+0x58>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a13      	ldr	r2, [pc, #76]	@ (8002774 <HAL_TIM_Base_Start_IT+0xa0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d111      	bne.n	8002750 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b06      	cmp	r3, #6
 800273c:	d010      	beq.n	8002760 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274e:	e007      	b.n	8002760 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	40012c00 	.word	0x40012c00
 8002770:	40000400 	.word	0x40000400
 8002774:	40000800 	.word	0x40000800

08002778 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e041      	b.n	800280e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f839 	bl	8002816 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f000 fcbe 	bl	8003138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d109      	bne.n	800284c <HAL_TIM_PWM_Start+0x24>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	bf14      	ite	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2300      	moveq	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	e022      	b.n	8002892 <HAL_TIM_PWM_Start+0x6a>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b04      	cmp	r3, #4
 8002850:	d109      	bne.n	8002866 <HAL_TIM_PWM_Start+0x3e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	bf14      	ite	ne
 800285e:	2301      	movne	r3, #1
 8002860:	2300      	moveq	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	e015      	b.n	8002892 <HAL_TIM_PWM_Start+0x6a>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b08      	cmp	r3, #8
 800286a:	d109      	bne.n	8002880 <HAL_TIM_PWM_Start+0x58>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b01      	cmp	r3, #1
 8002876:	bf14      	ite	ne
 8002878:	2301      	movne	r3, #1
 800287a:	2300      	moveq	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	e008      	b.n	8002892 <HAL_TIM_PWM_Start+0x6a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b01      	cmp	r3, #1
 800288a:	bf14      	ite	ne
 800288c:	2301      	movne	r3, #1
 800288e:	2300      	moveq	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e05e      	b.n	8002958 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d104      	bne.n	80028aa <HAL_TIM_PWM_Start+0x82>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028a8:	e013      	b.n	80028d2 <HAL_TIM_PWM_Start+0xaa>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d104      	bne.n	80028ba <HAL_TIM_PWM_Start+0x92>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028b8:	e00b      	b.n	80028d2 <HAL_TIM_PWM_Start+0xaa>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d104      	bne.n	80028ca <HAL_TIM_PWM_Start+0xa2>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028c8:	e003      	b.n	80028d2 <HAL_TIM_PWM_Start+0xaa>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2201      	movs	r2, #1
 80028d8:	6839      	ldr	r1, [r7, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 feac 	bl	8003638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002960 <HAL_TIM_PWM_Start+0x138>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d107      	bne.n	80028fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a18      	ldr	r2, [pc, #96]	@ (8002960 <HAL_TIM_PWM_Start+0x138>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00e      	beq.n	8002922 <HAL_TIM_PWM_Start+0xfa>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290c:	d009      	beq.n	8002922 <HAL_TIM_PWM_Start+0xfa>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a14      	ldr	r2, [pc, #80]	@ (8002964 <HAL_TIM_PWM_Start+0x13c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d004      	beq.n	8002922 <HAL_TIM_PWM_Start+0xfa>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a12      	ldr	r2, [pc, #72]	@ (8002968 <HAL_TIM_PWM_Start+0x140>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d111      	bne.n	8002946 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d010      	beq.n	8002956 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002944:	e007      	b.n	8002956 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40000400 	.word	0x40000400
 8002968:	40000800 	.word	0x40000800

0800296c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e093      	b.n	8002aa8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d106      	bne.n	800299a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7fe f8c5 	bl	8000b24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2202      	movs	r2, #2
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029b0:	f023 0307 	bic.w	r3, r3, #7
 80029b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f000 fbb9 	bl	8003138 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ee:	f023 0303 	bic.w	r3, r3, #3
 80029f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	4313      	orrs	r3, r2
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002a0c:	f023 030c 	bic.w	r3, r3, #12
 8002a10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	011a      	lsls	r2, r3, #4
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	031b      	lsls	r3, r3, #12
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002a4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	4313      	orrs	r3, r2
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ac0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ac8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ad0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002ad8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d110      	bne.n	8002b02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d102      	bne.n	8002aec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ae6:	7b7b      	ldrb	r3, [r7, #13]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d001      	beq.n	8002af0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e069      	b.n	8002bc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b00:	e031      	b.n	8002b66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d110      	bne.n	8002b2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b08:	7bbb      	ldrb	r3, [r7, #14]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d102      	bne.n	8002b14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b0e:	7b3b      	ldrb	r3, [r7, #12]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d001      	beq.n	8002b18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e055      	b.n	8002bc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b28:	e01d      	b.n	8002b66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d108      	bne.n	8002b42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b30:	7bbb      	ldrb	r3, [r7, #14]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d105      	bne.n	8002b42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b36:	7b7b      	ldrb	r3, [r7, #13]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d102      	bne.n	8002b42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b3c:	7b3b      	ldrb	r3, [r7, #12]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d001      	beq.n	8002b46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e03e      	b.n	8002bc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2202      	movs	r2, #2
 8002b52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_TIM_Encoder_Start+0xc4>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d008      	beq.n	8002b84 <HAL_TIM_Encoder_Start+0xd4>
 8002b72:	e00f      	b.n	8002b94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fd5b 	bl	8003638 <TIM_CCxChannelCmd>
      break;
 8002b82:	e016      	b.n	8002bb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	2104      	movs	r1, #4
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fd53 	bl	8003638 <TIM_CCxChannelCmd>
      break;
 8002b92:	e00e      	b.n	8002bb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fd4b 	bl	8003638 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2104      	movs	r1, #4
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fd44 	bl	8003638 <TIM_CCxChannelCmd>
      break;
 8002bb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0201 	orr.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d122      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d11b      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0202 	mvn.w	r2, #2
 8002bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fa76 	bl	8003100 <HAL_TIM_IC_CaptureCallback>
 8002c14:	e005      	b.n	8002c22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fa69 	bl	80030ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fa78 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d122      	bne.n	8002c7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d11b      	bne.n	8002c7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0204 	mvn.w	r2, #4
 8002c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2202      	movs	r2, #2
 8002c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fa4c 	bl	8003100 <HAL_TIM_IC_CaptureCallback>
 8002c68:	e005      	b.n	8002c76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa3f 	bl	80030ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fa4e 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d122      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d11b      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0208 	mvn.w	r2, #8
 8002ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fa22 	bl	8003100 <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e005      	b.n	8002cca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fa15 	bl	80030ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fa24 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b10      	cmp	r3, #16
 8002cdc:	d122      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d11b      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0210 	mvn.w	r2, #16
 8002cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f9f8 	bl	8003100 <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f9eb 	bl	80030ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f9fa 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d10e      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d107      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0201 	mvn.w	r2, #1
 8002d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fd fbaa 	bl	80004a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d5a:	2b80      	cmp	r3, #128	@ 0x80
 8002d5c:	d10e      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d68:	2b80      	cmp	r3, #128	@ 0x80
 8002d6a:	d107      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fd3a 	bl	80037f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d86:	2b40      	cmp	r3, #64	@ 0x40
 8002d88:	d10e      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d94:	2b40      	cmp	r3, #64	@ 0x40
 8002d96:	d107      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f9be 	bl	8003124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d10e      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d107      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0220 	mvn.w	r2, #32
 8002dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fd05 	bl	80037de <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e0ae      	b.n	8002f58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b0c      	cmp	r3, #12
 8002e06:	f200 809f 	bhi.w	8002f48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e10:	08002e45 	.word	0x08002e45
 8002e14:	08002f49 	.word	0x08002f49
 8002e18:	08002f49 	.word	0x08002f49
 8002e1c:	08002f49 	.word	0x08002f49
 8002e20:	08002e85 	.word	0x08002e85
 8002e24:	08002f49 	.word	0x08002f49
 8002e28:	08002f49 	.word	0x08002f49
 8002e2c:	08002f49 	.word	0x08002f49
 8002e30:	08002ec7 	.word	0x08002ec7
 8002e34:	08002f49 	.word	0x08002f49
 8002e38:	08002f49 	.word	0x08002f49
 8002e3c:	08002f49 	.word	0x08002f49
 8002e40:	08002f07 	.word	0x08002f07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f9d6 	bl	80031fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0208 	orr.w	r2, r2, #8
 8002e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0204 	bic.w	r2, r2, #4
 8002e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6999      	ldr	r1, [r3, #24]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	619a      	str	r2, [r3, #24]
      break;
 8002e82:	e064      	b.n	8002f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fa1c 	bl	80032c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6999      	ldr	r1, [r3, #24]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	021a      	lsls	r2, r3, #8
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	619a      	str	r2, [r3, #24]
      break;
 8002ec4:	e043      	b.n	8002f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fa65 	bl	800339c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0208 	orr.w	r2, r2, #8
 8002ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0204 	bic.w	r2, r2, #4
 8002ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69d9      	ldr	r1, [r3, #28]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	61da      	str	r2, [r3, #28]
      break;
 8002f04:	e023      	b.n	8002f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 faaf 	bl	8003470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69d9      	ldr	r1, [r3, #28]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	021a      	lsls	r2, r3, #8
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	61da      	str	r2, [r3, #28]
      break;
 8002f46:	e002      	b.n	8002f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_TIM_ConfigClockSource+0x1c>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e0b4      	b.n	80030e6 <HAL_TIM_ConfigClockSource+0x186>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fb4:	d03e      	beq.n	8003034 <HAL_TIM_ConfigClockSource+0xd4>
 8002fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fba:	f200 8087 	bhi.w	80030cc <HAL_TIM_ConfigClockSource+0x16c>
 8002fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fc2:	f000 8086 	beq.w	80030d2 <HAL_TIM_ConfigClockSource+0x172>
 8002fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fca:	d87f      	bhi.n	80030cc <HAL_TIM_ConfigClockSource+0x16c>
 8002fcc:	2b70      	cmp	r3, #112	@ 0x70
 8002fce:	d01a      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0xa6>
 8002fd0:	2b70      	cmp	r3, #112	@ 0x70
 8002fd2:	d87b      	bhi.n	80030cc <HAL_TIM_ConfigClockSource+0x16c>
 8002fd4:	2b60      	cmp	r3, #96	@ 0x60
 8002fd6:	d050      	beq.n	800307a <HAL_TIM_ConfigClockSource+0x11a>
 8002fd8:	2b60      	cmp	r3, #96	@ 0x60
 8002fda:	d877      	bhi.n	80030cc <HAL_TIM_ConfigClockSource+0x16c>
 8002fdc:	2b50      	cmp	r3, #80	@ 0x50
 8002fde:	d03c      	beq.n	800305a <HAL_TIM_ConfigClockSource+0xfa>
 8002fe0:	2b50      	cmp	r3, #80	@ 0x50
 8002fe2:	d873      	bhi.n	80030cc <HAL_TIM_ConfigClockSource+0x16c>
 8002fe4:	2b40      	cmp	r3, #64	@ 0x40
 8002fe6:	d058      	beq.n	800309a <HAL_TIM_ConfigClockSource+0x13a>
 8002fe8:	2b40      	cmp	r3, #64	@ 0x40
 8002fea:	d86f      	bhi.n	80030cc <HAL_TIM_ConfigClockSource+0x16c>
 8002fec:	2b30      	cmp	r3, #48	@ 0x30
 8002fee:	d064      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0x15a>
 8002ff0:	2b30      	cmp	r3, #48	@ 0x30
 8002ff2:	d86b      	bhi.n	80030cc <HAL_TIM_ConfigClockSource+0x16c>
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d060      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0x15a>
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d867      	bhi.n	80030cc <HAL_TIM_ConfigClockSource+0x16c>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d05c      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0x15a>
 8003000:	2b10      	cmp	r3, #16
 8003002:	d05a      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0x15a>
 8003004:	e062      	b.n	80030cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003016:	f000 faf0 	bl	80035fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	609a      	str	r2, [r3, #8]
      break;
 8003032:	e04f      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003044:	f000 fad9 	bl	80035fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003056:	609a      	str	r2, [r3, #8]
      break;
 8003058:	e03c      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003066:	461a      	mov	r2, r3
 8003068:	f000 fa50 	bl	800350c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2150      	movs	r1, #80	@ 0x50
 8003072:	4618      	mov	r0, r3
 8003074:	f000 faa7 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 8003078:	e02c      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003086:	461a      	mov	r2, r3
 8003088:	f000 fa6e 	bl	8003568 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2160      	movs	r1, #96	@ 0x60
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fa97 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 8003098:	e01c      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a6:	461a      	mov	r2, r3
 80030a8:	f000 fa30 	bl	800350c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2140      	movs	r1, #64	@ 0x40
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fa87 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 80030b8:	e00c      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4619      	mov	r1, r3
 80030c4:	4610      	mov	r0, r2
 80030c6:	f000 fa7e 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 80030ca:	e003      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
      break;
 80030d0:	e000      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
	...

08003138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a29      	ldr	r2, [pc, #164]	@ (80031f0 <TIM_Base_SetConfig+0xb8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00b      	beq.n	8003168 <TIM_Base_SetConfig+0x30>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003156:	d007      	beq.n	8003168 <TIM_Base_SetConfig+0x30>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a26      	ldr	r2, [pc, #152]	@ (80031f4 <TIM_Base_SetConfig+0xbc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_Base_SetConfig+0x30>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a25      	ldr	r2, [pc, #148]	@ (80031f8 <TIM_Base_SetConfig+0xc0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d108      	bne.n	800317a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800316e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1c      	ldr	r2, [pc, #112]	@ (80031f0 <TIM_Base_SetConfig+0xb8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00b      	beq.n	800319a <TIM_Base_SetConfig+0x62>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003188:	d007      	beq.n	800319a <TIM_Base_SetConfig+0x62>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a19      	ldr	r2, [pc, #100]	@ (80031f4 <TIM_Base_SetConfig+0xbc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d003      	beq.n	800319a <TIM_Base_SetConfig+0x62>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a18      	ldr	r2, [pc, #96]	@ (80031f8 <TIM_Base_SetConfig+0xc0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a07      	ldr	r2, [pc, #28]	@ (80031f0 <TIM_Base_SetConfig+0xb8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d103      	bne.n	80031e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	615a      	str	r2, [r3, #20]
}
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800

080031fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f023 0201 	bic.w	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800322a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f023 0302 	bic.w	r3, r3, #2
 8003244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a1c      	ldr	r2, [pc, #112]	@ (80032c4 <TIM_OC1_SetConfig+0xc8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d10c      	bne.n	8003272 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f023 0308 	bic.w	r3, r3, #8
 800325e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a13      	ldr	r2, [pc, #76]	@ (80032c4 <TIM_OC1_SetConfig+0xc8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d111      	bne.n	800329e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	621a      	str	r2, [r3, #32]
}
 80032b8:	bf00      	nop
 80032ba:	371c      	adds	r7, #28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40012c00 	.word	0x40012c00

080032c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f023 0210 	bic.w	r2, r3, #16
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f023 0320 	bic.w	r3, r3, #32
 8003312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a1d      	ldr	r2, [pc, #116]	@ (8003398 <TIM_OC2_SetConfig+0xd0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d10d      	bne.n	8003344 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800332e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003342:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a14      	ldr	r2, [pc, #80]	@ (8003398 <TIM_OC2_SetConfig+0xd0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d113      	bne.n	8003374 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800335a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	621a      	str	r2, [r3, #32]
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	40012c00 	.word	0x40012c00

0800339c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1d      	ldr	r2, [pc, #116]	@ (800346c <TIM_OC3_SetConfig+0xd0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d10d      	bne.n	8003416 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a14      	ldr	r2, [pc, #80]	@ (800346c <TIM_OC3_SetConfig+0xd0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d113      	bne.n	8003446 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800342c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	621a      	str	r2, [r3, #32]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40012c00 	.word	0x40012c00

08003470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800349e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	031b      	lsls	r3, r3, #12
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a0f      	ldr	r2, [pc, #60]	@ (8003508 <TIM_OC4_SetConfig+0x98>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d109      	bne.n	80034e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	019b      	lsls	r3, r3, #6
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	621a      	str	r2, [r3, #32]
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	40012c00 	.word	0x40012c00

0800350c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f023 0201 	bic.w	r2, r3, #1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f023 030a 	bic.w	r3, r3, #10
 8003548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	f023 0210 	bic.w	r2, r3, #16
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	031b      	lsls	r3, r3, #12
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	621a      	str	r2, [r3, #32]
}
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr

080035c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f043 0307 	orr.w	r3, r3, #7
 80035e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	609a      	str	r2, [r3, #8]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b087      	sub	sp, #28
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003614:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	021a      	lsls	r2, r3, #8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	431a      	orrs	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4313      	orrs	r3, r2
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	609a      	str	r2, [r3, #8]
}
 800362e:	bf00      	nop
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	2201      	movs	r2, #1
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a1a      	ldr	r2, [r3, #32]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	43db      	mvns	r3, r3
 800365a:	401a      	ands	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1a      	ldr	r2, [r3, #32]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	fa01 f303 	lsl.w	r3, r1, r3
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003694:	2302      	movs	r3, #2
 8003696:	e046      	b.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a16      	ldr	r2, [pc, #88]	@ (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00e      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e4:	d009      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a12      	ldr	r2, [pc, #72]	@ (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a10      	ldr	r2, [pc, #64]	@ (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d10c      	bne.n	8003714 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	4313      	orrs	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr
 8003730:	40012c00 	.word	0x40012c00
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800

0800373c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003754:	2302      	movs	r3, #2
 8003756:	e03d      	b.n	80037d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr

08003802 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e042      	b.n	800389a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d106      	bne.n	800382e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7fd fa15 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2224      	movs	r2, #36	@ 0x24
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003844:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fdc6 	bl	80043d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800385a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800386a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800387a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b08a      	sub	sp, #40	@ 0x28
 80038a6:	af02      	add	r7, sp, #8
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	4613      	mov	r3, r2
 80038b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d16d      	bne.n	800399e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_UART_Transmit+0x2c>
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e066      	b.n	80039a0 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2221      	movs	r2, #33	@ 0x21
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038e0:	f7fd fa8a 	bl	8000df8 <HAL_GetTick>
 80038e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	88fa      	ldrh	r2, [r7, #6]
 80038ea:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038fa:	d108      	bne.n	800390e <HAL_UART_Transmit+0x6c>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	e003      	b.n	8003916 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003916:	e02a      	b.n	800396e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2200      	movs	r2, #0
 8003920:	2180      	movs	r1, #128	@ 0x80
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fb15 	bl	8003f52 <UART_WaitOnFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e036      	b.n	80039a0 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10b      	bne.n	8003950 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003946:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	3302      	adds	r3, #2
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	e007      	b.n	8003960 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	781a      	ldrb	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3301      	adds	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1cf      	bne.n	8003918 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2200      	movs	r2, #0
 8003980:	2140      	movs	r1, #64	@ 0x40
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fae5 	bl	8003f52 <UART_WaitOnFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e006      	b.n	80039a0 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800399e:	2302      	movs	r3, #2
  }
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	4613      	mov	r3, r2
 80039b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d112      	bne.n	80039e8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <HAL_UART_Receive_IT+0x26>
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e00b      	b.n	80039ea <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	461a      	mov	r2, r3
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fb25 	bl	800402e <UART_Start_Receive_IT>
 80039e4:	4603      	mov	r3, r0
 80039e6:	e000      	b.n	80039ea <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80039e8:	2302      	movs	r3, #2
  }
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b0ba      	sub	sp, #232	@ 0xe8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_UART_IRQHandler+0x66>
 8003a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fc01 	bl	800425a <UART_Receive_IT>
      return;
 8003a58:	e25b      	b.n	8003f12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80de 	beq.w	8003c20 <HAL_UART_IRQHandler+0x22c>
 8003a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a74:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80d1 	beq.w	8003c20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_UART_IRQHandler+0xae>
 8003a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9a:	f043 0201 	orr.w	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <HAL_UART_IRQHandler+0xd2>
 8003aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abe:	f043 0202 	orr.w	r2, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_UART_IRQHandler+0xf6>
 8003ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	f043 0204 	orr.w	r2, r3, #4
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d011      	beq.n	8003b1a <HAL_UART_IRQHandler+0x126>
 8003af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d105      	bne.n	8003b0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b12:	f043 0208 	orr.w	r2, r3, #8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 81f2 	beq.w	8003f08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_UART_IRQHandler+0x14e>
 8003b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fb8c 	bl	800425a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	bf14      	ite	ne
 8003b50:	2301      	movne	r3, #1
 8003b52:	2300      	moveq	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <HAL_UART_IRQHandler+0x17a>
 8003b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d04f      	beq.n	8003c0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa96 	bl	80040a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d041      	beq.n	8003c06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3314      	adds	r3, #20
 8003b88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3314      	adds	r3, #20
 8003baa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003bae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1d9      	bne.n	8003b82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d013      	beq.n	8003bfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bda:	4a7e      	ldr	r2, [pc, #504]	@ (8003dd4 <HAL_UART_IRQHandler+0x3e0>)
 8003bdc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd fa7e 	bl	80010e4 <HAL_DMA_Abort_IT>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d016      	beq.n	8003c1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfc:	e00e      	b.n	8003c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f993 	bl	8003f2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	e00a      	b.n	8003c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f98f 	bl	8003f2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0c:	e006      	b.n	8003c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f98b 	bl	8003f2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c1a:	e175      	b.n	8003f08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	bf00      	nop
    return;
 8003c1e:	e173      	b.n	8003f08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	f040 814f 	bne.w	8003ec8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8148 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8141 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c46:	2300      	movs	r3, #0
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80b6 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8145 	beq.w	8003f0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	f080 813e 	bcs.w	8003f0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c96:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	f000 8088 	beq.w	8003db4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003cba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003cd0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003cdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1d9      	bne.n	8003ca4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3314      	adds	r3, #20
 8003cf6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3314      	adds	r3, #20
 8003d10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d14:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d18:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e1      	bne.n	8003cf0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3314      	adds	r3, #20
 8003d32:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3314      	adds	r3, #20
 8003d4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d50:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d56:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e3      	bne.n	8003d2c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d84:	f023 0310 	bic.w	r3, r3, #16
 8003d88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d96:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d98:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003da4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e3      	bne.n	8003d72 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd f95d 	bl	800106e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f8b6 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dd0:	e09c      	b.n	8003f0c <HAL_UART_IRQHandler+0x518>
 8003dd2:	bf00      	nop
 8003dd4:	08004165 	.word	0x08004165
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 808e 	beq.w	8003f10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003df4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8089 	beq.w	8003f10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	330c      	adds	r3, #12
 8003e04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e22:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e3      	bne.n	8003dfe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3314      	adds	r3, #20
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	623b      	str	r3, [r7, #32]
   return(result);
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3314      	adds	r3, #20
 8003e56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e3      	bne.n	8003e36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0310 	bic.w	r3, r3, #16
 8003e92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	330c      	adds	r3, #12
 8003e9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ea0:	61fa      	str	r2, [r7, #28]
 8003ea2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	69b9      	ldr	r1, [r7, #24]
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	617b      	str	r3, [r7, #20]
   return(result);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e3      	bne.n	8003e7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003eba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f83b 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ec6:	e023      	b.n	8003f10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d009      	beq.n	8003ee8 <HAL_UART_IRQHandler+0x4f4>
 8003ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f953 	bl	800418c <UART_Transmit_IT>
    return;
 8003ee6:	e014      	b.n	8003f12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00e      	beq.n	8003f12 <HAL_UART_IRQHandler+0x51e>
 8003ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f992 	bl	800422a <UART_EndTransmit_IT>
    return;
 8003f06:	e004      	b.n	8003f12 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f08:	bf00      	nop
 8003f0a:	e002      	b.n	8003f12 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f0c:	bf00      	nop
 8003f0e:	e000      	b.n	8003f12 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f10:	bf00      	nop
  }
}
 8003f12:	37e8      	adds	r7, #232	@ 0xe8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b090      	sub	sp, #64	@ 0x40
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f62:	e050      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6a:	d04c      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f72:	f7fc ff41 	bl	8000df8 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d241      	bcs.n	8004006 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	330c      	adds	r3, #12
 8003f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fa2:	637a      	str	r2, [r7, #52]	@ 0x34
 8003fa4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e5      	bne.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3314      	adds	r3, #20
 8003fbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3314      	adds	r3, #20
 8003fd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fd6:	623a      	str	r2, [r7, #32]
 8003fd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	69f9      	ldr	r1, [r7, #28]
 8003fdc:	6a3a      	ldr	r2, [r7, #32]
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e5      	bne.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e00f      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	429a      	cmp	r2, r3
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	429a      	cmp	r2, r3
 8004022:	d09f      	beq.n	8003f64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3740      	adds	r7, #64	@ 0x40
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	4613      	mov	r3, r2
 800403a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	88fa      	ldrh	r2, [r7, #6]
 8004046:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2222      	movs	r2, #34	@ 0x22
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d007      	beq.n	8004074 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004072:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0220 	orr.w	r2, r2, #32
 8004092:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b095      	sub	sp, #84	@ 0x54
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	330c      	adds	r3, #12
 80040c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80040ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e5      	bne.n	80040a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3314      	adds	r3, #20
 80040e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3314      	adds	r3, #20
 80040fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e5      	bne.n	80040dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004114:	2b01      	cmp	r3, #1
 8004116:	d119      	bne.n	800414c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	60bb      	str	r3, [r7, #8]
   return(result);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f023 0310 	bic.w	r3, r3, #16
 800412e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004138:	61ba      	str	r2, [r7, #24]
 800413a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6979      	ldr	r1, [r7, #20]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	613b      	str	r3, [r7, #16]
   return(result);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e5      	bne.n	8004118 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800415a:	bf00      	nop
 800415c:	3754      	adds	r7, #84	@ 0x54
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7ff fed3 	bl	8003f2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b21      	cmp	r3, #33	@ 0x21
 800419e:	d13e      	bne.n	800421e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a8:	d114      	bne.n	80041d4 <UART_Transmit_IT+0x48>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d110      	bne.n	80041d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	1c9a      	adds	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	621a      	str	r2, [r3, #32]
 80041d2:	e008      	b.n	80041e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	1c59      	adds	r1, r3, #1
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6211      	str	r1, [r2, #32]
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	4619      	mov	r1, r3
 80041f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10f      	bne.n	800421a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004208:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004218:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	e000      	b.n	8004220 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800421e:	2302      	movs	r3, #2
  }
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr

0800422a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004240:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff fe64 	bl	8003f18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b08c      	sub	sp, #48	@ 0x30
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b22      	cmp	r3, #34	@ 0x22
 800426c:	f040 80ae 	bne.w	80043cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004278:	d117      	bne.n	80042aa <UART_Receive_IT+0x50>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d113      	bne.n	80042aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004282:	2300      	movs	r3, #0
 8004284:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	b29b      	uxth	r3, r3
 8004294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004298:	b29a      	uxth	r2, r3
 800429a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a2:	1c9a      	adds	r2, r3, #2
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80042a8:	e026      	b.n	80042f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042bc:	d007      	beq.n	80042ce <UART_Receive_IT+0x74>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <UART_Receive_IT+0x82>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	e008      	b.n	80042ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29b      	uxth	r3, r3
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	4619      	mov	r1, r3
 8004306:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004308:	2b00      	cmp	r3, #0
 800430a:	d15d      	bne.n	80043c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0220 	bic.w	r2, r2, #32
 800431a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800432a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0201 	bic.w	r2, r2, #1
 800433a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	2b01      	cmp	r3, #1
 8004350:	d135      	bne.n	80043be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	613b      	str	r3, [r7, #16]
   return(result);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f023 0310 	bic.w	r3, r3, #16
 800436e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	330c      	adds	r3, #12
 8004376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004378:	623a      	str	r2, [r7, #32]
 800437a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	69f9      	ldr	r1, [r7, #28]
 800437e:	6a3a      	ldr	r2, [r7, #32]
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	61bb      	str	r3, [r7, #24]
   return(result);
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e5      	bne.n	8004358 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b10      	cmp	r3, #16
 8004398:	d10a      	bne.n	80043b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff fdc0 	bl	8003f3c <HAL_UARTEx_RxEventCallback>
 80043bc:	e002      	b.n	80043c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fc f81e 	bl	8000400 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e002      	b.n	80043ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e000      	b.n	80043ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043cc:	2302      	movs	r3, #2
  }
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3730      	adds	r7, #48	@ 0x30
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004412:	f023 030c 	bic.w	r3, r3, #12
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	430b      	orrs	r3, r1
 800441e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2c      	ldr	r2, [pc, #176]	@ (80044ec <UART_SetConfig+0x114>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d103      	bne.n	8004448 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004440:	f7fe f8c6 	bl	80025d0 <HAL_RCC_GetPCLK2Freq>
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	e002      	b.n	800444e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004448:	f7fe f8ae 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 800444c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009a      	lsls	r2, r3, #2
 8004458:	441a      	add	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	4a22      	ldr	r2, [pc, #136]	@ (80044f0 <UART_SetConfig+0x118>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	0119      	lsls	r1, r3, #4
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	009a      	lsls	r2, r3, #2
 8004478:	441a      	add	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	fbb2 f2f3 	udiv	r2, r2, r3
 8004484:	4b1a      	ldr	r3, [pc, #104]	@ (80044f0 <UART_SetConfig+0x118>)
 8004486:	fba3 0302 	umull	r0, r3, r3, r2
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	2064      	movs	r0, #100	@ 0x64
 800448e:	fb00 f303 	mul.w	r3, r0, r3
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	3332      	adds	r3, #50	@ 0x32
 8004498:	4a15      	ldr	r2, [pc, #84]	@ (80044f0 <UART_SetConfig+0x118>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044a4:	4419      	add	r1, r3
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	009a      	lsls	r2, r3, #2
 80044b0:	441a      	add	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044bc:	4b0c      	ldr	r3, [pc, #48]	@ (80044f0 <UART_SetConfig+0x118>)
 80044be:	fba3 0302 	umull	r0, r3, r3, r2
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	2064      	movs	r0, #100	@ 0x64
 80044c6:	fb00 f303 	mul.w	r3, r0, r3
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	3332      	adds	r3, #50	@ 0x32
 80044d0:	4a07      	ldr	r2, [pc, #28]	@ (80044f0 <UART_SetConfig+0x118>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	f003 020f 	and.w	r2, r3, #15
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	440a      	add	r2, r1
 80044e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40013800 	.word	0x40013800
 80044f0:	51eb851f 	.word	0x51eb851f

080044f4 <siprintf>:
 80044f4:	b40e      	push	{r1, r2, r3}
 80044f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80044fa:	b500      	push	{lr}
 80044fc:	b09c      	sub	sp, #112	@ 0x70
 80044fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8004500:	9002      	str	r0, [sp, #8]
 8004502:	9006      	str	r0, [sp, #24]
 8004504:	9107      	str	r1, [sp, #28]
 8004506:	9104      	str	r1, [sp, #16]
 8004508:	4808      	ldr	r0, [pc, #32]	@ (800452c <siprintf+0x38>)
 800450a:	4909      	ldr	r1, [pc, #36]	@ (8004530 <siprintf+0x3c>)
 800450c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004510:	9105      	str	r1, [sp, #20]
 8004512:	6800      	ldr	r0, [r0, #0]
 8004514:	a902      	add	r1, sp, #8
 8004516:	9301      	str	r3, [sp, #4]
 8004518:	f000 f9a0 	bl	800485c <_svfiprintf_r>
 800451c:	2200      	movs	r2, #0
 800451e:	9b02      	ldr	r3, [sp, #8]
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	b01c      	add	sp, #112	@ 0x70
 8004524:	f85d eb04 	ldr.w	lr, [sp], #4
 8004528:	b003      	add	sp, #12
 800452a:	4770      	bx	lr
 800452c:	2000000c 	.word	0x2000000c
 8004530:	ffff0208 	.word	0xffff0208

08004534 <memset>:
 8004534:	4603      	mov	r3, r0
 8004536:	4402      	add	r2, r0
 8004538:	4293      	cmp	r3, r2
 800453a:	d100      	bne.n	800453e <memset+0xa>
 800453c:	4770      	bx	lr
 800453e:	f803 1b01 	strb.w	r1, [r3], #1
 8004542:	e7f9      	b.n	8004538 <memset+0x4>

08004544 <__errno>:
 8004544:	4b01      	ldr	r3, [pc, #4]	@ (800454c <__errno+0x8>)
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	2000000c 	.word	0x2000000c

08004550 <__libc_init_array>:
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	2600      	movs	r6, #0
 8004554:	4d0c      	ldr	r5, [pc, #48]	@ (8004588 <__libc_init_array+0x38>)
 8004556:	4c0d      	ldr	r4, [pc, #52]	@ (800458c <__libc_init_array+0x3c>)
 8004558:	1b64      	subs	r4, r4, r5
 800455a:	10a4      	asrs	r4, r4, #2
 800455c:	42a6      	cmp	r6, r4
 800455e:	d109      	bne.n	8004574 <__libc_init_array+0x24>
 8004560:	f000 fc78 	bl	8004e54 <_init>
 8004564:	2600      	movs	r6, #0
 8004566:	4d0a      	ldr	r5, [pc, #40]	@ (8004590 <__libc_init_array+0x40>)
 8004568:	4c0a      	ldr	r4, [pc, #40]	@ (8004594 <__libc_init_array+0x44>)
 800456a:	1b64      	subs	r4, r4, r5
 800456c:	10a4      	asrs	r4, r4, #2
 800456e:	42a6      	cmp	r6, r4
 8004570:	d105      	bne.n	800457e <__libc_init_array+0x2e>
 8004572:	bd70      	pop	{r4, r5, r6, pc}
 8004574:	f855 3b04 	ldr.w	r3, [r5], #4
 8004578:	4798      	blx	r3
 800457a:	3601      	adds	r6, #1
 800457c:	e7ee      	b.n	800455c <__libc_init_array+0xc>
 800457e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004582:	4798      	blx	r3
 8004584:	3601      	adds	r6, #1
 8004586:	e7f2      	b.n	800456e <__libc_init_array+0x1e>
 8004588:	08004edc 	.word	0x08004edc
 800458c:	08004edc 	.word	0x08004edc
 8004590:	08004edc 	.word	0x08004edc
 8004594:	08004ee0 	.word	0x08004ee0

08004598 <__retarget_lock_acquire_recursive>:
 8004598:	4770      	bx	lr

0800459a <__retarget_lock_release_recursive>:
 800459a:	4770      	bx	lr

0800459c <memcpy>:
 800459c:	440a      	add	r2, r1
 800459e:	4291      	cmp	r1, r2
 80045a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80045a4:	d100      	bne.n	80045a8 <memcpy+0xc>
 80045a6:	4770      	bx	lr
 80045a8:	b510      	push	{r4, lr}
 80045aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ae:	4291      	cmp	r1, r2
 80045b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045b4:	d1f9      	bne.n	80045aa <memcpy+0xe>
 80045b6:	bd10      	pop	{r4, pc}

080045b8 <_free_r>:
 80045b8:	b538      	push	{r3, r4, r5, lr}
 80045ba:	4605      	mov	r5, r0
 80045bc:	2900      	cmp	r1, #0
 80045be:	d040      	beq.n	8004642 <_free_r+0x8a>
 80045c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c4:	1f0c      	subs	r4, r1, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bfb8      	it	lt
 80045ca:	18e4      	addlt	r4, r4, r3
 80045cc:	f000 f8de 	bl	800478c <__malloc_lock>
 80045d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004644 <_free_r+0x8c>)
 80045d2:	6813      	ldr	r3, [r2, #0]
 80045d4:	b933      	cbnz	r3, 80045e4 <_free_r+0x2c>
 80045d6:	6063      	str	r3, [r4, #4]
 80045d8:	6014      	str	r4, [r2, #0]
 80045da:	4628      	mov	r0, r5
 80045dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045e0:	f000 b8da 	b.w	8004798 <__malloc_unlock>
 80045e4:	42a3      	cmp	r3, r4
 80045e6:	d908      	bls.n	80045fa <_free_r+0x42>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	1821      	adds	r1, r4, r0
 80045ec:	428b      	cmp	r3, r1
 80045ee:	bf01      	itttt	eq
 80045f0:	6819      	ldreq	r1, [r3, #0]
 80045f2:	685b      	ldreq	r3, [r3, #4]
 80045f4:	1809      	addeq	r1, r1, r0
 80045f6:	6021      	streq	r1, [r4, #0]
 80045f8:	e7ed      	b.n	80045d6 <_free_r+0x1e>
 80045fa:	461a      	mov	r2, r3
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	b10b      	cbz	r3, 8004604 <_free_r+0x4c>
 8004600:	42a3      	cmp	r3, r4
 8004602:	d9fa      	bls.n	80045fa <_free_r+0x42>
 8004604:	6811      	ldr	r1, [r2, #0]
 8004606:	1850      	adds	r0, r2, r1
 8004608:	42a0      	cmp	r0, r4
 800460a:	d10b      	bne.n	8004624 <_free_r+0x6c>
 800460c:	6820      	ldr	r0, [r4, #0]
 800460e:	4401      	add	r1, r0
 8004610:	1850      	adds	r0, r2, r1
 8004612:	4283      	cmp	r3, r0
 8004614:	6011      	str	r1, [r2, #0]
 8004616:	d1e0      	bne.n	80045da <_free_r+0x22>
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4408      	add	r0, r1
 800461e:	6010      	str	r0, [r2, #0]
 8004620:	6053      	str	r3, [r2, #4]
 8004622:	e7da      	b.n	80045da <_free_r+0x22>
 8004624:	d902      	bls.n	800462c <_free_r+0x74>
 8004626:	230c      	movs	r3, #12
 8004628:	602b      	str	r3, [r5, #0]
 800462a:	e7d6      	b.n	80045da <_free_r+0x22>
 800462c:	6820      	ldr	r0, [r4, #0]
 800462e:	1821      	adds	r1, r4, r0
 8004630:	428b      	cmp	r3, r1
 8004632:	bf01      	itttt	eq
 8004634:	6819      	ldreq	r1, [r3, #0]
 8004636:	685b      	ldreq	r3, [r3, #4]
 8004638:	1809      	addeq	r1, r1, r0
 800463a:	6021      	streq	r1, [r4, #0]
 800463c:	6063      	str	r3, [r4, #4]
 800463e:	6054      	str	r4, [r2, #4]
 8004640:	e7cb      	b.n	80045da <_free_r+0x22>
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	200007c4 	.word	0x200007c4

08004648 <sbrk_aligned>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	4e0f      	ldr	r6, [pc, #60]	@ (8004688 <sbrk_aligned+0x40>)
 800464c:	460c      	mov	r4, r1
 800464e:	6831      	ldr	r1, [r6, #0]
 8004650:	4605      	mov	r5, r0
 8004652:	b911      	cbnz	r1, 800465a <sbrk_aligned+0x12>
 8004654:	f000 fbaa 	bl	8004dac <_sbrk_r>
 8004658:	6030      	str	r0, [r6, #0]
 800465a:	4621      	mov	r1, r4
 800465c:	4628      	mov	r0, r5
 800465e:	f000 fba5 	bl	8004dac <_sbrk_r>
 8004662:	1c43      	adds	r3, r0, #1
 8004664:	d103      	bne.n	800466e <sbrk_aligned+0x26>
 8004666:	f04f 34ff 	mov.w	r4, #4294967295
 800466a:	4620      	mov	r0, r4
 800466c:	bd70      	pop	{r4, r5, r6, pc}
 800466e:	1cc4      	adds	r4, r0, #3
 8004670:	f024 0403 	bic.w	r4, r4, #3
 8004674:	42a0      	cmp	r0, r4
 8004676:	d0f8      	beq.n	800466a <sbrk_aligned+0x22>
 8004678:	1a21      	subs	r1, r4, r0
 800467a:	4628      	mov	r0, r5
 800467c:	f000 fb96 	bl	8004dac <_sbrk_r>
 8004680:	3001      	adds	r0, #1
 8004682:	d1f2      	bne.n	800466a <sbrk_aligned+0x22>
 8004684:	e7ef      	b.n	8004666 <sbrk_aligned+0x1e>
 8004686:	bf00      	nop
 8004688:	200007c0 	.word	0x200007c0

0800468c <_malloc_r>:
 800468c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004690:	1ccd      	adds	r5, r1, #3
 8004692:	f025 0503 	bic.w	r5, r5, #3
 8004696:	3508      	adds	r5, #8
 8004698:	2d0c      	cmp	r5, #12
 800469a:	bf38      	it	cc
 800469c:	250c      	movcc	r5, #12
 800469e:	2d00      	cmp	r5, #0
 80046a0:	4606      	mov	r6, r0
 80046a2:	db01      	blt.n	80046a8 <_malloc_r+0x1c>
 80046a4:	42a9      	cmp	r1, r5
 80046a6:	d904      	bls.n	80046b2 <_malloc_r+0x26>
 80046a8:	230c      	movs	r3, #12
 80046aa:	6033      	str	r3, [r6, #0]
 80046ac:	2000      	movs	r0, #0
 80046ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004788 <_malloc_r+0xfc>
 80046b6:	f000 f869 	bl	800478c <__malloc_lock>
 80046ba:	f8d8 3000 	ldr.w	r3, [r8]
 80046be:	461c      	mov	r4, r3
 80046c0:	bb44      	cbnz	r4, 8004714 <_malloc_r+0x88>
 80046c2:	4629      	mov	r1, r5
 80046c4:	4630      	mov	r0, r6
 80046c6:	f7ff ffbf 	bl	8004648 <sbrk_aligned>
 80046ca:	1c43      	adds	r3, r0, #1
 80046cc:	4604      	mov	r4, r0
 80046ce:	d158      	bne.n	8004782 <_malloc_r+0xf6>
 80046d0:	f8d8 4000 	ldr.w	r4, [r8]
 80046d4:	4627      	mov	r7, r4
 80046d6:	2f00      	cmp	r7, #0
 80046d8:	d143      	bne.n	8004762 <_malloc_r+0xd6>
 80046da:	2c00      	cmp	r4, #0
 80046dc:	d04b      	beq.n	8004776 <_malloc_r+0xea>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	4639      	mov	r1, r7
 80046e2:	4630      	mov	r0, r6
 80046e4:	eb04 0903 	add.w	r9, r4, r3
 80046e8:	f000 fb60 	bl	8004dac <_sbrk_r>
 80046ec:	4581      	cmp	r9, r0
 80046ee:	d142      	bne.n	8004776 <_malloc_r+0xea>
 80046f0:	6821      	ldr	r1, [r4, #0]
 80046f2:	4630      	mov	r0, r6
 80046f4:	1a6d      	subs	r5, r5, r1
 80046f6:	4629      	mov	r1, r5
 80046f8:	f7ff ffa6 	bl	8004648 <sbrk_aligned>
 80046fc:	3001      	adds	r0, #1
 80046fe:	d03a      	beq.n	8004776 <_malloc_r+0xea>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	442b      	add	r3, r5
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	f8d8 3000 	ldr.w	r3, [r8]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	bb62      	cbnz	r2, 8004768 <_malloc_r+0xdc>
 800470e:	f8c8 7000 	str.w	r7, [r8]
 8004712:	e00f      	b.n	8004734 <_malloc_r+0xa8>
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	1b52      	subs	r2, r2, r5
 8004718:	d420      	bmi.n	800475c <_malloc_r+0xd0>
 800471a:	2a0b      	cmp	r2, #11
 800471c:	d917      	bls.n	800474e <_malloc_r+0xc2>
 800471e:	1961      	adds	r1, r4, r5
 8004720:	42a3      	cmp	r3, r4
 8004722:	6025      	str	r5, [r4, #0]
 8004724:	bf18      	it	ne
 8004726:	6059      	strne	r1, [r3, #4]
 8004728:	6863      	ldr	r3, [r4, #4]
 800472a:	bf08      	it	eq
 800472c:	f8c8 1000 	streq.w	r1, [r8]
 8004730:	5162      	str	r2, [r4, r5]
 8004732:	604b      	str	r3, [r1, #4]
 8004734:	4630      	mov	r0, r6
 8004736:	f000 f82f 	bl	8004798 <__malloc_unlock>
 800473a:	f104 000b 	add.w	r0, r4, #11
 800473e:	1d23      	adds	r3, r4, #4
 8004740:	f020 0007 	bic.w	r0, r0, #7
 8004744:	1ac2      	subs	r2, r0, r3
 8004746:	bf1c      	itt	ne
 8004748:	1a1b      	subne	r3, r3, r0
 800474a:	50a3      	strne	r3, [r4, r2]
 800474c:	e7af      	b.n	80046ae <_malloc_r+0x22>
 800474e:	6862      	ldr	r2, [r4, #4]
 8004750:	42a3      	cmp	r3, r4
 8004752:	bf0c      	ite	eq
 8004754:	f8c8 2000 	streq.w	r2, [r8]
 8004758:	605a      	strne	r2, [r3, #4]
 800475a:	e7eb      	b.n	8004734 <_malloc_r+0xa8>
 800475c:	4623      	mov	r3, r4
 800475e:	6864      	ldr	r4, [r4, #4]
 8004760:	e7ae      	b.n	80046c0 <_malloc_r+0x34>
 8004762:	463c      	mov	r4, r7
 8004764:	687f      	ldr	r7, [r7, #4]
 8004766:	e7b6      	b.n	80046d6 <_malloc_r+0x4a>
 8004768:	461a      	mov	r2, r3
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	42a3      	cmp	r3, r4
 800476e:	d1fb      	bne.n	8004768 <_malloc_r+0xdc>
 8004770:	2300      	movs	r3, #0
 8004772:	6053      	str	r3, [r2, #4]
 8004774:	e7de      	b.n	8004734 <_malloc_r+0xa8>
 8004776:	230c      	movs	r3, #12
 8004778:	4630      	mov	r0, r6
 800477a:	6033      	str	r3, [r6, #0]
 800477c:	f000 f80c 	bl	8004798 <__malloc_unlock>
 8004780:	e794      	b.n	80046ac <_malloc_r+0x20>
 8004782:	6005      	str	r5, [r0, #0]
 8004784:	e7d6      	b.n	8004734 <_malloc_r+0xa8>
 8004786:	bf00      	nop
 8004788:	200007c4 	.word	0x200007c4

0800478c <__malloc_lock>:
 800478c:	4801      	ldr	r0, [pc, #4]	@ (8004794 <__malloc_lock+0x8>)
 800478e:	f7ff bf03 	b.w	8004598 <__retarget_lock_acquire_recursive>
 8004792:	bf00      	nop
 8004794:	200007bc 	.word	0x200007bc

08004798 <__malloc_unlock>:
 8004798:	4801      	ldr	r0, [pc, #4]	@ (80047a0 <__malloc_unlock+0x8>)
 800479a:	f7ff befe 	b.w	800459a <__retarget_lock_release_recursive>
 800479e:	bf00      	nop
 80047a0:	200007bc 	.word	0x200007bc

080047a4 <__ssputs_r>:
 80047a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a8:	461f      	mov	r7, r3
 80047aa:	688e      	ldr	r6, [r1, #8]
 80047ac:	4682      	mov	sl, r0
 80047ae:	42be      	cmp	r6, r7
 80047b0:	460c      	mov	r4, r1
 80047b2:	4690      	mov	r8, r2
 80047b4:	680b      	ldr	r3, [r1, #0]
 80047b6:	d82d      	bhi.n	8004814 <__ssputs_r+0x70>
 80047b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80047c0:	d026      	beq.n	8004810 <__ssputs_r+0x6c>
 80047c2:	6965      	ldr	r5, [r4, #20]
 80047c4:	6909      	ldr	r1, [r1, #16]
 80047c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047ca:	eba3 0901 	sub.w	r9, r3, r1
 80047ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047d2:	1c7b      	adds	r3, r7, #1
 80047d4:	444b      	add	r3, r9
 80047d6:	106d      	asrs	r5, r5, #1
 80047d8:	429d      	cmp	r5, r3
 80047da:	bf38      	it	cc
 80047dc:	461d      	movcc	r5, r3
 80047de:	0553      	lsls	r3, r2, #21
 80047e0:	d527      	bpl.n	8004832 <__ssputs_r+0x8e>
 80047e2:	4629      	mov	r1, r5
 80047e4:	f7ff ff52 	bl	800468c <_malloc_r>
 80047e8:	4606      	mov	r6, r0
 80047ea:	b360      	cbz	r0, 8004846 <__ssputs_r+0xa2>
 80047ec:	464a      	mov	r2, r9
 80047ee:	6921      	ldr	r1, [r4, #16]
 80047f0:	f7ff fed4 	bl	800459c <memcpy>
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80047fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	6126      	str	r6, [r4, #16]
 8004802:	444e      	add	r6, r9
 8004804:	6026      	str	r6, [r4, #0]
 8004806:	463e      	mov	r6, r7
 8004808:	6165      	str	r5, [r4, #20]
 800480a:	eba5 0509 	sub.w	r5, r5, r9
 800480e:	60a5      	str	r5, [r4, #8]
 8004810:	42be      	cmp	r6, r7
 8004812:	d900      	bls.n	8004816 <__ssputs_r+0x72>
 8004814:	463e      	mov	r6, r7
 8004816:	4632      	mov	r2, r6
 8004818:	4641      	mov	r1, r8
 800481a:	6820      	ldr	r0, [r4, #0]
 800481c:	f000 faac 	bl	8004d78 <memmove>
 8004820:	2000      	movs	r0, #0
 8004822:	68a3      	ldr	r3, [r4, #8]
 8004824:	1b9b      	subs	r3, r3, r6
 8004826:	60a3      	str	r3, [r4, #8]
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	4433      	add	r3, r6
 800482c:	6023      	str	r3, [r4, #0]
 800482e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004832:	462a      	mov	r2, r5
 8004834:	f000 fad8 	bl	8004de8 <_realloc_r>
 8004838:	4606      	mov	r6, r0
 800483a:	2800      	cmp	r0, #0
 800483c:	d1e0      	bne.n	8004800 <__ssputs_r+0x5c>
 800483e:	4650      	mov	r0, sl
 8004840:	6921      	ldr	r1, [r4, #16]
 8004842:	f7ff feb9 	bl	80045b8 <_free_r>
 8004846:	230c      	movs	r3, #12
 8004848:	f8ca 3000 	str.w	r3, [sl]
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	f04f 30ff 	mov.w	r0, #4294967295
 8004852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004856:	81a3      	strh	r3, [r4, #12]
 8004858:	e7e9      	b.n	800482e <__ssputs_r+0x8a>
	...

0800485c <_svfiprintf_r>:
 800485c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004860:	4698      	mov	r8, r3
 8004862:	898b      	ldrh	r3, [r1, #12]
 8004864:	4607      	mov	r7, r0
 8004866:	061b      	lsls	r3, r3, #24
 8004868:	460d      	mov	r5, r1
 800486a:	4614      	mov	r4, r2
 800486c:	b09d      	sub	sp, #116	@ 0x74
 800486e:	d510      	bpl.n	8004892 <_svfiprintf_r+0x36>
 8004870:	690b      	ldr	r3, [r1, #16]
 8004872:	b973      	cbnz	r3, 8004892 <_svfiprintf_r+0x36>
 8004874:	2140      	movs	r1, #64	@ 0x40
 8004876:	f7ff ff09 	bl	800468c <_malloc_r>
 800487a:	6028      	str	r0, [r5, #0]
 800487c:	6128      	str	r0, [r5, #16]
 800487e:	b930      	cbnz	r0, 800488e <_svfiprintf_r+0x32>
 8004880:	230c      	movs	r3, #12
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	f04f 30ff 	mov.w	r0, #4294967295
 8004888:	b01d      	add	sp, #116	@ 0x74
 800488a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800488e:	2340      	movs	r3, #64	@ 0x40
 8004890:	616b      	str	r3, [r5, #20]
 8004892:	2300      	movs	r3, #0
 8004894:	9309      	str	r3, [sp, #36]	@ 0x24
 8004896:	2320      	movs	r3, #32
 8004898:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800489c:	2330      	movs	r3, #48	@ 0x30
 800489e:	f04f 0901 	mov.w	r9, #1
 80048a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80048a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004a40 <_svfiprintf_r+0x1e4>
 80048aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048ae:	4623      	mov	r3, r4
 80048b0:	469a      	mov	sl, r3
 80048b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048b6:	b10a      	cbz	r2, 80048bc <_svfiprintf_r+0x60>
 80048b8:	2a25      	cmp	r2, #37	@ 0x25
 80048ba:	d1f9      	bne.n	80048b0 <_svfiprintf_r+0x54>
 80048bc:	ebba 0b04 	subs.w	fp, sl, r4
 80048c0:	d00b      	beq.n	80048da <_svfiprintf_r+0x7e>
 80048c2:	465b      	mov	r3, fp
 80048c4:	4622      	mov	r2, r4
 80048c6:	4629      	mov	r1, r5
 80048c8:	4638      	mov	r0, r7
 80048ca:	f7ff ff6b 	bl	80047a4 <__ssputs_r>
 80048ce:	3001      	adds	r0, #1
 80048d0:	f000 80a7 	beq.w	8004a22 <_svfiprintf_r+0x1c6>
 80048d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048d6:	445a      	add	r2, fp
 80048d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80048da:	f89a 3000 	ldrb.w	r3, [sl]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 809f 	beq.w	8004a22 <_svfiprintf_r+0x1c6>
 80048e4:	2300      	movs	r3, #0
 80048e6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ee:	f10a 0a01 	add.w	sl, sl, #1
 80048f2:	9304      	str	r3, [sp, #16]
 80048f4:	9307      	str	r3, [sp, #28]
 80048f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80048fc:	4654      	mov	r4, sl
 80048fe:	2205      	movs	r2, #5
 8004900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004904:	484e      	ldr	r0, [pc, #312]	@ (8004a40 <_svfiprintf_r+0x1e4>)
 8004906:	f000 fa61 	bl	8004dcc <memchr>
 800490a:	9a04      	ldr	r2, [sp, #16]
 800490c:	b9d8      	cbnz	r0, 8004946 <_svfiprintf_r+0xea>
 800490e:	06d0      	lsls	r0, r2, #27
 8004910:	bf44      	itt	mi
 8004912:	2320      	movmi	r3, #32
 8004914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004918:	0711      	lsls	r1, r2, #28
 800491a:	bf44      	itt	mi
 800491c:	232b      	movmi	r3, #43	@ 0x2b
 800491e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004922:	f89a 3000 	ldrb.w	r3, [sl]
 8004926:	2b2a      	cmp	r3, #42	@ 0x2a
 8004928:	d015      	beq.n	8004956 <_svfiprintf_r+0xfa>
 800492a:	4654      	mov	r4, sl
 800492c:	2000      	movs	r0, #0
 800492e:	f04f 0c0a 	mov.w	ip, #10
 8004932:	9a07      	ldr	r2, [sp, #28]
 8004934:	4621      	mov	r1, r4
 8004936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800493a:	3b30      	subs	r3, #48	@ 0x30
 800493c:	2b09      	cmp	r3, #9
 800493e:	d94b      	bls.n	80049d8 <_svfiprintf_r+0x17c>
 8004940:	b1b0      	cbz	r0, 8004970 <_svfiprintf_r+0x114>
 8004942:	9207      	str	r2, [sp, #28]
 8004944:	e014      	b.n	8004970 <_svfiprintf_r+0x114>
 8004946:	eba0 0308 	sub.w	r3, r0, r8
 800494a:	fa09 f303 	lsl.w	r3, r9, r3
 800494e:	4313      	orrs	r3, r2
 8004950:	46a2      	mov	sl, r4
 8004952:	9304      	str	r3, [sp, #16]
 8004954:	e7d2      	b.n	80048fc <_svfiprintf_r+0xa0>
 8004956:	9b03      	ldr	r3, [sp, #12]
 8004958:	1d19      	adds	r1, r3, #4
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	9103      	str	r1, [sp, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	bfbb      	ittet	lt
 8004962:	425b      	neglt	r3, r3
 8004964:	f042 0202 	orrlt.w	r2, r2, #2
 8004968:	9307      	strge	r3, [sp, #28]
 800496a:	9307      	strlt	r3, [sp, #28]
 800496c:	bfb8      	it	lt
 800496e:	9204      	strlt	r2, [sp, #16]
 8004970:	7823      	ldrb	r3, [r4, #0]
 8004972:	2b2e      	cmp	r3, #46	@ 0x2e
 8004974:	d10a      	bne.n	800498c <_svfiprintf_r+0x130>
 8004976:	7863      	ldrb	r3, [r4, #1]
 8004978:	2b2a      	cmp	r3, #42	@ 0x2a
 800497a:	d132      	bne.n	80049e2 <_svfiprintf_r+0x186>
 800497c:	9b03      	ldr	r3, [sp, #12]
 800497e:	3402      	adds	r4, #2
 8004980:	1d1a      	adds	r2, r3, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	9203      	str	r2, [sp, #12]
 8004986:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800498a:	9305      	str	r3, [sp, #20]
 800498c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004a44 <_svfiprintf_r+0x1e8>
 8004990:	2203      	movs	r2, #3
 8004992:	4650      	mov	r0, sl
 8004994:	7821      	ldrb	r1, [r4, #0]
 8004996:	f000 fa19 	bl	8004dcc <memchr>
 800499a:	b138      	cbz	r0, 80049ac <_svfiprintf_r+0x150>
 800499c:	2240      	movs	r2, #64	@ 0x40
 800499e:	9b04      	ldr	r3, [sp, #16]
 80049a0:	eba0 000a 	sub.w	r0, r0, sl
 80049a4:	4082      	lsls	r2, r0
 80049a6:	4313      	orrs	r3, r2
 80049a8:	3401      	adds	r4, #1
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b0:	2206      	movs	r2, #6
 80049b2:	4825      	ldr	r0, [pc, #148]	@ (8004a48 <_svfiprintf_r+0x1ec>)
 80049b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049b8:	f000 fa08 	bl	8004dcc <memchr>
 80049bc:	2800      	cmp	r0, #0
 80049be:	d036      	beq.n	8004a2e <_svfiprintf_r+0x1d2>
 80049c0:	4b22      	ldr	r3, [pc, #136]	@ (8004a4c <_svfiprintf_r+0x1f0>)
 80049c2:	bb1b      	cbnz	r3, 8004a0c <_svfiprintf_r+0x1b0>
 80049c4:	9b03      	ldr	r3, [sp, #12]
 80049c6:	3307      	adds	r3, #7
 80049c8:	f023 0307 	bic.w	r3, r3, #7
 80049cc:	3308      	adds	r3, #8
 80049ce:	9303      	str	r3, [sp, #12]
 80049d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049d2:	4433      	add	r3, r6
 80049d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d6:	e76a      	b.n	80048ae <_svfiprintf_r+0x52>
 80049d8:	460c      	mov	r4, r1
 80049da:	2001      	movs	r0, #1
 80049dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80049e0:	e7a8      	b.n	8004934 <_svfiprintf_r+0xd8>
 80049e2:	2300      	movs	r3, #0
 80049e4:	f04f 0c0a 	mov.w	ip, #10
 80049e8:	4619      	mov	r1, r3
 80049ea:	3401      	adds	r4, #1
 80049ec:	9305      	str	r3, [sp, #20]
 80049ee:	4620      	mov	r0, r4
 80049f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049f4:	3a30      	subs	r2, #48	@ 0x30
 80049f6:	2a09      	cmp	r2, #9
 80049f8:	d903      	bls.n	8004a02 <_svfiprintf_r+0x1a6>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0c6      	beq.n	800498c <_svfiprintf_r+0x130>
 80049fe:	9105      	str	r1, [sp, #20]
 8004a00:	e7c4      	b.n	800498c <_svfiprintf_r+0x130>
 8004a02:	4604      	mov	r4, r0
 8004a04:	2301      	movs	r3, #1
 8004a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a0a:	e7f0      	b.n	80049ee <_svfiprintf_r+0x192>
 8004a0c:	ab03      	add	r3, sp, #12
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	462a      	mov	r2, r5
 8004a12:	4638      	mov	r0, r7
 8004a14:	4b0e      	ldr	r3, [pc, #56]	@ (8004a50 <_svfiprintf_r+0x1f4>)
 8004a16:	a904      	add	r1, sp, #16
 8004a18:	f3af 8000 	nop.w
 8004a1c:	1c42      	adds	r2, r0, #1
 8004a1e:	4606      	mov	r6, r0
 8004a20:	d1d6      	bne.n	80049d0 <_svfiprintf_r+0x174>
 8004a22:	89ab      	ldrh	r3, [r5, #12]
 8004a24:	065b      	lsls	r3, r3, #25
 8004a26:	f53f af2d 	bmi.w	8004884 <_svfiprintf_r+0x28>
 8004a2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a2c:	e72c      	b.n	8004888 <_svfiprintf_r+0x2c>
 8004a2e:	ab03      	add	r3, sp, #12
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	462a      	mov	r2, r5
 8004a34:	4638      	mov	r0, r7
 8004a36:	4b06      	ldr	r3, [pc, #24]	@ (8004a50 <_svfiprintf_r+0x1f4>)
 8004a38:	a904      	add	r1, sp, #16
 8004a3a:	f000 f87d 	bl	8004b38 <_printf_i>
 8004a3e:	e7ed      	b.n	8004a1c <_svfiprintf_r+0x1c0>
 8004a40:	08004e9e 	.word	0x08004e9e
 8004a44:	08004ea4 	.word	0x08004ea4
 8004a48:	08004ea8 	.word	0x08004ea8
 8004a4c:	00000000 	.word	0x00000000
 8004a50:	080047a5 	.word	0x080047a5

08004a54 <_printf_common>:
 8004a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a58:	4616      	mov	r6, r2
 8004a5a:	4698      	mov	r8, r3
 8004a5c:	688a      	ldr	r2, [r1, #8]
 8004a5e:	690b      	ldr	r3, [r1, #16]
 8004a60:	4607      	mov	r7, r0
 8004a62:	4293      	cmp	r3, r2
 8004a64:	bfb8      	it	lt
 8004a66:	4613      	movlt	r3, r2
 8004a68:	6033      	str	r3, [r6, #0]
 8004a6a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a6e:	460c      	mov	r4, r1
 8004a70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a74:	b10a      	cbz	r2, 8004a7a <_printf_common+0x26>
 8004a76:	3301      	adds	r3, #1
 8004a78:	6033      	str	r3, [r6, #0]
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	0699      	lsls	r1, r3, #26
 8004a7e:	bf42      	ittt	mi
 8004a80:	6833      	ldrmi	r3, [r6, #0]
 8004a82:	3302      	addmi	r3, #2
 8004a84:	6033      	strmi	r3, [r6, #0]
 8004a86:	6825      	ldr	r5, [r4, #0]
 8004a88:	f015 0506 	ands.w	r5, r5, #6
 8004a8c:	d106      	bne.n	8004a9c <_printf_common+0x48>
 8004a8e:	f104 0a19 	add.w	sl, r4, #25
 8004a92:	68e3      	ldr	r3, [r4, #12]
 8004a94:	6832      	ldr	r2, [r6, #0]
 8004a96:	1a9b      	subs	r3, r3, r2
 8004a98:	42ab      	cmp	r3, r5
 8004a9a:	dc2b      	bgt.n	8004af4 <_printf_common+0xa0>
 8004a9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004aa0:	6822      	ldr	r2, [r4, #0]
 8004aa2:	3b00      	subs	r3, #0
 8004aa4:	bf18      	it	ne
 8004aa6:	2301      	movne	r3, #1
 8004aa8:	0692      	lsls	r2, r2, #26
 8004aaa:	d430      	bmi.n	8004b0e <_printf_common+0xba>
 8004aac:	4641      	mov	r1, r8
 8004aae:	4638      	mov	r0, r7
 8004ab0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ab4:	47c8      	blx	r9
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d023      	beq.n	8004b02 <_printf_common+0xae>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	6922      	ldr	r2, [r4, #16]
 8004abe:	f003 0306 	and.w	r3, r3, #6
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	bf14      	ite	ne
 8004ac6:	2500      	movne	r5, #0
 8004ac8:	6833      	ldreq	r3, [r6, #0]
 8004aca:	f04f 0600 	mov.w	r6, #0
 8004ace:	bf08      	it	eq
 8004ad0:	68e5      	ldreq	r5, [r4, #12]
 8004ad2:	f104 041a 	add.w	r4, r4, #26
 8004ad6:	bf08      	it	eq
 8004ad8:	1aed      	subeq	r5, r5, r3
 8004ada:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004ade:	bf08      	it	eq
 8004ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	bfc4      	itt	gt
 8004ae8:	1a9b      	subgt	r3, r3, r2
 8004aea:	18ed      	addgt	r5, r5, r3
 8004aec:	42b5      	cmp	r5, r6
 8004aee:	d11a      	bne.n	8004b26 <_printf_common+0xd2>
 8004af0:	2000      	movs	r0, #0
 8004af2:	e008      	b.n	8004b06 <_printf_common+0xb2>
 8004af4:	2301      	movs	r3, #1
 8004af6:	4652      	mov	r2, sl
 8004af8:	4641      	mov	r1, r8
 8004afa:	4638      	mov	r0, r7
 8004afc:	47c8      	blx	r9
 8004afe:	3001      	adds	r0, #1
 8004b00:	d103      	bne.n	8004b0a <_printf_common+0xb6>
 8004b02:	f04f 30ff 	mov.w	r0, #4294967295
 8004b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0a:	3501      	adds	r5, #1
 8004b0c:	e7c1      	b.n	8004a92 <_printf_common+0x3e>
 8004b0e:	2030      	movs	r0, #48	@ 0x30
 8004b10:	18e1      	adds	r1, r4, r3
 8004b12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b1c:	4422      	add	r2, r4
 8004b1e:	3302      	adds	r3, #2
 8004b20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b24:	e7c2      	b.n	8004aac <_printf_common+0x58>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4622      	mov	r2, r4
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	47c8      	blx	r9
 8004b30:	3001      	adds	r0, #1
 8004b32:	d0e6      	beq.n	8004b02 <_printf_common+0xae>
 8004b34:	3601      	adds	r6, #1
 8004b36:	e7d9      	b.n	8004aec <_printf_common+0x98>

08004b38 <_printf_i>:
 8004b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b3c:	7e0f      	ldrb	r7, [r1, #24]
 8004b3e:	4691      	mov	r9, r2
 8004b40:	2f78      	cmp	r7, #120	@ 0x78
 8004b42:	4680      	mov	r8, r0
 8004b44:	460c      	mov	r4, r1
 8004b46:	469a      	mov	sl, r3
 8004b48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b4e:	d807      	bhi.n	8004b60 <_printf_i+0x28>
 8004b50:	2f62      	cmp	r7, #98	@ 0x62
 8004b52:	d80a      	bhi.n	8004b6a <_printf_i+0x32>
 8004b54:	2f00      	cmp	r7, #0
 8004b56:	f000 80d3 	beq.w	8004d00 <_printf_i+0x1c8>
 8004b5a:	2f58      	cmp	r7, #88	@ 0x58
 8004b5c:	f000 80ba 	beq.w	8004cd4 <_printf_i+0x19c>
 8004b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b68:	e03a      	b.n	8004be0 <_printf_i+0xa8>
 8004b6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b6e:	2b15      	cmp	r3, #21
 8004b70:	d8f6      	bhi.n	8004b60 <_printf_i+0x28>
 8004b72:	a101      	add	r1, pc, #4	@ (adr r1, 8004b78 <_printf_i+0x40>)
 8004b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b78:	08004bd1 	.word	0x08004bd1
 8004b7c:	08004be5 	.word	0x08004be5
 8004b80:	08004b61 	.word	0x08004b61
 8004b84:	08004b61 	.word	0x08004b61
 8004b88:	08004b61 	.word	0x08004b61
 8004b8c:	08004b61 	.word	0x08004b61
 8004b90:	08004be5 	.word	0x08004be5
 8004b94:	08004b61 	.word	0x08004b61
 8004b98:	08004b61 	.word	0x08004b61
 8004b9c:	08004b61 	.word	0x08004b61
 8004ba0:	08004b61 	.word	0x08004b61
 8004ba4:	08004ce7 	.word	0x08004ce7
 8004ba8:	08004c0f 	.word	0x08004c0f
 8004bac:	08004ca1 	.word	0x08004ca1
 8004bb0:	08004b61 	.word	0x08004b61
 8004bb4:	08004b61 	.word	0x08004b61
 8004bb8:	08004d09 	.word	0x08004d09
 8004bbc:	08004b61 	.word	0x08004b61
 8004bc0:	08004c0f 	.word	0x08004c0f
 8004bc4:	08004b61 	.word	0x08004b61
 8004bc8:	08004b61 	.word	0x08004b61
 8004bcc:	08004ca9 	.word	0x08004ca9
 8004bd0:	6833      	ldr	r3, [r6, #0]
 8004bd2:	1d1a      	adds	r2, r3, #4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6032      	str	r2, [r6, #0]
 8004bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004be0:	2301      	movs	r3, #1
 8004be2:	e09e      	b.n	8004d22 <_printf_i+0x1ea>
 8004be4:	6833      	ldr	r3, [r6, #0]
 8004be6:	6820      	ldr	r0, [r4, #0]
 8004be8:	1d19      	adds	r1, r3, #4
 8004bea:	6031      	str	r1, [r6, #0]
 8004bec:	0606      	lsls	r6, r0, #24
 8004bee:	d501      	bpl.n	8004bf4 <_printf_i+0xbc>
 8004bf0:	681d      	ldr	r5, [r3, #0]
 8004bf2:	e003      	b.n	8004bfc <_printf_i+0xc4>
 8004bf4:	0645      	lsls	r5, r0, #25
 8004bf6:	d5fb      	bpl.n	8004bf0 <_printf_i+0xb8>
 8004bf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004bfc:	2d00      	cmp	r5, #0
 8004bfe:	da03      	bge.n	8004c08 <_printf_i+0xd0>
 8004c00:	232d      	movs	r3, #45	@ 0x2d
 8004c02:	426d      	negs	r5, r5
 8004c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c08:	230a      	movs	r3, #10
 8004c0a:	4859      	ldr	r0, [pc, #356]	@ (8004d70 <_printf_i+0x238>)
 8004c0c:	e011      	b.n	8004c32 <_printf_i+0xfa>
 8004c0e:	6821      	ldr	r1, [r4, #0]
 8004c10:	6833      	ldr	r3, [r6, #0]
 8004c12:	0608      	lsls	r0, r1, #24
 8004c14:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c18:	d402      	bmi.n	8004c20 <_printf_i+0xe8>
 8004c1a:	0649      	lsls	r1, r1, #25
 8004c1c:	bf48      	it	mi
 8004c1e:	b2ad      	uxthmi	r5, r5
 8004c20:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c22:	6033      	str	r3, [r6, #0]
 8004c24:	bf14      	ite	ne
 8004c26:	230a      	movne	r3, #10
 8004c28:	2308      	moveq	r3, #8
 8004c2a:	4851      	ldr	r0, [pc, #324]	@ (8004d70 <_printf_i+0x238>)
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c32:	6866      	ldr	r6, [r4, #4]
 8004c34:	2e00      	cmp	r6, #0
 8004c36:	bfa8      	it	ge
 8004c38:	6821      	ldrge	r1, [r4, #0]
 8004c3a:	60a6      	str	r6, [r4, #8]
 8004c3c:	bfa4      	itt	ge
 8004c3e:	f021 0104 	bicge.w	r1, r1, #4
 8004c42:	6021      	strge	r1, [r4, #0]
 8004c44:	b90d      	cbnz	r5, 8004c4a <_printf_i+0x112>
 8004c46:	2e00      	cmp	r6, #0
 8004c48:	d04b      	beq.n	8004ce2 <_printf_i+0x1aa>
 8004c4a:	4616      	mov	r6, r2
 8004c4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c50:	fb03 5711 	mls	r7, r3, r1, r5
 8004c54:	5dc7      	ldrb	r7, [r0, r7]
 8004c56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c5a:	462f      	mov	r7, r5
 8004c5c:	42bb      	cmp	r3, r7
 8004c5e:	460d      	mov	r5, r1
 8004c60:	d9f4      	bls.n	8004c4c <_printf_i+0x114>
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d10b      	bne.n	8004c7e <_printf_i+0x146>
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	07df      	lsls	r7, r3, #31
 8004c6a:	d508      	bpl.n	8004c7e <_printf_i+0x146>
 8004c6c:	6923      	ldr	r3, [r4, #16]
 8004c6e:	6861      	ldr	r1, [r4, #4]
 8004c70:	4299      	cmp	r1, r3
 8004c72:	bfde      	ittt	le
 8004c74:	2330      	movle	r3, #48	@ 0x30
 8004c76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c7e:	1b92      	subs	r2, r2, r6
 8004c80:	6122      	str	r2, [r4, #16]
 8004c82:	464b      	mov	r3, r9
 8004c84:	4621      	mov	r1, r4
 8004c86:	4640      	mov	r0, r8
 8004c88:	f8cd a000 	str.w	sl, [sp]
 8004c8c:	aa03      	add	r2, sp, #12
 8004c8e:	f7ff fee1 	bl	8004a54 <_printf_common>
 8004c92:	3001      	adds	r0, #1
 8004c94:	d14a      	bne.n	8004d2c <_printf_i+0x1f4>
 8004c96:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9a:	b004      	add	sp, #16
 8004c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	f043 0320 	orr.w	r3, r3, #32
 8004ca6:	6023      	str	r3, [r4, #0]
 8004ca8:	2778      	movs	r7, #120	@ 0x78
 8004caa:	4832      	ldr	r0, [pc, #200]	@ (8004d74 <_printf_i+0x23c>)
 8004cac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	6831      	ldr	r1, [r6, #0]
 8004cb4:	061f      	lsls	r7, r3, #24
 8004cb6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cba:	d402      	bmi.n	8004cc2 <_printf_i+0x18a>
 8004cbc:	065f      	lsls	r7, r3, #25
 8004cbe:	bf48      	it	mi
 8004cc0:	b2ad      	uxthmi	r5, r5
 8004cc2:	6031      	str	r1, [r6, #0]
 8004cc4:	07d9      	lsls	r1, r3, #31
 8004cc6:	bf44      	itt	mi
 8004cc8:	f043 0320 	orrmi.w	r3, r3, #32
 8004ccc:	6023      	strmi	r3, [r4, #0]
 8004cce:	b11d      	cbz	r5, 8004cd8 <_printf_i+0x1a0>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	e7ab      	b.n	8004c2c <_printf_i+0xf4>
 8004cd4:	4826      	ldr	r0, [pc, #152]	@ (8004d70 <_printf_i+0x238>)
 8004cd6:	e7e9      	b.n	8004cac <_printf_i+0x174>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	f023 0320 	bic.w	r3, r3, #32
 8004cde:	6023      	str	r3, [r4, #0]
 8004ce0:	e7f6      	b.n	8004cd0 <_printf_i+0x198>
 8004ce2:	4616      	mov	r6, r2
 8004ce4:	e7bd      	b.n	8004c62 <_printf_i+0x12a>
 8004ce6:	6833      	ldr	r3, [r6, #0]
 8004ce8:	6825      	ldr	r5, [r4, #0]
 8004cea:	1d18      	adds	r0, r3, #4
 8004cec:	6961      	ldr	r1, [r4, #20]
 8004cee:	6030      	str	r0, [r6, #0]
 8004cf0:	062e      	lsls	r6, r5, #24
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	d501      	bpl.n	8004cfa <_printf_i+0x1c2>
 8004cf6:	6019      	str	r1, [r3, #0]
 8004cf8:	e002      	b.n	8004d00 <_printf_i+0x1c8>
 8004cfa:	0668      	lsls	r0, r5, #25
 8004cfc:	d5fb      	bpl.n	8004cf6 <_printf_i+0x1be>
 8004cfe:	8019      	strh	r1, [r3, #0]
 8004d00:	2300      	movs	r3, #0
 8004d02:	4616      	mov	r6, r2
 8004d04:	6123      	str	r3, [r4, #16]
 8004d06:	e7bc      	b.n	8004c82 <_printf_i+0x14a>
 8004d08:	6833      	ldr	r3, [r6, #0]
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	1d1a      	adds	r2, r3, #4
 8004d0e:	6032      	str	r2, [r6, #0]
 8004d10:	681e      	ldr	r6, [r3, #0]
 8004d12:	6862      	ldr	r2, [r4, #4]
 8004d14:	4630      	mov	r0, r6
 8004d16:	f000 f859 	bl	8004dcc <memchr>
 8004d1a:	b108      	cbz	r0, 8004d20 <_printf_i+0x1e8>
 8004d1c:	1b80      	subs	r0, r0, r6
 8004d1e:	6060      	str	r0, [r4, #4]
 8004d20:	6863      	ldr	r3, [r4, #4]
 8004d22:	6123      	str	r3, [r4, #16]
 8004d24:	2300      	movs	r3, #0
 8004d26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d2a:	e7aa      	b.n	8004c82 <_printf_i+0x14a>
 8004d2c:	4632      	mov	r2, r6
 8004d2e:	4649      	mov	r1, r9
 8004d30:	4640      	mov	r0, r8
 8004d32:	6923      	ldr	r3, [r4, #16]
 8004d34:	47d0      	blx	sl
 8004d36:	3001      	adds	r0, #1
 8004d38:	d0ad      	beq.n	8004c96 <_printf_i+0x15e>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	079b      	lsls	r3, r3, #30
 8004d3e:	d413      	bmi.n	8004d68 <_printf_i+0x230>
 8004d40:	68e0      	ldr	r0, [r4, #12]
 8004d42:	9b03      	ldr	r3, [sp, #12]
 8004d44:	4298      	cmp	r0, r3
 8004d46:	bfb8      	it	lt
 8004d48:	4618      	movlt	r0, r3
 8004d4a:	e7a6      	b.n	8004c9a <_printf_i+0x162>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	4632      	mov	r2, r6
 8004d50:	4649      	mov	r1, r9
 8004d52:	4640      	mov	r0, r8
 8004d54:	47d0      	blx	sl
 8004d56:	3001      	adds	r0, #1
 8004d58:	d09d      	beq.n	8004c96 <_printf_i+0x15e>
 8004d5a:	3501      	adds	r5, #1
 8004d5c:	68e3      	ldr	r3, [r4, #12]
 8004d5e:	9903      	ldr	r1, [sp, #12]
 8004d60:	1a5b      	subs	r3, r3, r1
 8004d62:	42ab      	cmp	r3, r5
 8004d64:	dcf2      	bgt.n	8004d4c <_printf_i+0x214>
 8004d66:	e7eb      	b.n	8004d40 <_printf_i+0x208>
 8004d68:	2500      	movs	r5, #0
 8004d6a:	f104 0619 	add.w	r6, r4, #25
 8004d6e:	e7f5      	b.n	8004d5c <_printf_i+0x224>
 8004d70:	08004eaf 	.word	0x08004eaf
 8004d74:	08004ec0 	.word	0x08004ec0

08004d78 <memmove>:
 8004d78:	4288      	cmp	r0, r1
 8004d7a:	b510      	push	{r4, lr}
 8004d7c:	eb01 0402 	add.w	r4, r1, r2
 8004d80:	d902      	bls.n	8004d88 <memmove+0x10>
 8004d82:	4284      	cmp	r4, r0
 8004d84:	4623      	mov	r3, r4
 8004d86:	d807      	bhi.n	8004d98 <memmove+0x20>
 8004d88:	1e43      	subs	r3, r0, #1
 8004d8a:	42a1      	cmp	r1, r4
 8004d8c:	d008      	beq.n	8004da0 <memmove+0x28>
 8004d8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d96:	e7f8      	b.n	8004d8a <memmove+0x12>
 8004d98:	4601      	mov	r1, r0
 8004d9a:	4402      	add	r2, r0
 8004d9c:	428a      	cmp	r2, r1
 8004d9e:	d100      	bne.n	8004da2 <memmove+0x2a>
 8004da0:	bd10      	pop	{r4, pc}
 8004da2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004da6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004daa:	e7f7      	b.n	8004d9c <memmove+0x24>

08004dac <_sbrk_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	2300      	movs	r3, #0
 8004db0:	4d05      	ldr	r5, [pc, #20]	@ (8004dc8 <_sbrk_r+0x1c>)
 8004db2:	4604      	mov	r4, r0
 8004db4:	4608      	mov	r0, r1
 8004db6:	602b      	str	r3, [r5, #0]
 8004db8:	f7fb fcf0 	bl	800079c <_sbrk>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_sbrk_r+0x1a>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_sbrk_r+0x1a>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	200007b8 	.word	0x200007b8

08004dcc <memchr>:
 8004dcc:	4603      	mov	r3, r0
 8004dce:	b510      	push	{r4, lr}
 8004dd0:	b2c9      	uxtb	r1, r1
 8004dd2:	4402      	add	r2, r0
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	d101      	bne.n	8004dde <memchr+0x12>
 8004dda:	2000      	movs	r0, #0
 8004ddc:	e003      	b.n	8004de6 <memchr+0x1a>
 8004dde:	7804      	ldrb	r4, [r0, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	428c      	cmp	r4, r1
 8004de4:	d1f6      	bne.n	8004dd4 <memchr+0x8>
 8004de6:	bd10      	pop	{r4, pc}

08004de8 <_realloc_r>:
 8004de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dec:	4680      	mov	r8, r0
 8004dee:	4615      	mov	r5, r2
 8004df0:	460c      	mov	r4, r1
 8004df2:	b921      	cbnz	r1, 8004dfe <_realloc_r+0x16>
 8004df4:	4611      	mov	r1, r2
 8004df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfa:	f7ff bc47 	b.w	800468c <_malloc_r>
 8004dfe:	b92a      	cbnz	r2, 8004e0c <_realloc_r+0x24>
 8004e00:	f7ff fbda 	bl	80045b8 <_free_r>
 8004e04:	2400      	movs	r4, #0
 8004e06:	4620      	mov	r0, r4
 8004e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e0c:	f000 f81a 	bl	8004e44 <_malloc_usable_size_r>
 8004e10:	4285      	cmp	r5, r0
 8004e12:	4606      	mov	r6, r0
 8004e14:	d802      	bhi.n	8004e1c <_realloc_r+0x34>
 8004e16:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004e1a:	d8f4      	bhi.n	8004e06 <_realloc_r+0x1e>
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	4640      	mov	r0, r8
 8004e20:	f7ff fc34 	bl	800468c <_malloc_r>
 8004e24:	4607      	mov	r7, r0
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d0ec      	beq.n	8004e04 <_realloc_r+0x1c>
 8004e2a:	42b5      	cmp	r5, r6
 8004e2c:	462a      	mov	r2, r5
 8004e2e:	4621      	mov	r1, r4
 8004e30:	bf28      	it	cs
 8004e32:	4632      	movcs	r2, r6
 8004e34:	f7ff fbb2 	bl	800459c <memcpy>
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	f7ff fbbc 	bl	80045b8 <_free_r>
 8004e40:	463c      	mov	r4, r7
 8004e42:	e7e0      	b.n	8004e06 <_realloc_r+0x1e>

08004e44 <_malloc_usable_size_r>:
 8004e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e48:	1f18      	subs	r0, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bfbc      	itt	lt
 8004e4e:	580b      	ldrlt	r3, [r1, r0]
 8004e50:	18c0      	addlt	r0, r0, r3
 8004e52:	4770      	bx	lr

08004e54 <_init>:
 8004e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e56:	bf00      	nop
 8004e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5a:	bc08      	pop	{r3}
 8004e5c:	469e      	mov	lr, r3
 8004e5e:	4770      	bx	lr

08004e60 <_fini>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	bf00      	nop
 8004e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e66:	bc08      	pop	{r3}
 8004e68:	469e      	mov	lr, r3
 8004e6a:	4770      	bx	lr
