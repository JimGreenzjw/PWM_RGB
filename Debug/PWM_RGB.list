
PWM_RGB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b610  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800b720  0800b720  0000c720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd50  0800bd50  0000d1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd50  0800bd50  0000cd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd58  0800bd58  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd58  0800bd58  0000cd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd5c  0800bd5c  0000cd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bd60  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  200001e8  0800bf44  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  0800bf44  0000da40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e4d  00000000  00000000  0000d20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df4  00000000  00000000  0001f05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00021e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de5  00000000  00000000  00023000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185d0  00000000  00000000  00023de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168f9  00000000  00000000  0003c3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6d6  00000000  00000000  00052cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2384  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006188  00000000  00000000  000e23c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e8550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b708 	.word	0x0800b708

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800b708 	.word	0x0800b708

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	2200      	movs	r2, #0
 80011a0:	2300      	movs	r3, #0
 80011a2:	4604      	mov	r4, r0
 80011a4:	460d      	mov	r5, r1
 80011a6:	f7ff fc09 	bl	80009bc <__aeabi_dcmplt>
 80011aa:	b928      	cbnz	r0, 80011b8 <__aeabi_d2lz+0x1c>
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b4:	f000 b80a 	b.w	80011cc <__aeabi_d2ulz>
 80011b8:	4620      	mov	r0, r4
 80011ba:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011be:	f000 f805 	bl	80011cc <__aeabi_d2ulz>
 80011c2:	4240      	negs	r0, r0
 80011c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011c8:	bd38      	pop	{r3, r4, r5, pc}
 80011ca:	bf00      	nop

080011cc <__aeabi_d2ulz>:
 80011cc:	b5d0      	push	{r4, r6, r7, lr}
 80011ce:	2200      	movs	r2, #0
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <__aeabi_d2ulz+0x34>)
 80011d2:	4606      	mov	r6, r0
 80011d4:	460f      	mov	r7, r1
 80011d6:	f7ff f97f 	bl	80004d8 <__aeabi_dmul>
 80011da:	f7ff fc55 	bl	8000a88 <__aeabi_d2uiz>
 80011de:	4604      	mov	r4, r0
 80011e0:	f7ff f900 	bl	80003e4 <__aeabi_ui2d>
 80011e4:	2200      	movs	r2, #0
 80011e6:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <__aeabi_d2ulz+0x38>)
 80011e8:	f7ff f976 	bl	80004d8 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4630      	mov	r0, r6
 80011f2:	4639      	mov	r1, r7
 80011f4:	f7fe ffb8 	bl	8000168 <__aeabi_dsub>
 80011f8:	f7ff fc46 	bl	8000a88 <__aeabi_d2uiz>
 80011fc:	4621      	mov	r1, r4
 80011fe:	bdd0      	pop	{r4, r6, r7, pc}
 8001200:	3df00000 	.word	0x3df00000
 8001204:	41f00000 	.word	0x41f00000

08001208 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <MX_GPIO_Init+0x58>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	4a13      	ldr	r2, [pc, #76]	@ (8001260 <MX_GPIO_Init+0x58>)
 8001214:	f043 0320 	orr.w	r3, r3, #32
 8001218:	6193      	str	r3, [r2, #24]
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_GPIO_Init+0x58>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_GPIO_Init+0x58>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a0d      	ldr	r2, [pc, #52]	@ (8001260 <MX_GPIO_Init+0x58>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6193      	str	r3, [r2, #24]
 8001232:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <MX_GPIO_Init+0x58>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <MX_GPIO_Init+0x58>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <MX_GPIO_Init+0x58>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	6193      	str	r3, [r2, #24]
 800124a:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <MX_GPIO_Init+0x58>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000

08001264 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <MX_I2C1_Init+0x50>)
 800126a:	4a13      	ldr	r2, [pc, #76]	@ (80012b8 <MX_I2C1_Init+0x54>)
 800126c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <MX_I2C1_Init+0x50>)
 8001270:	4a12      	ldr	r2, [pc, #72]	@ (80012bc <MX_I2C1_Init+0x58>)
 8001272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <MX_I2C1_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <MX_I2C1_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <MX_I2C1_Init+0x50>)
 8001282:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <MX_I2C1_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MX_I2C1_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	@ (80012b4 <MX_I2C1_Init+0x50>)
 80012a2:	f001 fdb5 	bl	8002e10 <HAL_I2C_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ac:	f000 fb0e 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000204 	.word	0x20000204
 80012b8:	40005400 	.word	0x40005400
 80012bc:	00061a80 	.word	0x00061a80

080012c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	@ 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a1d      	ldr	r2, [pc, #116]	@ (8001350 <HAL_I2C_MspInit+0x90>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d132      	bne.n	8001346 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <HAL_I2C_MspInit+0x94>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001354 <HAL_I2C_MspInit+0x94>)
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <HAL_I2C_MspInit+0x94>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fe:	2312      	movs	r3, #18
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4812      	ldr	r0, [pc, #72]	@ (8001358 <HAL_I2C_MspInit+0x98>)
 800130e:	f001 fbfb 	bl	8002b08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_I2C_MspInit+0x9c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001322:	f043 0302 	orr.w	r3, r3, #2
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
 8001328:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <HAL_I2C_MspInit+0x9c>)
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_I2C_MspInit+0x94>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a08      	ldr	r2, [pc, #32]	@ (8001354 <HAL_I2C_MspInit+0x94>)
 8001334:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001338:	61d3      	str	r3, [r2, #28]
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_I2C_MspInit+0x94>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001346:	bf00      	nop
 8001348:	3728      	adds	r7, #40	@ 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40005400 	.word	0x40005400
 8001354:	40021000 	.word	0x40021000
 8001358:	40010c00 	.word	0x40010c00
 800135c:	40010000 	.word	0x40010000

08001360 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001360:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001364:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001366:	f001 f989 	bl	800267c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800136a:	f000 f8a7 	bl	80014bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800136e:	f7ff ff4b 	bl	8001208 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001372:	f000 fe9b 	bl	80020ac <MX_TIM2_Init>
	MX_TIM1_Init();
 8001376:	f000 fded 	bl	8001f54 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 800137a:	f001 f8b3 	bl	80024e4 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800137e:	f7ff ff71 	bl	8001264 <MX_I2C1_Init>
	MX_TIM3_Init();
 8001382:	f000 fee1 	bl	8002148 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001386:	f000 ff57 	bl	8002238 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	__HAL_TIM_SET_COUNTER(&htim3, 65536);
 800138a:	4b41      	ldr	r3, [pc, #260]	@ (8001490 <main+0x130>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001392:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001394:	213c      	movs	r1, #60	@ 0x3c
 8001396:	483e      	ldr	r0, [pc, #248]	@ (8001490 <main+0x130>)
 8001398:	f003 f87c 	bl	8004494 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 800139c:	483d      	ldr	r0, [pc, #244]	@ (8001494 <main+0x134>)
 800139e:	f002 fe33 	bl	8004008 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80013a2:	483d      	ldr	r0, [pc, #244]	@ (8001498 <main+0x138>)
 80013a4:	f002 fe30 	bl	8004008 <HAL_TIM_Base_Start_IT>

	HAL_Delay(20); // 单片机启动比OLED上电快,需要延迟等待一下
 80013a8:	2014      	movs	r0, #20
 80013aa:	f001 f9c9 	bl	8002740 <HAL_Delay>
	OLED_Init();   // 初始化OLED
 80013ae:	f000 fabb 	bl	8001928 <OLED_Init>
	// 开启串口中断接收
	HAL_UART_Receive_IT(&huart2, rx_data, 2);
 80013b2:	2202      	movs	r2, #2
 80013b4:	4939      	ldr	r1, [pc, #228]	@ (800149c <main+0x13c>)
 80013b6:	483a      	ldr	r0, [pc, #232]	@ (80014a0 <main+0x140>)
 80013b8:	f004 f93a 	bl	8005630 <HAL_UART_Receive_IT>
	servoCtrlInit();
 80013bc:	f000 fbfc 	bl	8001bb8 <servoCtrlInit>
	HAL_Delay(100);
 80013c0:	2064      	movs	r0, #100	@ 0x64
 80013c2:	f001 f9bd 	bl	8002740 <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80013c6:	210c      	movs	r1, #12
 80013c8:	4836      	ldr	r0, [pc, #216]	@ (80014a4 <main+0x144>)
 80013ca:	f002 fec7 	bl	800415c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 10);
 80013ce:	4b35      	ldr	r3, [pc, #212]	@ (80014a4 <main+0x144>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	220a      	movs	r2, #10
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(500);
 80013d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013da:	f001 f9b1 	bl	8002740 <HAL_Delay>
	htim2.Instance->CNT = 0;
 80013de:	4b2d      	ldr	r3, [pc, #180]	@ (8001494 <main+0x134>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	@ 0x24
	motor_pos = 0.0;
 80013e6:	4b30      	ldr	r3, [pc, #192]	@ (80014a8 <main+0x148>)
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
	while (1) {
		if (getControlPeriodFlag()) // 位置更新1000HZ
 80013ee:	f000 f8cf 	bl	8001590 <getControlPeriodFlag>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d042      	beq.n	800147e <main+0x11e>
		{
			time += 0.00785;
 80013f8:	4b2c      	ldr	r3, [pc, #176]	@ (80014ac <main+0x14c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f813 	bl	8000428 <__aeabi_f2d>
 8001402:	a321      	add	r3, pc, #132	@ (adr r3, 8001488 <main+0x128>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7fe feb0 	bl	800016c <__adddf3>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f7ff fb58 	bl	8000ac8 <__aeabi_d2f>
 8001418:	4603      	mov	r3, r0
 800141a:	4a24      	ldr	r2, [pc, #144]	@ (80014ac <main+0x14c>)
 800141c:	6013      	str	r3, [r2, #0]
//			test_pos = amplitude * sin(time); //正弦位置测试
//			servoSetGoalPos(test_pos);
			goal_pos_loop = fabs(amplitude * sin(time)) + 15;
 800141e:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <main+0x150>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f800 	bl	8000428 <__aeabi_f2d>
 8001428:	4680      	mov	r8, r0
 800142a:	4689      	mov	r9, r1
 800142c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <main+0x14c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe fff9 	bl	8000428 <__aeabi_f2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f009 f98b 	bl	800a758 <sin>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4640      	mov	r0, r8
 8001448:	4649      	mov	r1, r9
 800144a:	f7ff f845 	bl	80004d8 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4614      	mov	r4, r2
 8001454:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <main+0x154>)
 800145e:	4620      	mov	r0, r4
 8001460:	4629      	mov	r1, r5
 8001462:	f7fe fe83 	bl	800016c <__adddf3>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fb2b 	bl	8000ac8 <__aeabi_d2f>
 8001472:	4603      	mov	r3, r0
 8001474:	4a10      	ldr	r2, [pc, #64]	@ (80014b8 <main+0x158>)
 8001476:	6013      	str	r3, [r2, #0]
			setControlPeriodFlag(0);
 8001478:	2000      	movs	r0, #0
 800147a:	f000 f893 	bl	80015a4 <setControlPeriodFlag>
		}

		servoCtrlLoop(); // 伺服控制
 800147e:	f000 fbcb 	bl	8001c18 <servoCtrlLoop>
	while (1) {
 8001482:	e7b4      	b.n	80013ee <main+0x8e>
 8001484:	f3af 8000 	nop.w
 8001488:	2a305532 	.word	0x2a305532
 800148c:	3f8013a9 	.word	0x3f8013a9
 8001490:	20000818 	.word	0x20000818
 8001494:	200007d0 	.word	0x200007d0
 8001498:	20000860 	.word	0x20000860
 800149c:	20000258 	.word	0x20000258
 80014a0:	200008a8 	.word	0x200008a8
 80014a4:	20000788 	.word	0x20000788
 80014a8:	20000274 	.word	0x20000274
 80014ac:	2000025c 	.word	0x2000025c
 80014b0:	20000000 	.word	0x20000000
 80014b4:	402e0000 	.word	0x402e0000
 80014b8:	20000268 	.word	0x20000268

080014bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b090      	sub	sp, #64	@ 0x40
 80014c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014c2:	f107 0318 	add.w	r3, r7, #24
 80014c6:	2228      	movs	r2, #40	@ 0x28
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f005 fd79 	bl	8006fc2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014de:	2301      	movs	r3, #1
 80014e0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014e6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ec:	2301      	movs	r3, #1
 80014ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f0:	2302      	movs	r3, #2
 80014f2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014fa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	4618      	mov	r0, r3
 8001506:	f002 f91f 	bl	8003748 <HAL_RCC_OscConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0x58>
		Error_Handler();
 8001510:	f000 f9dc 	bl	80018cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001514:	230f      	movs	r3, #15
 8001516:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001518:	2302      	movs	r3, #2
 800151a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001520:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001524:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2102      	movs	r1, #2
 800152e:	4618      	mov	r0, r3
 8001530:	f002 fb8c 	bl	8003c4c <HAL_RCC_ClockConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x82>
		Error_Handler();
 800153a:	f000 f9c7 	bl	80018cc <Error_Handler>
	}
}
 800153e:	bf00      	nop
 8001540:	3740      	adds	r7, #64	@ 0x40
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// 串口接收完成（收到2个字节）中断回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <HAL_UART_RxCpltCallback+0x38>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d10e      	bne.n	8001578 <HAL_UART_RxCpltCallback+0x30>
		// 直接使用接收到的1字节数据
		uint8_t received_value = rx_data[0];
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_UART_RxCpltCallback+0x3c>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	73fb      	strb	r3, [r7, #15]

		// 设置goal_pos_loop
		goal_pos_loop = (float) received_value;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fbb6 	bl	8000cd4 <__aeabi_ui2f>
 8001568:	4603      	mov	r3, r0
 800156a:	4a07      	ldr	r2, [pc, #28]	@ (8001588 <HAL_UART_RxCpltCallback+0x40>)
 800156c:	6013      	str	r3, [r2, #0]
//        char send_buf[50];
//        sprintf(send_buf, "Goal set to: %.1f (0x%02X)\r\n", goal_pos_loop, received_value);
//        HAL_UART_Transmit(&huart2, (uint8_t*)send_buf, strlen(send_buf), 100);

		// 重新启动接收中断
		HAL_UART_Receive_IT(&huart2, rx_data, 1);
 800156e:	2201      	movs	r2, #1
 8001570:	4904      	ldr	r1, [pc, #16]	@ (8001584 <HAL_UART_RxCpltCallback+0x3c>)
 8001572:	4806      	ldr	r0, [pc, #24]	@ (800158c <HAL_UART_RxCpltCallback+0x44>)
 8001574:	f004 f85c 	bl	8005630 <HAL_UART_Receive_IT>
	}
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40004400 	.word	0x40004400
 8001584:	20000258 	.word	0x20000258
 8001588:	20000268 	.word	0x20000268
 800158c:	200008a8 	.word	0x200008a8

08001590 <getControlPeriodFlag>:

uint8_t getControlPeriodFlag(void) {
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	return controlPeriodFlag;
 8001594:	4b02      	ldr	r3, [pc, #8]	@ (80015a0 <getControlPeriodFlag+0x10>)
 8001596:	781b      	ldrb	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	20000264 	.word	0x20000264

080015a4 <setControlPeriodFlag>:

void setControlPeriodFlag(uint8_t val) {
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	controlPeriodFlag = val;
 80015ae:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <setControlPeriodFlag+0x1c>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	7013      	strb	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000264 	.word	0x20000264

080015c4 <KalmanFilterSpeed>:

static double KalmanFilterSpeed(const double ResrcData, double ProcessNiose_Q,
		double MeasureNoise_R) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b092      	sub	sp, #72	@ 0x48
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80015ce:	e9c7 2300 	strd	r2, r3, [r7]
	double R = MeasureNoise_R;
 80015d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80015d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double Q = ProcessNiose_Q;
 80015da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015de:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	static double x_last;
	double x_mid = x_last;
 80015e2:	4b2f      	ldr	r3, [pc, #188]	@ (80016a0 <KalmanFilterSpeed+0xdc>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double p_mid;
	double p_now;

	double kg;

	x_mid = x_last;
 80015ec:	4b2c      	ldr	r3, [pc, #176]	@ (80016a0 <KalmanFilterSpeed+0xdc>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	p_mid = p_last + Q;
 80015f6:	4b2b      	ldr	r3, [pc, #172]	@ (80016a4 <KalmanFilterSpeed+0xe0>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001600:	f7fe fdb4 	bl	800016c <__adddf3>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	kg = p_mid / (p_mid + R);
 800160c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001610:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001614:	f7fe fdaa 	bl	800016c <__adddf3>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001620:	f7ff f884 	bl	800072c <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	e9c7 2308 	strd	r2, r3, [r7, #32]
	x_now = x_mid + kg * (ResrcData - x_mid);
 800162c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001630:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001634:	f7fe fd98 	bl	8000168 <__aeabi_dsub>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001644:	f7fe ff48 	bl	80004d8 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001650:	f7fe fd8c 	bl	800016c <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	e9c7 2306 	strd	r2, r3, [r7, #24]
	p_now = (1 - kg) * p_mid;
 800165c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001660:	f04f 0000 	mov.w	r0, #0
 8001664:	4910      	ldr	r1, [pc, #64]	@ (80016a8 <KalmanFilterSpeed+0xe4>)
 8001666:	f7fe fd7f 	bl	8000168 <__aeabi_dsub>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001672:	f7fe ff31 	bl	80004d8 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	p_last = p_now;
 800167e:	4909      	ldr	r1, [pc, #36]	@ (80016a4 <KalmanFilterSpeed+0xe0>)
 8001680:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001684:	e9c1 2300 	strd	r2, r3, [r1]
	x_last = x_now;
 8001688:	4905      	ldr	r1, [pc, #20]	@ (80016a0 <KalmanFilterSpeed+0xdc>)
 800168a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800168e:	e9c1 2300 	strd	r2, r3, [r1]

	return x_now;
 8001692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	3748      	adds	r7, #72	@ 0x48
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000290 	.word	0x20000290
 80016a4:	20000298 	.word	0x20000298
 80016a8:	3ff00000 	.word	0x3ff00000
 80016ac:	00000000 	.word	0x00000000

080016b0 <calculatePosition>:

float calculatePosition(uint32_t current_count) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	int32_t diff = (int32_t) current_count - last_count;
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <calculatePosition+0x88>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	60fb      	str	r3, [r7, #12]

	// 检测方向和计算增量
	if (diff > TIMER_OVERFLOW / 2) {
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016c8:	dd04      	ble.n	80016d4 <calculatePosition+0x24>
		diff -= TIMER_OVERFLOW;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e007      	b.n	80016e4 <calculatePosition+0x34>
	} else if (diff < -TIMER_OVERFLOW / 2) {
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80016da:	da03      	bge.n	80016e4 <calculatePosition+0x34>
		diff += TIMER_OVERFLOW;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80016e2:	60fb      	str	r3, [r7, #12]
	}

	total_count += diff;
 80016e4:	4b15      	ldr	r3, [pc, #84]	@ (800173c <calculatePosition+0x8c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a13      	ldr	r2, [pc, #76]	@ (800173c <calculatePosition+0x8c>)
 80016ee:	6013      	str	r3, [r2, #0]
	last_count = current_count;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a11      	ldr	r2, [pc, #68]	@ (8001738 <calculatePosition+0x88>)
 80016f4:	6013      	str	r3, [r2, #0]

	// 转换为实际位置（mm）
	float position = (float) total_count * GRATING_RESOLUTION;
 80016f6:	4b11      	ldr	r3, [pc, #68]	@ (800173c <calculatePosition+0x8c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff faee 	bl	8000cdc <__aeabi_i2f>
 8001700:	4603      	mov	r3, r0
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fe90 	bl	8000428 <__aeabi_f2d>
 8001708:	a309      	add	r3, pc, #36	@ (adr r3, 8001730 <calculatePosition+0x80>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7fe fee3 	bl	80004d8 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff f9d5 	bl	8000ac8 <__aeabi_d2f>
 800171e:	4603      	mov	r3, r0
 8001720:	60bb      	str	r3, [r7, #8]

	return position;
 8001722:	68bb      	ldr	r3, [r7, #8]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	f3af 8000 	nop.w
 8001730:	d2f1a9fc 	.word	0xd2f1a9fc
 8001734:	3f50624d 	.word	0x3f50624d
 8001738:	2000027c 	.word	0x2000027c
 800173c:	20000280 	.word	0x20000280

08001740 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) // 假设S相信号连接到TIM2的通道3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0e      	ldr	r2, [pc, #56]	@ (8001788 <HAL_TIM_IC_CaptureCallback+0x48>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d116      	bne.n	8001780 <HAL_TIM_IC_CaptureCallback+0x40>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7f1b      	ldrb	r3, [r3, #28]
 8001756:	2b08      	cmp	r3, #8
 8001758:	d112      	bne.n	8001780 <HAL_TIM_IC_CaptureCallback+0x40>
			{
		// S相信号检测到
		reference_detected = 1;
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <HAL_TIM_IC_CaptureCallback+0x4c>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
		reference_position = calculatePosition(__HAL_TIM_GET_COUNTER(&htim2));
 8001760:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ffa2 	bl	80016b0 <calculatePosition>
 800176c:	4603      	mov	r3, r0
 800176e:	4a09      	ldr	r2, [pc, #36]	@ (8001794 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001770:	6013      	str	r3, [r2, #0]
		// 可以选择在这里重置计数或者记录参考点位置
		total_count = 0;
 8001772:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001778:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <HAL_TIM_IC_CaptureCallback+0x50>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2200      	movs	r2, #0
 800177e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40000400 	.word	0x40000400
 800178c:	20000284 	.word	0x20000284
 8001790:	200007d0 	.word	0x200007d0
 8001794:	20000288 	.word	0x20000288
 8001798:	20000280 	.word	0x20000280
 800179c:	00000000 	.word	0x00000000

080017a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) // Assuming you're using TIM3 for the interrupt
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b0:	d11e      	bne.n	80017f0 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TC) == SET) {
 80017b2:	4b3b      	ldr	r3, [pc, #236]	@ (80018a0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017bc:	2b40      	cmp	r3, #64	@ 0x40
 80017be:	d167      	bne.n	8001890 <HAL_TIM_PeriodElapsedCallback+0xf0>
			int16_t pos = (int16_t) motor_pos;  // 将浮点数转换为16位整数
 80017c0:	4b38      	ldr	r3, [pc, #224]	@ (80018a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fca3 	bl	8001110 <__aeabi_f2iz>
 80017ca:	4603      	mov	r3, r0
 80017cc:	817b      	strh	r3, [r7, #10]
			uint8_t send_buf[2];  // 用于存储16位整数的两个字节

			// 将16位整数拆分为两个字节
			send_buf[0] = (pos >> 8) & 0xFF;  // 高字节
 80017ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017d2:	121b      	asrs	r3, r3, #8
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	723b      	strb	r3, [r7, #8]
			send_buf[1] = pos & 0xFF;         // 低字节
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	727b      	strb	r3, [r7, #9]

			// 直接发送两个字节
			HAL_UART_Transmit_IT(&huart2, send_buf, 2);
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	2202      	movs	r2, #2
 80017e6:	4619      	mov	r1, r3
 80017e8:	482d      	ldr	r0, [pc, #180]	@ (80018a0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80017ea:	f003 feec 	bl	80055c6 <HAL_UART_Transmit_IT>
		last_pos = motor_pos;
		g_sys_time++;
		if (g_sys_time % 10 == 0) // 1ms
			setControlPeriodFlag(1);
	}
}
 80017ee:	e04f      	b.n	8001890 <HAL_TIM_PeriodElapsedCallback+0xf0>
	} else if (htim->Instance == TIM4) {
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a2c      	ldr	r2, [pc, #176]	@ (80018a8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d14a      	bne.n	8001890 <HAL_TIM_PeriodElapsedCallback+0xf0>
		raw_count = __HAL_TIM_GET_COUNTER(&htim3);
 80017fa:	4b2c      	ldr	r3, [pc, #176]	@ (80018ac <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	4a2b      	ldr	r2, [pc, #172]	@ (80018b0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001802:	6013      	str	r3, [r2, #0]
		motor_pos = calculatePosition(raw_count);
 8001804:	4b2a      	ldr	r3, [pc, #168]	@ (80018b0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff51 	bl	80016b0 <calculatePosition>
 800180e:	4603      	mov	r3, r0
 8001810:	4a24      	ldr	r2, [pc, #144]	@ (80018a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001812:	6013      	str	r3, [r2, #0]
		float delta_pos = motor_pos - last_pos;
 8001814:	4b23      	ldr	r3, [pc, #140]	@ (80018a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a26      	ldr	r2, [pc, #152]	@ (80018b4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f9a6 	bl	8000b70 <__aeabi_fsub>
 8001824:	4603      	mov	r3, r0
 8001826:	60fb      	str	r3, [r7, #12]
		motor_vel = KalmanFilterSpeed(delta_pos / 0.001f, 0.001f, 1.0f);
 8001828:	4923      	ldr	r1, [pc, #140]	@ (80018b8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f7ff fb5e 	bl	8000eec <__aeabi_fdiv>
 8001830:	4603      	mov	r3, r0
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fdf8 	bl	8000428 <__aeabi_f2d>
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800183e:	e9cd 2300 	strd	r2, r3, [sp]
 8001842:	a315      	add	r3, pc, #84	@ (adr r3, 8001898 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	f7ff febc 	bl	80015c4 <KalmanFilterSpeed>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff f938 	bl	8000ac8 <__aeabi_d2f>
 8001858:	4603      	mov	r3, r0
 800185a:	4a19      	ldr	r2, [pc, #100]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800185c:	6013      	str	r3, [r2, #0]
		last_pos = motor_pos;
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a14      	ldr	r2, [pc, #80]	@ (80018b4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001864:	6013      	str	r3, [r2, #0]
		g_sys_time++;
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	4a15      	ldr	r2, [pc, #84]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800186e:	6013      	str	r3, [r2, #0]
		if (g_sys_time % 10 == 0) // 1ms
 8001870:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001872:	6819      	ldr	r1, [r3, #0]
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001876:	fba3 2301 	umull	r2, r3, r3, r1
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	1aca      	subs	r2, r1, r3
 8001886:	2a00      	cmp	r2, #0
 8001888:	d102      	bne.n	8001890 <HAL_TIM_PeriodElapsedCallback+0xf0>
			setControlPeriodFlag(1);
 800188a:	2001      	movs	r0, #1
 800188c:	f7ff fe8a 	bl	80015a4 <setControlPeriodFlag>
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	e0000000 	.word	0xe0000000
 800189c:	3f50624d 	.word	0x3f50624d
 80018a0:	200008a8 	.word	0x200008a8
 80018a4:	20000274 	.word	0x20000274
 80018a8:	40000800 	.word	0x40000800
 80018ac:	20000818 	.word	0x20000818
 80018b0:	20000270 	.word	0x20000270
 80018b4:	200002a0 	.word	0x200002a0
 80018b8:	3a83126f 	.word	0x3a83126f
 80018bc:	3ff00000 	.word	0x3ff00000
 80018c0:	20000278 	.word	0x20000278
 80018c4:	20000260 	.word	0x20000260
 80018c8:	cccccccd 	.word	0xcccccccd

080018cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <Error_Handler+0x8>

080018d8 <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af02      	add	r7, sp, #8
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	9200      	str	r2, [sp, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	217a      	movs	r1, #122	@ 0x7a
 80018f2:	4803      	ldr	r0, [pc, #12]	@ (8001900 <OLED_Send+0x28>)
 80018f4:	f001 fbd0 	bl	8003098 <HAL_I2C_Master_Transmit>
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000204 	.word	0x20000204

08001904 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 800190e:	4a05      	ldr	r2, [pc, #20]	@ (8001924 <OLED_SendCmd+0x20>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8001914:	2102      	movs	r1, #2
 8001916:	4803      	ldr	r0, [pc, #12]	@ (8001924 <OLED_SendCmd+0x20>)
 8001918:	f7ff ffde 	bl	80018d8 <OLED_Send>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200006a4 	.word	0x200006a4

08001928 <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 800192c:	20ae      	movs	r0, #174	@ 0xae
 800192e:	f7ff ffe9 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 8001932:	2002      	movs	r0, #2
 8001934:	f7ff ffe6 	bl	8001904 <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 8001938:	2010      	movs	r0, #16
 800193a:	f7ff ffe3 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 800193e:	2040      	movs	r0, #64	@ 0x40
 8001940:	f7ff ffe0 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 8001944:	20b0      	movs	r0, #176	@ 0xb0
 8001946:	f7ff ffdd 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 800194a:	2081      	movs	r0, #129	@ 0x81
 800194c:	f7ff ffda 	bl	8001904 <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 8001950:	20cf      	movs	r0, #207	@ 0xcf
 8001952:	f7ff ffd7 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 8001956:	20a1      	movs	r0, #161	@ 0xa1
 8001958:	f7ff ffd4 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 800195c:	20a6      	movs	r0, #166	@ 0xa6
 800195e:	f7ff ffd1 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 8001962:	20a8      	movs	r0, #168	@ 0xa8
 8001964:	f7ff ffce 	bl	8001904 <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 8001968:	203f      	movs	r0, #63	@ 0x3f
 800196a:	f7ff ffcb 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 800196e:	20ad      	movs	r0, #173	@ 0xad
 8001970:	f7ff ffc8 	bl	8001904 <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 8001974:	208b      	movs	r0, #139	@ 0x8b
 8001976:	f7ff ffc5 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 800197a:	2033      	movs	r0, #51	@ 0x33
 800197c:	f7ff ffc2 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 8001980:	20c8      	movs	r0, #200	@ 0xc8
 8001982:	f7ff ffbf 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 8001986:	20d3      	movs	r0, #211	@ 0xd3
 8001988:	f7ff ffbc 	bl	8001904 <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff ffb9 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 8001992:	20d5      	movs	r0, #213	@ 0xd5
 8001994:	f7ff ffb6 	bl	8001904 <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 8001998:	20c0      	movs	r0, #192	@ 0xc0
 800199a:	f7ff ffb3 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 800199e:	20d9      	movs	r0, #217	@ 0xd9
 80019a0:	f7ff ffb0 	bl	8001904 <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 80019a4:	201f      	movs	r0, #31
 80019a6:	f7ff ffad 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 80019aa:	20da      	movs	r0, #218	@ 0xda
 80019ac:	f7ff ffaa 	bl	8001904 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 80019b0:	2012      	movs	r0, #18
 80019b2:	f7ff ffa7 	bl	8001904 <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 80019b6:	20db      	movs	r0, #219	@ 0xdb
 80019b8:	f7ff ffa4 	bl	8001904 <OLED_SendCmd>
  OLED_SendCmd(0x40);
 80019bc:	2040      	movs	r0, #64	@ 0x40
 80019be:	f7ff ffa1 	bl	8001904 <OLED_SendCmd>

  OLED_NewFrame();
 80019c2:	f000 f807 	bl	80019d4 <OLED_NewFrame>
  OLED_ShowFrame();
 80019c6:	f000 f811 	bl	80019ec <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 80019ca:	20af      	movs	r0, #175	@ 0xaf
 80019cc:	f7ff ff9a 	bl	8001904 <OLED_SendCmd>
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 80019d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019dc:	2100      	movs	r1, #0
 80019de:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <OLED_NewFrame+0x14>)
 80019e0:	f005 faef 	bl	8006fc2 <memset>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200002a4 	.word	0x200002a4

080019ec <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 80019f2:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <OLED_ShowFrame+0x5c>)
 80019f4:	2240      	movs	r2, #64	@ 0x40
 80019f6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	e01b      	b.n	8001a36 <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	3b50      	subs	r3, #80	@ 0x50
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff7d 	bl	8001904 <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	f7ff ff7a 	bl	8001904 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8001a10:	2010      	movs	r0, #16
 8001a12:	f7ff ff77 	bl	8001904 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8001a16:	480d      	ldr	r0, [pc, #52]	@ (8001a4c <OLED_ShowFrame+0x60>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	01db      	lsls	r3, r3, #7
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a50 <OLED_ShowFrame+0x64>)
 8001a1e:	4413      	add	r3, r2
 8001a20:	2280      	movs	r2, #128	@ 0x80
 8001a22:	4619      	mov	r1, r3
 8001a24:	f005 fb5b 	bl	80070de <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001a28:	2181      	movs	r1, #129	@ 0x81
 8001a2a:	4807      	ldr	r0, [pc, #28]	@ (8001a48 <OLED_ShowFrame+0x5c>)
 8001a2c:	f7ff ff54 	bl	80018d8 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	3301      	adds	r3, #1
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	2b07      	cmp	r3, #7
 8001a3a:	d9e0      	bls.n	80019fe <OLED_ShowFrame+0x12>
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200006a8 	.word	0x200006a8
 8001a4c:	200006a9 	.word	0x200006a9
 8001a50:	200002a4 	.word	0x200002a4

08001a54 <PID_Control>:
  * @brief  pid控制核心函数
  * @param  target 控制对象
  * @return pid控制输出量
  */
float PID_Control(TargetPID *target)
{
 8001a54:	b5b0      	push	{r4, r5, r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	float bias = 0;
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]

	target->input_val = target->getFeedbackVal(); //采集输入
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4798      	blx	r3
 8001a68:	4602      	mov	r2, r0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	605a      	str	r2, [r3, #4]

	bias = target->goal_val - target->input_val;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4619      	mov	r1, r3
 8001a78:	4610      	mov	r0, r2
 8001a7a:	f7ff f879 	bl	8000b70 <__aeabi_fsub>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60fb      	str	r3, [r7, #12]
	target->integral_i += bias;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	68f9      	ldr	r1, [r7, #12]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff f873 	bl	8000b74 <__addsf3>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	611a      	str	r2, [r3, #16]
	target->out_val = target->Kp * bias + target->Ki * target->integral_i + target->Kd * (bias - target->last_out_val);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	68f9      	ldr	r1, [r7, #12]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff f971 	bl	8000d84 <__aeabi_fmul>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461c      	mov	r4, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699a      	ldr	r2, [r3, #24]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	f7ff f967 	bl	8000d84 <__aeabi_fmul>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff f85a 	bl	8000b74 <__addsf3>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461d      	mov	r5, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69dc      	ldr	r4, [r3, #28]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4619      	mov	r1, r3
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff f84e 	bl	8000b70 <__aeabi_fsub>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f7ff f953 	bl	8000d84 <__aeabi_fmul>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4628      	mov	r0, r5
 8001ae4:	f7ff f846 	bl	8000b74 <__addsf3>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
	target->last_out_val = bias;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	60da      	str	r2, [r3, #12]

	if (target->integral_i > MAX_INTEGRAL_VAL)  //积分限幅
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	491a      	ldr	r1, [pc, #104]	@ (8001b64 <PID_Control+0x110>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fafd 	bl	80010fc <__aeabi_fcmpgt>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <PID_Control+0xba>
	{
		target->integral_i = MAX_INTEGRAL_VAL;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a16      	ldr	r2, [pc, #88]	@ (8001b64 <PID_Control+0x110>)
 8001b0c:	611a      	str	r2, [r3, #16]
	}
	if (target->integral_i < -MAX_INTEGRAL_VAL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	4915      	ldr	r1, [pc, #84]	@ (8001b68 <PID_Control+0x114>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fad3 	bl	80010c0 <__aeabi_fcmplt>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <PID_Control+0xd2>
	{
		target->integral_i = -MAX_INTEGRAL_VAL;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a11      	ldr	r2, [pc, #68]	@ (8001b68 <PID_Control+0x114>)
 8001b24:	611a      	str	r2, [r3, #16]
	}

	if (target->out_val > MAX_OUT_VAL)    //输出限幅
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4910      	ldr	r1, [pc, #64]	@ (8001b6c <PID_Control+0x118>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fae5 	bl	80010fc <__aeabi_fcmpgt>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <PID_Control+0xea>
	{
		target->out_val = MAX_OUT_VAL;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b6c <PID_Control+0x118>)
 8001b3c:	609a      	str	r2, [r3, #8]
	}
	if (target->out_val < -MAX_OUT_VAL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	490b      	ldr	r1, [pc, #44]	@ (8001b70 <PID_Control+0x11c>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fabb 	bl	80010c0 <__aeabi_fcmplt>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <PID_Control+0x102>
	{
		target->out_val = -MAX_OUT_VAL;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a07      	ldr	r2, [pc, #28]	@ (8001b70 <PID_Control+0x11c>)
 8001b54:	609a      	str	r2, [r3, #8]
	}

	return target->out_val;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bdb0      	pop	{r4, r5, r7, pc}
 8001b62:	bf00      	nop
 8001b64:	459c4000 	.word	0x459c4000
 8001b68:	c59c4000 	.word	0xc59c4000
 8001b6c:	44fa0000 	.word	0x44fa0000
 8001b70:	c4fa0000 	.word	0xc4fa0000

08001b74 <PID_SetGoalVal>:
  * @brief  设置目标值
  * @param   target 控制对象
  * @return
  */
void PID_SetGoalVal(TargetPID *target, float goal_val)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	target->goal_val = goal_val;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	601a      	str	r2, [r3, #0]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <PID_SetPidPara>:
  * @brief  设置控制参数
  * @param   target 控制对象
  * @return
  */
void PID_SetPidPara(TargetPID *target, float kp, float ki, float kd)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b085      	sub	sp, #20
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	603b      	str	r3, [r7, #0]
	target->Kp = kp;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	615a      	str	r2, [r3, #20]
	target->Ki = ki;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	619a      	str	r2, [r3, #24]
	target->Kd = kd;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	61da      	str	r2, [r3, #28]
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <servoCtrlInit>:
  * @brief
  * @param
  * @return
  */
void servoCtrlInit()
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
    pid_pos_loop.getFeedbackVal = getMotorPos;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <servoCtrlInit+0x38>)
 8001bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf4 <servoCtrlInit+0x3c>)
 8001bc0:	621a      	str	r2, [r3, #32]
    pid_vel_loop.getFeedbackVal = getMotorVel;
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf8 <servoCtrlInit+0x40>)
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <servoCtrlInit+0x44>)
 8001bc6:	621a      	str	r2, [r3, #32]

    PID_SetPidPara(&pid_pos_loop, Kp_pos_loop, Ki_pos_loop, Kd_pos_loop);
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <servoCtrlInit+0x48>)
 8001bca:	6819      	ldr	r1, [r3, #0]
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <servoCtrlInit+0x4c>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <servoCtrlInit+0x50>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4806      	ldr	r0, [pc, #24]	@ (8001bf0 <servoCtrlInit+0x38>)
 8001bd6:	f7ff ffda 	bl	8001b8e <PID_SetPidPara>
    PID_SetPidPara(&pid_vel_loop, Kp_vel_loop, Ki_vel_loop, Kd_vel_loop);
 8001bda:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <servoCtrlInit+0x54>)
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <servoCtrlInit+0x58>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <servoCtrlInit+0x5c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4804      	ldr	r0, [pc, #16]	@ (8001bf8 <servoCtrlInit+0x40>)
 8001be8:	f7ff ffd1 	bl	8001b8e <PID_SetPidPara>
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	2000072c 	.word	0x2000072c
 8001bf4:	080025dd 	.word	0x080025dd
 8001bf8:	20000750 	.word	0x20000750
 8001bfc:	080025f1 	.word	0x080025f1
 8001c00:	20000004 	.word	0x20000004
 8001c04:	20000774 	.word	0x20000774
 8001c08:	20000778 	.word	0x20000778
 8001c0c:	20000008 	.word	0x20000008
 8001c10:	2000077c 	.word	0x2000077c
 8001c14:	20000780 	.word	0x20000780

08001c18 <servoCtrlLoop>:
  * @brief
  * @param
  * @return
  */
void servoCtrlLoop()
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
//    PID_SetGoalVal(&pid_pos_loop, goal_pos_loop);   //设置位置环目标值
//    goal_vel_loop = PID_Control(&pid_pos_loop);      //速度环目标 = 位置环输出
//    PID_SetGoalVal(&pid_vel_loop, goal_vel_loop);   //设置速度环目标值
//    goal_cur_loop = PID_Control(&pid_vel_loop);      //电流环目标 = 速度环输出

    PID_SetPidPara(&pid_pos_loop, Kp_pos_loop, Ki_pos_loop, Kd_pos_loop);
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <servoCtrlLoop+0x84>)
 8001c1e:	6819      	ldr	r1, [r3, #0]
 8001c20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca0 <servoCtrlLoop+0x88>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca4 <servoCtrlLoop+0x8c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	481f      	ldr	r0, [pc, #124]	@ (8001ca8 <servoCtrlLoop+0x90>)
 8001c2a:	f7ff ffb0 	bl	8001b8e <PID_SetPidPara>
    PID_SetGoalVal(&pid_pos_loop, goal_pos_loop);   //设置位置环目标值
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <servoCtrlLoop+0x94>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4619      	mov	r1, r3
 8001c34:	481c      	ldr	r0, [pc, #112]	@ (8001ca8 <servoCtrlLoop+0x90>)
 8001c36:	f7ff ff9d 	bl	8001b74 <PID_SetGoalVal>
    goal_cur_loop = PID_Control(&pid_pos_loop);      //电流环目标 = 位置环输出
 8001c3a:	481b      	ldr	r0, [pc, #108]	@ (8001ca8 <servoCtrlLoop+0x90>)
 8001c3c:	f7ff ff0a 	bl	8001a54 <PID_Control>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb0 <servoCtrlLoop+0x98>)
 8001c44:	6013      	str	r3, [r2, #0]

    if(goal_cur_loop > current_max)
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <servoCtrlLoop+0x98>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb4 <servoCtrlLoop+0x9c>)
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fa53 	bl	80010fc <__aeabi_fcmpgt>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <servoCtrlLoop+0x4c>
        goal_cur_loop = current_max;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <servoCtrlLoop+0x9c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a13      	ldr	r2, [pc, #76]	@ (8001cb0 <servoCtrlLoop+0x98>)
 8001c62:	6013      	str	r3, [r2, #0]
    if(goal_cur_loop < -current_max)
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <servoCtrlLoop+0x9c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001c6c:	4a10      	ldr	r2, [pc, #64]	@ (8001cb0 <servoCtrlLoop+0x98>)
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fa42 	bl	80010fc <__aeabi_fcmpgt>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <servoCtrlLoop+0x72>
        goal_cur_loop = -current_max;
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <servoCtrlLoop+0x9c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <servoCtrlLoop+0x98>)
 8001c88:	6013      	str	r3, [r2, #0]
//    else
//    {
//        MOTOR_DIR_IN1 = 1;
//        MOTOR_DIR_IN2 = 0;
//    }
    setMotorCur(fabs(goal_cur_loop));
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <servoCtrlLoop+0x98>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 fcb6 	bl	8002604 <setMotorCur>
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	20000774 	.word	0x20000774
 8001ca4:	20000778 	.word	0x20000778
 8001ca8:	2000072c 	.word	0x2000072c
 8001cac:	20000268 	.word	0x20000268
 8001cb0:	2000026c 	.word	0x2000026c
 8001cb4:	2000000c 	.word	0x2000000c

08001cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cbe:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <HAL_MspInit+0x5c>)
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	4a14      	ldr	r2, [pc, #80]	@ (8001d14 <HAL_MspInit+0x5c>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6193      	str	r3, [r2, #24]
 8001cca:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_MspInit+0x5c>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <HAL_MspInit+0x5c>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4a0e      	ldr	r2, [pc, #56]	@ (8001d14 <HAL_MspInit+0x5c>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	61d3      	str	r3, [r2, #28]
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <HAL_MspInit+0x5c>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <HAL_MspInit+0x60>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <HAL_MspInit+0x60>)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010000 	.word	0x40010000

08001d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <NMI_Handler+0x4>

08001d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <HardFault_Handler+0x4>

08001d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <MemManage_Handler+0x4>

08001d34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <BusFault_Handler+0x4>

08001d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <UsageFault_Handler+0x4>

08001d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6c:	f000 fccc 	bl	8002708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d78:	4802      	ldr	r0, [pc, #8]	@ (8001d84 <TIM2_IRQHandler+0x10>)
 8001d7a:	f002 fc19 	bl	80045b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200007d0 	.word	0x200007d0

08001d88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <TIM3_IRQHandler+0x10>)
 8001d8e:	f002 fc0f 	bl	80045b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000818 	.word	0x20000818

08001d9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <TIM4_IRQHandler+0x10>)
 8001da2:	f002 fc05 	bl	80045b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000860 	.word	0x20000860

08001db0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001db4:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <USART2_IRQHandler+0x10>)
 8001db6:	f003 fc61 	bl	800567c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200008a8 	.word	0x200008a8

08001dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return 1;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <_kill>:

int _kill(int pid, int sig)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ddc:	f005 f944 	bl	8007068 <__errno>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2216      	movs	r2, #22
 8001de4:	601a      	str	r2, [r3, #0]
  return -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_exit>:

void _exit (int status)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffe7 	bl	8001dd2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <_exit+0x12>

08001e08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e00a      	b.n	8001e30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e1a:	f3af 8000 	nop.w
 8001e1e:	4601      	mov	r1, r0
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	b2ca      	uxtb	r2, r1
 8001e28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dbf0      	blt.n	8001e1a <_read+0x12>
  }

  return len;
 8001e38:	687b      	ldr	r3, [r7, #4]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e009      	b.n	8001e68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	60ba      	str	r2, [r7, #8]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	dbf1      	blt.n	8001e54 <_write+0x12>
  }
  return len;
 8001e70:	687b      	ldr	r3, [r7, #4]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <_close>:

int _close(int file)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ea0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <_isatty>:

int _isatty(int file)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
	...

08001edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee4:	4a14      	ldr	r2, [pc, #80]	@ (8001f38 <_sbrk+0x5c>)
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <_sbrk+0x60>)
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef0:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <_sbrk+0x64>)
 8001efa:	4a12      	ldr	r2, [pc, #72]	@ (8001f44 <_sbrk+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efe:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <_sbrk+0x64>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d207      	bcs.n	8001f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f0c:	f005 f8ac 	bl	8007068 <__errno>
 8001f10:	4603      	mov	r3, r0
 8001f12:	220c      	movs	r2, #12
 8001f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	e009      	b.n	8001f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f22:	4b07      	ldr	r3, [pc, #28]	@ (8001f40 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a05      	ldr	r2, [pc, #20]	@ (8001f40 <_sbrk+0x64>)
 8001f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20005000 	.word	0x20005000
 8001f3c:	00000400 	.word	0x00000400
 8001f40:	20000784 	.word	0x20000784
 8001f44:	20000a40 	.word	0x20000a40

08001f48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b096      	sub	sp, #88	@ 0x58
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f68:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]
 8001f82:	615a      	str	r2, [r3, #20]
 8001f84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2220      	movs	r2, #32
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f005 f818 	bl	8006fc2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f92:	4b44      	ldr	r3, [pc, #272]	@ (80020a4 <MX_TIM1_Init+0x150>)
 8001f94:	4a44      	ldr	r2, [pc, #272]	@ (80020a8 <MX_TIM1_Init+0x154>)
 8001f96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001f98:	4b42      	ldr	r3, [pc, #264]	@ (80020a4 <MX_TIM1_Init+0x150>)
 8001f9a:	2247      	movs	r2, #71	@ 0x47
 8001f9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b41      	ldr	r3, [pc, #260]	@ (80020a4 <MX_TIM1_Init+0x150>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001fa4:	4b3f      	ldr	r3, [pc, #252]	@ (80020a4 <MX_TIM1_Init+0x150>)
 8001fa6:	2263      	movs	r2, #99	@ 0x63
 8001fa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001faa:	4b3e      	ldr	r3, [pc, #248]	@ (80020a4 <MX_TIM1_Init+0x150>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fb0:	4b3c      	ldr	r3, [pc, #240]	@ (80020a4 <MX_TIM1_Init+0x150>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80020a4 <MX_TIM1_Init+0x150>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fbc:	4839      	ldr	r0, [pc, #228]	@ (80020a4 <MX_TIM1_Init+0x150>)
 8001fbe:	f001 ffd3 	bl	8003f68 <HAL_TIM_Base_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001fc8:	f7ff fc80 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fd2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4832      	ldr	r0, [pc, #200]	@ (80020a4 <MX_TIM1_Init+0x150>)
 8001fda:	f002 fd4f 	bl	8004a7c <HAL_TIM_ConfigClockSource>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001fe4:	f7ff fc72 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fe8:	482e      	ldr	r0, [pc, #184]	@ (80020a4 <MX_TIM1_Init+0x150>)
 8001fea:	f002 f85f 	bl	80040ac <HAL_TIM_PWM_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001ff4:	f7ff fc6a 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002000:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002004:	4619      	mov	r1, r3
 8002006:	4827      	ldr	r0, [pc, #156]	@ (80020a4 <MX_TIM1_Init+0x150>)
 8002008:	f003 f9cc 	bl	80053a4 <HAL_TIMEx_MasterConfigSynchronization>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002012:	f7ff fc5b 	bl	80018cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002016:	2360      	movs	r3, #96	@ 0x60
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800201e:	2300      	movs	r3, #0
 8002020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002022:	2300      	movs	r3, #0
 8002024:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002036:	2208      	movs	r2, #8
 8002038:	4619      	mov	r1, r3
 800203a:	481a      	ldr	r0, [pc, #104]	@ (80020a4 <MX_TIM1_Init+0x150>)
 800203c:	f002 fc5c 	bl	80048f8 <HAL_TIM_PWM_ConfigChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002046:	f7ff fc41 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800204a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800204e:	220c      	movs	r2, #12
 8002050:	4619      	mov	r1, r3
 8002052:	4814      	ldr	r0, [pc, #80]	@ (80020a4 <MX_TIM1_Init+0x150>)
 8002054:	f002 fc50 	bl	80048f8 <HAL_TIM_PWM_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800205e:	f7ff fc35 	bl	80018cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002076:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800207a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	4619      	mov	r1, r3
 8002084:	4807      	ldr	r0, [pc, #28]	@ (80020a4 <MX_TIM1_Init+0x150>)
 8002086:	f003 f9eb 	bl	8005460 <HAL_TIMEx_ConfigBreakDeadTime>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002090:	f7ff fc1c 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002094:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <MX_TIM1_Init+0x150>)
 8002096:	f000 f9f1 	bl	800247c <HAL_TIM_MspPostInit>

}
 800209a:	bf00      	nop
 800209c:	3758      	adds	r7, #88	@ 0x58
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000788 	.word	0x20000788
 80020a8:	40012c00 	.word	0x40012c00

080020ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020b2:	f107 0308 	add.w	r3, r7, #8
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c0:	463b      	mov	r3, r7
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002144 <MX_TIM2_Init+0x98>)
 80020ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80020d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002144 <MX_TIM2_Init+0x98>)
 80020d2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80020d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002144 <MX_TIM2_Init+0x98>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80020de:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <MX_TIM2_Init+0x98>)
 80020e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e6:	4b17      	ldr	r3, [pc, #92]	@ (8002144 <MX_TIM2_Init+0x98>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ec:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <MX_TIM2_Init+0x98>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020f2:	4814      	ldr	r0, [pc, #80]	@ (8002144 <MX_TIM2_Init+0x98>)
 80020f4:	f001 ff38 	bl	8003f68 <HAL_TIM_Base_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80020fe:	f7ff fbe5 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002102:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002106:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002108:	f107 0308 	add.w	r3, r7, #8
 800210c:	4619      	mov	r1, r3
 800210e:	480d      	ldr	r0, [pc, #52]	@ (8002144 <MX_TIM2_Init+0x98>)
 8002110:	f002 fcb4 	bl	8004a7c <HAL_TIM_ConfigClockSource>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800211a:	f7ff fbd7 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002126:	463b      	mov	r3, r7
 8002128:	4619      	mov	r1, r3
 800212a:	4806      	ldr	r0, [pc, #24]	@ (8002144 <MX_TIM2_Init+0x98>)
 800212c:	f003 f93a 	bl	80053a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002136:	f7ff fbc9 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200007d0 	.word	0x200007d0

08002148 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b090      	sub	sp, #64	@ 0x40
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800214e:	f107 031c 	add.w	r3, r7, #28
 8002152:	2224      	movs	r2, #36	@ 0x24
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f004 ff33 	bl	8006fc2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002172:	4b2f      	ldr	r3, [pc, #188]	@ (8002230 <MX_TIM3_Init+0xe8>)
 8002174:	4a2f      	ldr	r2, [pc, #188]	@ (8002234 <MX_TIM3_Init+0xec>)
 8002176:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002178:	4b2d      	ldr	r3, [pc, #180]	@ (8002230 <MX_TIM3_Init+0xe8>)
 800217a:	2200      	movs	r2, #0
 800217c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217e:	4b2c      	ldr	r3, [pc, #176]	@ (8002230 <MX_TIM3_Init+0xe8>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002184:	4b2a      	ldr	r3, [pc, #168]	@ (8002230 <MX_TIM3_Init+0xe8>)
 8002186:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800218a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218c:	4b28      	ldr	r3, [pc, #160]	@ (8002230 <MX_TIM3_Init+0xe8>)
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002192:	4b27      	ldr	r3, [pc, #156]	@ (8002230 <MX_TIM3_Init+0xe8>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002198:	4825      	ldr	r0, [pc, #148]	@ (8002230 <MX_TIM3_Init+0xe8>)
 800219a:	f002 f881 	bl	80042a0 <HAL_TIM_IC_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80021a4:	f7ff fb92 	bl	80018cc <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021ac:	2300      	movs	r3, #0
 80021ae:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021b0:	2301      	movs	r3, #1
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Filter = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021bc:	2300      	movs	r3, #0
 80021be:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021c0:	2301      	movs	r3, #1
 80021c2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021c4:	2300      	movs	r3, #0
 80021c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Filter = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4619      	mov	r1, r3
 80021d2:	4817      	ldr	r0, [pc, #92]	@ (8002230 <MX_TIM3_Init+0xe8>)
 80021d4:	f002 f8b3 	bl	800433e <HAL_TIM_Encoder_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80021de:	f7ff fb75 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	480f      	ldr	r0, [pc, #60]	@ (8002230 <MX_TIM3_Init+0xe8>)
 80021f2:	f003 f8d7 	bl	80053a4 <HAL_TIMEx_MasterConfigSynchronization>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80021fc:	f7ff fb66 	bl	80018cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002200:	2300      	movs	r3, #0
 8002202:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002204:	2301      	movs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	220c      	movs	r2, #12
 8002214:	4619      	mov	r1, r3
 8002216:	4806      	ldr	r0, [pc, #24]	@ (8002230 <MX_TIM3_Init+0xe8>)
 8002218:	f002 fad2 	bl	80047c0 <HAL_TIM_IC_ConfigChannel>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002222:	f7ff fb53 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	3740      	adds	r7, #64	@ 0x40
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000818 	.word	0x20000818
 8002234:	40000400 	.word	0x40000400

08002238 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800223e:	f107 0308 	add.w	r3, r7, #8
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224c:	463b      	mov	r3, r7
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002254:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <MX_TIM4_Init+0x94>)
 8002256:	4a1e      	ldr	r2, [pc, #120]	@ (80022d0 <MX_TIM4_Init+0x98>)
 8002258:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 800225a:	4b1c      	ldr	r3, [pc, #112]	@ (80022cc <MX_TIM4_Init+0x94>)
 800225c:	2227      	movs	r2, #39	@ 0x27
 800225e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002260:	4b1a      	ldr	r3, [pc, #104]	@ (80022cc <MX_TIM4_Init+0x94>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002266:	4b19      	ldr	r3, [pc, #100]	@ (80022cc <MX_TIM4_Init+0x94>)
 8002268:	f242 720f 	movw	r2, #9999	@ 0x270f
 800226c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226e:	4b17      	ldr	r3, [pc, #92]	@ (80022cc <MX_TIM4_Init+0x94>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002274:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <MX_TIM4_Init+0x94>)
 8002276:	2200      	movs	r2, #0
 8002278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800227a:	4814      	ldr	r0, [pc, #80]	@ (80022cc <MX_TIM4_Init+0x94>)
 800227c:	f001 fe74 	bl	8003f68 <HAL_TIM_Base_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002286:	f7ff fb21 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800228a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800228e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	4619      	mov	r1, r3
 8002296:	480d      	ldr	r0, [pc, #52]	@ (80022cc <MX_TIM4_Init+0x94>)
 8002298:	f002 fbf0 	bl	8004a7c <HAL_TIM_ConfigClockSource>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80022a2:	f7ff fb13 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022ae:	463b      	mov	r3, r7
 80022b0:	4619      	mov	r1, r3
 80022b2:	4806      	ldr	r0, [pc, #24]	@ (80022cc <MX_TIM4_Init+0x94>)
 80022b4:	f003 f876 	bl	80053a4 <HAL_TIMEx_MasterConfigSynchronization>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80022be:	f7ff fb05 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000860 	.word	0x20000860
 80022d0:	40000800 	.word	0x40000800

080022d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	@ 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0318 	add.w	r3, r7, #24
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2f      	ldr	r2, [pc, #188]	@ (80023ac <HAL_TIM_Base_MspInit+0xd8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d10c      	bne.n	800230e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022f4:	4b2e      	ldr	r3, [pc, #184]	@ (80023b0 <HAL_TIM_Base_MspInit+0xdc>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a2d      	ldr	r2, [pc, #180]	@ (80023b0 <HAL_TIM_Base_MspInit+0xdc>)
 80022fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b2b      	ldr	r3, [pc, #172]	@ (80023b0 <HAL_TIM_Base_MspInit+0xdc>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800230c:	e04a      	b.n	80023a4 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002316:	d12c      	bne.n	8002372 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002318:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <HAL_TIM_Base_MspInit+0xdc>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	4a24      	ldr	r2, [pc, #144]	@ (80023b0 <HAL_TIM_Base_MspInit+0xdc>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	61d3      	str	r3, [r2, #28]
 8002324:	4b22      	ldr	r3, [pc, #136]	@ (80023b0 <HAL_TIM_Base_MspInit+0xdc>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002330:	4b1f      	ldr	r3, [pc, #124]	@ (80023b0 <HAL_TIM_Base_MspInit+0xdc>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	4a1e      	ldr	r2, [pc, #120]	@ (80023b0 <HAL_TIM_Base_MspInit+0xdc>)
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	6193      	str	r3, [r2, #24]
 800233c:	4b1c      	ldr	r3, [pc, #112]	@ (80023b0 <HAL_TIM_Base_MspInit+0xdc>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002348:	2303      	movs	r3, #3
 800234a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2302      	movs	r3, #2
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002354:	f107 0318 	add.w	r3, r7, #24
 8002358:	4619      	mov	r1, r3
 800235a:	4816      	ldr	r0, [pc, #88]	@ (80023b4 <HAL_TIM_Base_MspInit+0xe0>)
 800235c:	f000 fbd4 	bl	8002b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002360:	2200      	movs	r2, #0
 8002362:	2100      	movs	r1, #0
 8002364:	201c      	movs	r0, #28
 8002366:	f000 fae6 	bl	8002936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800236a:	201c      	movs	r0, #28
 800236c:	f000 faff 	bl	800296e <HAL_NVIC_EnableIRQ>
}
 8002370:	e018      	b.n	80023a4 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM4)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a10      	ldr	r2, [pc, #64]	@ (80023b8 <HAL_TIM_Base_MspInit+0xe4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d113      	bne.n	80023a4 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800237c:	4b0c      	ldr	r3, [pc, #48]	@ (80023b0 <HAL_TIM_Base_MspInit+0xdc>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	4a0b      	ldr	r2, [pc, #44]	@ (80023b0 <HAL_TIM_Base_MspInit+0xdc>)
 8002382:	f043 0304 	orr.w	r3, r3, #4
 8002386:	61d3      	str	r3, [r2, #28]
 8002388:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <HAL_TIM_Base_MspInit+0xdc>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	2100      	movs	r1, #0
 8002398:	201e      	movs	r0, #30
 800239a:	f000 facc 	bl	8002936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800239e:	201e      	movs	r0, #30
 80023a0:	f000 fae5 	bl	800296e <HAL_NVIC_EnableIRQ>
}
 80023a4:	bf00      	nop
 80023a6:	3728      	adds	r7, #40	@ 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40010800 	.word	0x40010800
 80023b8:	40000800 	.word	0x40000800

080023bc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	@ 0x28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 0318 	add.w	r3, r7, #24
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM3)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a25      	ldr	r2, [pc, #148]	@ (800246c <HAL_TIM_IC_MspInit+0xb0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d143      	bne.n	8002464 <HAL_TIM_IC_MspInit+0xa8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023dc:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <HAL_TIM_IC_MspInit+0xb4>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4a23      	ldr	r2, [pc, #140]	@ (8002470 <HAL_TIM_IC_MspInit+0xb4>)
 80023e2:	f043 0302 	orr.w	r3, r3, #2
 80023e6:	61d3      	str	r3, [r2, #28]
 80023e8:	4b21      	ldr	r3, [pc, #132]	@ (8002470 <HAL_TIM_IC_MspInit+0xb4>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <HAL_TIM_IC_MspInit+0xb4>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002470 <HAL_TIM_IC_MspInit+0xb4>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	6193      	str	r3, [r2, #24]
 8002400:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <HAL_TIM_IC_MspInit+0xb4>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240c:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <HAL_TIM_IC_MspInit+0xb4>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a17      	ldr	r2, [pc, #92]	@ (8002470 <HAL_TIM_IC_MspInit+0xb4>)
 8002412:	f043 0308 	orr.w	r3, r3, #8
 8002416:	6193      	str	r3, [r2, #24]
 8002418:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <HAL_TIM_IC_MspInit+0xb4>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002424:	23c0      	movs	r3, #192	@ 0xc0
 8002426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002430:	f107 0318 	add.w	r3, r7, #24
 8002434:	4619      	mov	r1, r3
 8002436:	480f      	ldr	r0, [pc, #60]	@ (8002474 <HAL_TIM_IC_MspInit+0xb8>)
 8002438:	f000 fb66 	bl	8002b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800243c:	2302      	movs	r3, #2
 800243e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002448:	f107 0318 	add.w	r3, r7, #24
 800244c:	4619      	mov	r1, r3
 800244e:	480a      	ldr	r0, [pc, #40]	@ (8002478 <HAL_TIM_IC_MspInit+0xbc>)
 8002450:	f000 fb5a 	bl	8002b08 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	201d      	movs	r0, #29
 800245a:	f000 fa6c 	bl	8002936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800245e:	201d      	movs	r0, #29
 8002460:	f000 fa85 	bl	800296e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002464:	bf00      	nop
 8002466:	3728      	adds	r7, #40	@ 0x28
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40000400 	.word	0x40000400
 8002470:	40021000 	.word	0x40021000
 8002474:	40010800 	.word	0x40010800
 8002478:	40010c00 	.word	0x40010c00

0800247c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0310 	add.w	r3, r7, #16
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a10      	ldr	r2, [pc, #64]	@ (80024d8 <HAL_TIM_MspPostInit+0x5c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d118      	bne.n	80024ce <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249c:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <HAL_TIM_MspPostInit+0x60>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a0e      	ldr	r2, [pc, #56]	@ (80024dc <HAL_TIM_MspPostInit+0x60>)
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b0c      	ldr	r3, [pc, #48]	@ (80024dc <HAL_TIM_MspPostInit+0x60>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024be:	2302      	movs	r3, #2
 80024c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 0310 	add.w	r3, r7, #16
 80024c6:	4619      	mov	r1, r3
 80024c8:	4805      	ldr	r0, [pc, #20]	@ (80024e0 <HAL_TIM_MspPostInit+0x64>)
 80024ca:	f000 fb1d 	bl	8002b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024ce:	bf00      	nop
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40012c00 	.word	0x40012c00
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010800 	.word	0x40010800

080024e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024e8:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <MX_USART2_UART_Init+0x4c>)
 80024ea:	4a12      	ldr	r2, [pc, #72]	@ (8002534 <MX_USART2_UART_Init+0x50>)
 80024ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024ee:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <MX_USART2_UART_Init+0x4c>)
 80024f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002530 <MX_USART2_UART_Init+0x4c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <MX_USART2_UART_Init+0x4c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002502:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <MX_USART2_UART_Init+0x4c>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002508:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <MX_USART2_UART_Init+0x4c>)
 800250a:	220c      	movs	r2, #12
 800250c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250e:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <MX_USART2_UART_Init+0x4c>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <MX_USART2_UART_Init+0x4c>)
 8002516:	2200      	movs	r2, #0
 8002518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800251a:	4805      	ldr	r0, [pc, #20]	@ (8002530 <MX_USART2_UART_Init+0x4c>)
 800251c:	f003 f803 	bl	8005526 <HAL_UART_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002526:	f7ff f9d1 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200008a8 	.word	0x200008a8
 8002534:	40004400 	.word	0x40004400

08002538 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1f      	ldr	r2, [pc, #124]	@ (80025d0 <HAL_UART_MspInit+0x98>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d137      	bne.n	80025c8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002558:	4b1e      	ldr	r3, [pc, #120]	@ (80025d4 <HAL_UART_MspInit+0x9c>)
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	4a1d      	ldr	r2, [pc, #116]	@ (80025d4 <HAL_UART_MspInit+0x9c>)
 800255e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002562:	61d3      	str	r3, [r2, #28]
 8002564:	4b1b      	ldr	r3, [pc, #108]	@ (80025d4 <HAL_UART_MspInit+0x9c>)
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002570:	4b18      	ldr	r3, [pc, #96]	@ (80025d4 <HAL_UART_MspInit+0x9c>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4a17      	ldr	r2, [pc, #92]	@ (80025d4 <HAL_UART_MspInit+0x9c>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	6193      	str	r3, [r2, #24]
 800257c:	4b15      	ldr	r3, [pc, #84]	@ (80025d4 <HAL_UART_MspInit+0x9c>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002588:	2304      	movs	r3, #4
 800258a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	4619      	mov	r1, r3
 800259a:	480f      	ldr	r0, [pc, #60]	@ (80025d8 <HAL_UART_MspInit+0xa0>)
 800259c:	f000 fab4 	bl	8002b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025a0:	2308      	movs	r3, #8
 80025a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ac:	f107 0310 	add.w	r3, r7, #16
 80025b0:	4619      	mov	r1, r3
 80025b2:	4809      	ldr	r0, [pc, #36]	@ (80025d8 <HAL_UART_MspInit+0xa0>)
 80025b4:	f000 faa8 	bl	8002b08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2100      	movs	r1, #0
 80025bc:	2026      	movs	r0, #38	@ 0x26
 80025be:	f000 f9ba 	bl	8002936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025c2:	2026      	movs	r0, #38	@ 0x26
 80025c4:	f000 f9d3 	bl	800296e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025c8:	bf00      	nop
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40004400 	.word	0x40004400
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40010800 	.word	0x40010800

080025dc <getMotorPos>:
  * @brief
  * @param
  * @return
  */
float getMotorPos()
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
	return motor_pos;
 80025e0:	4b02      	ldr	r3, [pc, #8]	@ (80025ec <getMotorPos+0x10>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	20000274 	.word	0x20000274

080025f0 <getMotorVel>:
  * @brief
  * @param
  * @return
  */
float getMotorVel()
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
	return motor_vel;
 80025f4:	4b02      	ldr	r3, [pc, #8]	@ (8002600 <getMotorVel+0x10>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	20000278 	.word	0x20000278

08002604 <setMotorCur>:
  * @brief
  * @param
  * @return
  */
void setMotorCur(float cur)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800260c:	210c      	movs	r1, #12
 800260e:	4807      	ldr	r0, [pc, #28]	@ (800262c <setMotorCur+0x28>)
 8002610:	f001 fda4 	bl	800415c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, cur);
 8002614:	4b05      	ldr	r3, [pc, #20]	@ (800262c <setMotorCur+0x28>)
 8002616:	681c      	ldr	r4, [r3, #0]
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7fe fd9f 	bl	800115c <__aeabi_f2uiz>
 800261e:	4603      	mov	r3, r0
 8002620:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bd90      	pop	{r4, r7, pc}
 800262a:	bf00      	nop
 800262c:	20000788 	.word	0x20000788

08002630 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002630:	480c      	ldr	r0, [pc, #48]	@ (8002664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002632:	490d      	ldr	r1, [pc, #52]	@ (8002668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002634:	4a0d      	ldr	r2, [pc, #52]	@ (800266c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002638:	e002      	b.n	8002640 <LoopCopyDataInit>

0800263a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800263c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263e:	3304      	adds	r3, #4

08002640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002644:	d3f9      	bcc.n	800263a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002646:	4a0a      	ldr	r2, [pc, #40]	@ (8002670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002648:	4c0a      	ldr	r4, [pc, #40]	@ (8002674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800264c:	e001      	b.n	8002652 <LoopFillZerobss>

0800264e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002650:	3204      	adds	r2, #4

08002652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002654:	d3fb      	bcc.n	800264e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002656:	f7ff fc77 	bl	8001f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800265a:	f004 fd0b 	bl	8007074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800265e:	f7fe fe7f 	bl	8001360 <main>
  bx lr
 8002662:	4770      	bx	lr
  ldr r0, =_sdata
 8002664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002668:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800266c:	0800bd60 	.word	0x0800bd60
  ldr r2, =_sbss
 8002670:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002674:	20000a40 	.word	0x20000a40

08002678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002678:	e7fe      	b.n	8002678 <ADC1_2_IRQHandler>
	...

0800267c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002680:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <HAL_Init+0x28>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a07      	ldr	r2, [pc, #28]	@ (80026a4 <HAL_Init+0x28>)
 8002686:	f043 0310 	orr.w	r3, r3, #16
 800268a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268c:	2003      	movs	r0, #3
 800268e:	f000 f947 	bl	8002920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002692:	200f      	movs	r0, #15
 8002694:	f000 f808 	bl	80026a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002698:	f7ff fb0e 	bl	8001cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40022000 	.word	0x40022000

080026a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b0:	4b12      	ldr	r3, [pc, #72]	@ (80026fc <HAL_InitTick+0x54>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b12      	ldr	r3, [pc, #72]	@ (8002700 <HAL_InitTick+0x58>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026be:	fbb3 f3f1 	udiv	r3, r3, r1
 80026c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f95f 	bl	800298a <HAL_SYSTICK_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e00e      	b.n	80026f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b0f      	cmp	r3, #15
 80026da:	d80a      	bhi.n	80026f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026dc:	2200      	movs	r2, #0
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	f000 f927 	bl	8002936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e8:	4a06      	ldr	r2, [pc, #24]	@ (8002704 <HAL_InitTick+0x5c>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e000      	b.n	80026f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000010 	.word	0x20000010
 8002700:	20000018 	.word	0x20000018
 8002704:	20000014 	.word	0x20000014

08002708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800270c:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_IncTick+0x1c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4b05      	ldr	r3, [pc, #20]	@ (8002728 <HAL_IncTick+0x20>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4413      	add	r3, r2
 8002718:	4a03      	ldr	r2, [pc, #12]	@ (8002728 <HAL_IncTick+0x20>)
 800271a:	6013      	str	r3, [r2, #0]
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	20000018 	.word	0x20000018
 8002728:	200008f0 	.word	0x200008f0

0800272c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return uwTick;
 8002730:	4b02      	ldr	r3, [pc, #8]	@ (800273c <HAL_GetTick+0x10>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	200008f0 	.word	0x200008f0

08002740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff fff0 	bl	800272c <HAL_GetTick>
 800274c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d005      	beq.n	8002766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800275a:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <HAL_Delay+0x44>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002766:	bf00      	nop
 8002768:	f7ff ffe0 	bl	800272c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	429a      	cmp	r2, r3
 8002776:	d8f7      	bhi.n	8002768 <HAL_Delay+0x28>
  {
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000018 	.word	0x20000018

08002788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002798:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027a4:	4013      	ands	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ba:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	60d3      	str	r3, [r2, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d4:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <__NVIC_GetPriorityGrouping+0x18>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	f003 0307 	and.w	r3, r3, #7
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	db0b      	blt.n	8002816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	4906      	ldr	r1, [pc, #24]	@ (8002820 <__NVIC_EnableIRQ+0x34>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2001      	movs	r0, #1
 800280e:	fa00 f202 	lsl.w	r2, r0, r2
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	e000e100 	.word	0xe000e100

08002824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	2b00      	cmp	r3, #0
 8002836:	db0a      	blt.n	800284e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	490c      	ldr	r1, [pc, #48]	@ (8002870 <__NVIC_SetPriority+0x4c>)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	0112      	lsls	r2, r2, #4
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	440b      	add	r3, r1
 8002848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800284c:	e00a      	b.n	8002864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4908      	ldr	r1, [pc, #32]	@ (8002874 <__NVIC_SetPriority+0x50>)
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	3b04      	subs	r3, #4
 800285c:	0112      	lsls	r2, r2, #4
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	440b      	add	r3, r1
 8002862:	761a      	strb	r2, [r3, #24]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000e100 	.word	0xe000e100
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	@ 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f1c3 0307 	rsb	r3, r3, #7
 8002892:	2b04      	cmp	r3, #4
 8002894:	bf28      	it	cs
 8002896:	2304      	movcs	r3, #4
 8002898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3304      	adds	r3, #4
 800289e:	2b06      	cmp	r3, #6
 80028a0:	d902      	bls.n	80028a8 <NVIC_EncodePriority+0x30>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3b03      	subs	r3, #3
 80028a6:	e000      	b.n	80028aa <NVIC_EncodePriority+0x32>
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	f04f 32ff 	mov.w	r2, #4294967295
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43da      	mvns	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	401a      	ands	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c0:	f04f 31ff 	mov.w	r1, #4294967295
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	43d9      	mvns	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	4313      	orrs	r3, r2
         );
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3724      	adds	r7, #36	@ 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028ec:	d301      	bcc.n	80028f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ee:	2301      	movs	r3, #1
 80028f0:	e00f      	b.n	8002912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f2:	4a0a      	ldr	r2, [pc, #40]	@ (800291c <SysTick_Config+0x40>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fa:	210f      	movs	r1, #15
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002900:	f7ff ff90 	bl	8002824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002904:	4b05      	ldr	r3, [pc, #20]	@ (800291c <SysTick_Config+0x40>)
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290a:	4b04      	ldr	r3, [pc, #16]	@ (800291c <SysTick_Config+0x40>)
 800290c:	2207      	movs	r2, #7
 800290e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	e000e010 	.word	0xe000e010

08002920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ff2d 	bl	8002788 <__NVIC_SetPriorityGrouping>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	4603      	mov	r3, r0
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002948:	f7ff ff42 	bl	80027d0 <__NVIC_GetPriorityGrouping>
 800294c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f7ff ff90 	bl	8002878 <NVIC_EncodePriority>
 8002958:	4602      	mov	r2, r0
 800295a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff5f 	bl	8002824 <__NVIC_SetPriority>
}
 8002966:	bf00      	nop
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff35 	bl	80027ec <__NVIC_EnableIRQ>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ffa2 	bl	80028dc <SysTick_Config>
 8002998:	4603      	mov	r3, r0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d008      	beq.n	80029cc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2204      	movs	r2, #4
 80029be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e020      	b.n	8002a0e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 020e 	bic.w	r2, r2, #14
 80029da:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f4:	2101      	movs	r1, #1
 80029f6:	fa01 f202 	lsl.w	r2, r1, r2
 80029fa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d005      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2204      	movs	r2, #4
 8002a34:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
 8002a3a:	e051      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 020e 	bic.w	r2, r2, #14
 8002a4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a22      	ldr	r2, [pc, #136]	@ (8002aec <HAL_DMA_Abort_IT+0xd4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d029      	beq.n	8002aba <HAL_DMA_Abort_IT+0xa2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a21      	ldr	r2, [pc, #132]	@ (8002af0 <HAL_DMA_Abort_IT+0xd8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d022      	beq.n	8002ab6 <HAL_DMA_Abort_IT+0x9e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1f      	ldr	r2, [pc, #124]	@ (8002af4 <HAL_DMA_Abort_IT+0xdc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d01a      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0x98>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002af8 <HAL_DMA_Abort_IT+0xe0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d012      	beq.n	8002aaa <HAL_DMA_Abort_IT+0x92>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1c      	ldr	r2, [pc, #112]	@ (8002afc <HAL_DMA_Abort_IT+0xe4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x8c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1b      	ldr	r2, [pc, #108]	@ (8002b00 <HAL_DMA_Abort_IT+0xe8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d102      	bne.n	8002a9e <HAL_DMA_Abort_IT+0x86>
 8002a98:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a9c:	e00e      	b.n	8002abc <HAL_DMA_Abort_IT+0xa4>
 8002a9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aa2:	e00b      	b.n	8002abc <HAL_DMA_Abort_IT+0xa4>
 8002aa4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002aa8:	e008      	b.n	8002abc <HAL_DMA_Abort_IT+0xa4>
 8002aaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aae:	e005      	b.n	8002abc <HAL_DMA_Abort_IT+0xa4>
 8002ab0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ab4:	e002      	b.n	8002abc <HAL_DMA_Abort_IT+0xa4>
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	e000      	b.n	8002abc <HAL_DMA_Abort_IT+0xa4>
 8002aba:	2301      	movs	r3, #1
 8002abc:	4a11      	ldr	r2, [pc, #68]	@ (8002b04 <HAL_DMA_Abort_IT+0xec>)
 8002abe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
    } 
  }
  return status;
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40020008 	.word	0x40020008
 8002af0:	4002001c 	.word	0x4002001c
 8002af4:	40020030 	.word	0x40020030
 8002af8:	40020044 	.word	0x40020044
 8002afc:	40020058 	.word	0x40020058
 8002b00:	4002006c 	.word	0x4002006c
 8002b04:	40020000 	.word	0x40020000

08002b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b08b      	sub	sp, #44	@ 0x2c
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1a:	e169      	b.n	8002df0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f040 8158 	bne.w	8002dea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4a9a      	ldr	r2, [pc, #616]	@ (8002da8 <HAL_GPIO_Init+0x2a0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d05e      	beq.n	8002c02 <HAL_GPIO_Init+0xfa>
 8002b44:	4a98      	ldr	r2, [pc, #608]	@ (8002da8 <HAL_GPIO_Init+0x2a0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d875      	bhi.n	8002c36 <HAL_GPIO_Init+0x12e>
 8002b4a:	4a98      	ldr	r2, [pc, #608]	@ (8002dac <HAL_GPIO_Init+0x2a4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d058      	beq.n	8002c02 <HAL_GPIO_Init+0xfa>
 8002b50:	4a96      	ldr	r2, [pc, #600]	@ (8002dac <HAL_GPIO_Init+0x2a4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d86f      	bhi.n	8002c36 <HAL_GPIO_Init+0x12e>
 8002b56:	4a96      	ldr	r2, [pc, #600]	@ (8002db0 <HAL_GPIO_Init+0x2a8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d052      	beq.n	8002c02 <HAL_GPIO_Init+0xfa>
 8002b5c:	4a94      	ldr	r2, [pc, #592]	@ (8002db0 <HAL_GPIO_Init+0x2a8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d869      	bhi.n	8002c36 <HAL_GPIO_Init+0x12e>
 8002b62:	4a94      	ldr	r2, [pc, #592]	@ (8002db4 <HAL_GPIO_Init+0x2ac>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d04c      	beq.n	8002c02 <HAL_GPIO_Init+0xfa>
 8002b68:	4a92      	ldr	r2, [pc, #584]	@ (8002db4 <HAL_GPIO_Init+0x2ac>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d863      	bhi.n	8002c36 <HAL_GPIO_Init+0x12e>
 8002b6e:	4a92      	ldr	r2, [pc, #584]	@ (8002db8 <HAL_GPIO_Init+0x2b0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d046      	beq.n	8002c02 <HAL_GPIO_Init+0xfa>
 8002b74:	4a90      	ldr	r2, [pc, #576]	@ (8002db8 <HAL_GPIO_Init+0x2b0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d85d      	bhi.n	8002c36 <HAL_GPIO_Init+0x12e>
 8002b7a:	2b12      	cmp	r3, #18
 8002b7c:	d82a      	bhi.n	8002bd4 <HAL_GPIO_Init+0xcc>
 8002b7e:	2b12      	cmp	r3, #18
 8002b80:	d859      	bhi.n	8002c36 <HAL_GPIO_Init+0x12e>
 8002b82:	a201      	add	r2, pc, #4	@ (adr r2, 8002b88 <HAL_GPIO_Init+0x80>)
 8002b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b88:	08002c03 	.word	0x08002c03
 8002b8c:	08002bdd 	.word	0x08002bdd
 8002b90:	08002bef 	.word	0x08002bef
 8002b94:	08002c31 	.word	0x08002c31
 8002b98:	08002c37 	.word	0x08002c37
 8002b9c:	08002c37 	.word	0x08002c37
 8002ba0:	08002c37 	.word	0x08002c37
 8002ba4:	08002c37 	.word	0x08002c37
 8002ba8:	08002c37 	.word	0x08002c37
 8002bac:	08002c37 	.word	0x08002c37
 8002bb0:	08002c37 	.word	0x08002c37
 8002bb4:	08002c37 	.word	0x08002c37
 8002bb8:	08002c37 	.word	0x08002c37
 8002bbc:	08002c37 	.word	0x08002c37
 8002bc0:	08002c37 	.word	0x08002c37
 8002bc4:	08002c37 	.word	0x08002c37
 8002bc8:	08002c37 	.word	0x08002c37
 8002bcc:	08002be5 	.word	0x08002be5
 8002bd0:	08002bf9 	.word	0x08002bf9
 8002bd4:	4a79      	ldr	r2, [pc, #484]	@ (8002dbc <HAL_GPIO_Init+0x2b4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bda:	e02c      	b.n	8002c36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	623b      	str	r3, [r7, #32]
          break;
 8002be2:	e029      	b.n	8002c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	3304      	adds	r3, #4
 8002bea:	623b      	str	r3, [r7, #32]
          break;
 8002bec:	e024      	b.n	8002c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	3308      	adds	r3, #8
 8002bf4:	623b      	str	r3, [r7, #32]
          break;
 8002bf6:	e01f      	b.n	8002c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	623b      	str	r3, [r7, #32]
          break;
 8002c00:	e01a      	b.n	8002c38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d102      	bne.n	8002c10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	623b      	str	r3, [r7, #32]
          break;
 8002c0e:	e013      	b.n	8002c38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d105      	bne.n	8002c24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c18:	2308      	movs	r3, #8
 8002c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	611a      	str	r2, [r3, #16]
          break;
 8002c22:	e009      	b.n	8002c38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c24:	2308      	movs	r3, #8
 8002c26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	615a      	str	r2, [r3, #20]
          break;
 8002c2e:	e003      	b.n	8002c38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c30:	2300      	movs	r3, #0
 8002c32:	623b      	str	r3, [r7, #32]
          break;
 8002c34:	e000      	b.n	8002c38 <HAL_GPIO_Init+0x130>
          break;
 8002c36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2bff      	cmp	r3, #255	@ 0xff
 8002c3c:	d801      	bhi.n	8002c42 <HAL_GPIO_Init+0x13a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	e001      	b.n	8002c46 <HAL_GPIO_Init+0x13e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3304      	adds	r3, #4
 8002c46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2bff      	cmp	r3, #255	@ 0xff
 8002c4c:	d802      	bhi.n	8002c54 <HAL_GPIO_Init+0x14c>
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	e002      	b.n	8002c5a <HAL_GPIO_Init+0x152>
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	3b08      	subs	r3, #8
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	210f      	movs	r1, #15
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	6a39      	ldr	r1, [r7, #32]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	431a      	orrs	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80b1 	beq.w	8002dea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c88:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc0 <HAL_GPIO_Init+0x2b8>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	4a4c      	ldr	r2, [pc, #304]	@ (8002dc0 <HAL_GPIO_Init+0x2b8>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6193      	str	r3, [r2, #24]
 8002c94:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc0 <HAL_GPIO_Init+0x2b8>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ca0:	4a48      	ldr	r2, [pc, #288]	@ (8002dc4 <HAL_GPIO_Init+0x2bc>)
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	220f      	movs	r2, #15
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a40      	ldr	r2, [pc, #256]	@ (8002dc8 <HAL_GPIO_Init+0x2c0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d013      	beq.n	8002cf4 <HAL_GPIO_Init+0x1ec>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a3f      	ldr	r2, [pc, #252]	@ (8002dcc <HAL_GPIO_Init+0x2c4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_GPIO_Init+0x1e8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a3e      	ldr	r2, [pc, #248]	@ (8002dd0 <HAL_GPIO_Init+0x2c8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d007      	beq.n	8002cec <HAL_GPIO_Init+0x1e4>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a3d      	ldr	r2, [pc, #244]	@ (8002dd4 <HAL_GPIO_Init+0x2cc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d101      	bne.n	8002ce8 <HAL_GPIO_Init+0x1e0>
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e006      	b.n	8002cf6 <HAL_GPIO_Init+0x1ee>
 8002ce8:	2304      	movs	r3, #4
 8002cea:	e004      	b.n	8002cf6 <HAL_GPIO_Init+0x1ee>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e002      	b.n	8002cf6 <HAL_GPIO_Init+0x1ee>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_GPIO_Init+0x1ee>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf8:	f002 0203 	and.w	r2, r2, #3
 8002cfc:	0092      	lsls	r2, r2, #2
 8002cfe:	4093      	lsls	r3, r2
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d06:	492f      	ldr	r1, [pc, #188]	@ (8002dc4 <HAL_GPIO_Init+0x2bc>)
 8002d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d006      	beq.n	8002d2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d20:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	492c      	ldr	r1, [pc, #176]	@ (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]
 8002d2c:	e006      	b.n	8002d3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	4928      	ldr	r1, [pc, #160]	@ (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d48:	4b23      	ldr	r3, [pc, #140]	@ (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	4922      	ldr	r1, [pc, #136]	@ (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60cb      	str	r3, [r1, #12]
 8002d54:	e006      	b.n	8002d64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d56:	4b20      	ldr	r3, [pc, #128]	@ (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	491e      	ldr	r1, [pc, #120]	@ (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d006      	beq.n	8002d7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d70:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	4918      	ldr	r1, [pc, #96]	@ (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
 8002d7c:	e006      	b.n	8002d8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d7e:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	4914      	ldr	r1, [pc, #80]	@ (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d021      	beq.n	8002ddc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d98:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	490e      	ldr	r1, [pc, #56]	@ (8002dd8 <HAL_GPIO_Init+0x2d0>)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]
 8002da4:	e021      	b.n	8002dea <HAL_GPIO_Init+0x2e2>
 8002da6:	bf00      	nop
 8002da8:	10320000 	.word	0x10320000
 8002dac:	10310000 	.word	0x10310000
 8002db0:	10220000 	.word	0x10220000
 8002db4:	10210000 	.word	0x10210000
 8002db8:	10120000 	.word	0x10120000
 8002dbc:	10110000 	.word	0x10110000
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40010000 	.word	0x40010000
 8002dc8:	40010800 	.word	0x40010800
 8002dcc:	40010c00 	.word	0x40010c00
 8002dd0:	40011000 	.word	0x40011000
 8002dd4:	40011400 	.word	0x40011400
 8002dd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <HAL_GPIO_Init+0x304>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	4909      	ldr	r1, [pc, #36]	@ (8002e0c <HAL_GPIO_Init+0x304>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	3301      	adds	r3, #1
 8002dee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f47f ae8e 	bne.w	8002b1c <HAL_GPIO_Init+0x14>
  }
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	372c      	adds	r7, #44	@ 0x2c
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	40010400 	.word	0x40010400

08002e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e12b      	b.n	800307a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fe fa42 	bl	80012c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2224      	movs	r2, #36	@ 0x24
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e74:	f001 f832 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 8002e78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4a81      	ldr	r2, [pc, #516]	@ (8003084 <HAL_I2C_Init+0x274>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d807      	bhi.n	8002e94 <HAL_I2C_Init+0x84>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4a80      	ldr	r2, [pc, #512]	@ (8003088 <HAL_I2C_Init+0x278>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	bf94      	ite	ls
 8002e8c:	2301      	movls	r3, #1
 8002e8e:	2300      	movhi	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e006      	b.n	8002ea2 <HAL_I2C_Init+0x92>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4a7d      	ldr	r2, [pc, #500]	@ (800308c <HAL_I2C_Init+0x27c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	bf94      	ite	ls
 8002e9c:	2301      	movls	r3, #1
 8002e9e:	2300      	movhi	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e0e7      	b.n	800307a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a78      	ldr	r2, [pc, #480]	@ (8003090 <HAL_I2C_Init+0x280>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	0c9b      	lsrs	r3, r3, #18
 8002eb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	4a6a      	ldr	r2, [pc, #424]	@ (8003084 <HAL_I2C_Init+0x274>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d802      	bhi.n	8002ee4 <HAL_I2C_Init+0xd4>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	e009      	b.n	8002ef8 <HAL_I2C_Init+0xe8>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	4a69      	ldr	r2, [pc, #420]	@ (8003094 <HAL_I2C_Init+0x284>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	099b      	lsrs	r3, r3, #6
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	495c      	ldr	r1, [pc, #368]	@ (8003084 <HAL_I2C_Init+0x274>)
 8002f14:	428b      	cmp	r3, r1
 8002f16:	d819      	bhi.n	8002f4c <HAL_I2C_Init+0x13c>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1e59      	subs	r1, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f26:	1c59      	adds	r1, r3, #1
 8002f28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f2c:	400b      	ands	r3, r1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_I2C_Init+0x138>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1e59      	subs	r1, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f46:	e051      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	e04f      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d111      	bne.n	8002f78 <HAL_I2C_Init+0x168>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1e58      	subs	r0, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	440b      	add	r3, r1
 8002f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e012      	b.n	8002f9e <HAL_I2C_Init+0x18e>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1e58      	subs	r0, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	0099      	lsls	r1, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Init+0x196>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e022      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10e      	bne.n	8002fcc <HAL_I2C_Init+0x1bc>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1e58      	subs	r0, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6859      	ldr	r1, [r3, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	440b      	add	r3, r1
 8002fbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fca:	e00f      	b.n	8002fec <HAL_I2C_Init+0x1dc>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	0099      	lsls	r1, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	6809      	ldr	r1, [r1, #0]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800301a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6911      	ldr	r1, [r2, #16]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68d2      	ldr	r2, [r2, #12]
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	430b      	orrs	r3, r1
 800302e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	000186a0 	.word	0x000186a0
 8003088:	001e847f 	.word	0x001e847f
 800308c:	003d08ff 	.word	0x003d08ff
 8003090:	431bde83 	.word	0x431bde83
 8003094:	10624dd3 	.word	0x10624dd3

08003098 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	461a      	mov	r2, r3
 80030a4:	460b      	mov	r3, r1
 80030a6:	817b      	strh	r3, [r7, #10]
 80030a8:	4613      	mov	r3, r2
 80030aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ac:	f7ff fb3e 	bl	800272c <HAL_GetTick>
 80030b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	f040 80e0 	bne.w	8003280 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2319      	movs	r3, #25
 80030c6:	2201      	movs	r2, #1
 80030c8:	4970      	ldr	r1, [pc, #448]	@ (800328c <HAL_I2C_Master_Transmit+0x1f4>)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f964 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030d6:	2302      	movs	r3, #2
 80030d8:	e0d3      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_I2C_Master_Transmit+0x50>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e0cc      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d007      	beq.n	800310e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0201 	orr.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800311c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2221      	movs	r2, #33	@ 0x21
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2210      	movs	r2, #16
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	893a      	ldrh	r2, [r7, #8]
 800313e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4a50      	ldr	r2, [pc, #320]	@ (8003290 <HAL_I2C_Master_Transmit+0x1f8>)
 800314e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003150:	8979      	ldrh	r1, [r7, #10]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	6a3a      	ldr	r2, [r7, #32]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f89c 	bl	8003294 <I2C_MasterRequestWrite>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e08d      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800317c:	e066      	b.n	800324c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	6a39      	ldr	r1, [r7, #32]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fa22 	bl	80035cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00d      	beq.n	80031aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	2b04      	cmp	r3, #4
 8003194:	d107      	bne.n	80031a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e06b      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d11b      	bne.n	8003220 <HAL_I2C_Master_Transmit+0x188>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d017      	beq.n	8003220 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	781a      	ldrb	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	6a39      	ldr	r1, [r7, #32]
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fa19 	bl	800365c <I2C_WaitOnBTFFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00d      	beq.n	800324c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	2b04      	cmp	r3, #4
 8003236:	d107      	bne.n	8003248 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003246:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e01a      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d194      	bne.n	800317e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	00100002 	.word	0x00100002
 8003290:	ffff0000 	.word	0xffff0000

08003294 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	460b      	mov	r3, r1
 80032a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d006      	beq.n	80032be <I2C_MasterRequestWrite+0x2a>
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d003      	beq.n	80032be <I2C_MasterRequestWrite+0x2a>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032bc:	d108      	bne.n	80032d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e00b      	b.n	80032e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	2b12      	cmp	r3, #18
 80032d6:	d107      	bne.n	80032e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f84f 	bl	8003398 <I2C_WaitOnFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00d      	beq.n	800331c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800330e:	d103      	bne.n	8003318 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003316:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e035      	b.n	8003388 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003324:	d108      	bne.n	8003338 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003326:	897b      	ldrh	r3, [r7, #10]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003334:	611a      	str	r2, [r3, #16]
 8003336:	e01b      	b.n	8003370 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003338:	897b      	ldrh	r3, [r7, #10]
 800333a:	11db      	asrs	r3, r3, #7
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f003 0306 	and.w	r3, r3, #6
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f063 030f 	orn	r3, r3, #15
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	490e      	ldr	r1, [pc, #56]	@ (8003390 <I2C_MasterRequestWrite+0xfc>)
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f898 	bl	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e010      	b.n	8003388 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003366:	897b      	ldrh	r3, [r7, #10]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4907      	ldr	r1, [pc, #28]	@ (8003394 <I2C_MasterRequestWrite+0x100>)
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f888 	bl	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	00010008 	.word	0x00010008
 8003394:	00010002 	.word	0x00010002

08003398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	4613      	mov	r3, r2
 80033a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a8:	e048      	b.n	800343c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d044      	beq.n	800343c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b2:	f7ff f9bb 	bl	800272c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d302      	bcc.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d139      	bne.n	800343c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	0c1b      	lsrs	r3, r3, #16
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d10d      	bne.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	43da      	mvns	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	4013      	ands	r3, r2
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	e00c      	b.n	8003408 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	43da      	mvns	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4013      	ands	r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	429a      	cmp	r2, r3
 800340c:	d116      	bne.n	800343c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e023      	b.n	8003484 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	0c1b      	lsrs	r3, r3, #16
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d10d      	bne.n	8003462 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	43da      	mvns	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	4013      	ands	r3, r2
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	e00c      	b.n	800347c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	43da      	mvns	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4013      	ands	r3, r2
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	429a      	cmp	r2, r3
 8003480:	d093      	beq.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800349a:	e071      	b.n	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034aa:	d123      	bne.n	80034f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	f043 0204 	orr.w	r2, r3, #4
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e067      	b.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d041      	beq.n	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fc:	f7ff f916 	bl	800272c <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d302      	bcc.n	8003512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d136      	bne.n	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d10c      	bne.n	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	43da      	mvns	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4013      	ands	r3, r2
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	bf14      	ite	ne
 800352e:	2301      	movne	r3, #1
 8003530:	2300      	moveq	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	e00b      	b.n	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	43da      	mvns	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4013      	ands	r3, r2
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf14      	ite	ne
 8003548:	2301      	movne	r3, #1
 800354a:	2300      	moveq	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d016      	beq.n	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e021      	b.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d10c      	bne.n	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	43da      	mvns	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4013      	ands	r3, r2
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf14      	ite	ne
 800359c:	2301      	movne	r3, #1
 800359e:	2300      	moveq	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	e00b      	b.n	80035bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	43da      	mvns	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4013      	ands	r3, r2
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f47f af6d 	bne.w	800349c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d8:	e034      	b.n	8003644 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f886 	bl	80036ec <I2C_IsAcknowledgeFailed>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e034      	b.n	8003654 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d028      	beq.n	8003644 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7ff f89b 	bl	800272c <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d11d      	bne.n	8003644 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003612:	2b80      	cmp	r3, #128	@ 0x80
 8003614:	d016      	beq.n	8003644 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e007      	b.n	8003654 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364e:	2b80      	cmp	r3, #128	@ 0x80
 8003650:	d1c3      	bne.n	80035da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003668:	e034      	b.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f83e 	bl	80036ec <I2C_IsAcknowledgeFailed>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e034      	b.n	80036e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d028      	beq.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003682:	f7ff f853 	bl	800272c <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	d302      	bcc.n	8003698 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11d      	bne.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d016      	beq.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	f043 0220 	orr.w	r2, r3, #32
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e007      	b.n	80036e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d1c3      	bne.n	800366a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003702:	d11b      	bne.n	800373c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800370c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	f043 0204 	orr.w	r2, r3, #4
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e272      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 8087 	beq.w	8003876 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003768:	4b92      	ldr	r3, [pc, #584]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 030c 	and.w	r3, r3, #12
 8003770:	2b04      	cmp	r3, #4
 8003772:	d00c      	beq.n	800378e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003774:	4b8f      	ldr	r3, [pc, #572]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b08      	cmp	r3, #8
 800377e:	d112      	bne.n	80037a6 <HAL_RCC_OscConfig+0x5e>
 8003780:	4b8c      	ldr	r3, [pc, #560]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800378c:	d10b      	bne.n	80037a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378e:	4b89      	ldr	r3, [pc, #548]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d06c      	beq.n	8003874 <HAL_RCC_OscConfig+0x12c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d168      	bne.n	8003874 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e24c      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ae:	d106      	bne.n	80037be <HAL_RCC_OscConfig+0x76>
 80037b0:	4b80      	ldr	r3, [pc, #512]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a7f      	ldr	r2, [pc, #508]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	e02e      	b.n	800381c <HAL_RCC_OscConfig+0xd4>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x98>
 80037c6:	4b7b      	ldr	r3, [pc, #492]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a7a      	ldr	r2, [pc, #488]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	4b78      	ldr	r3, [pc, #480]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a77      	ldr	r2, [pc, #476]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e01d      	b.n	800381c <HAL_RCC_OscConfig+0xd4>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0xbc>
 80037ea:	4b72      	ldr	r3, [pc, #456]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a71      	ldr	r2, [pc, #452]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4b6f      	ldr	r3, [pc, #444]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a6e      	ldr	r2, [pc, #440]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0xd4>
 8003804:	4b6b      	ldr	r3, [pc, #428]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a6a      	ldr	r2, [pc, #424]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 800380a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b68      	ldr	r3, [pc, #416]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a67      	ldr	r2, [pc, #412]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 8003816:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800381a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d013      	beq.n	800384c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fe ff82 	bl	800272c <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800382c:	f7fe ff7e 	bl	800272c <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	@ 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e200      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	4b5d      	ldr	r3, [pc, #372]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0xe4>
 800384a:	e014      	b.n	8003876 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe ff6e 	bl	800272c <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003854:	f7fe ff6a 	bl	800272c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	@ 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e1ec      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003866:	4b53      	ldr	r3, [pc, #332]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x10c>
 8003872:	e000      	b.n	8003876 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d063      	beq.n	800394a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003882:	4b4c      	ldr	r3, [pc, #304]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800388e:	4b49      	ldr	r3, [pc, #292]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b08      	cmp	r3, #8
 8003898:	d11c      	bne.n	80038d4 <HAL_RCC_OscConfig+0x18c>
 800389a:	4b46      	ldr	r3, [pc, #280]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d116      	bne.n	80038d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a6:	4b43      	ldr	r3, [pc, #268]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_RCC_OscConfig+0x176>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d001      	beq.n	80038be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e1c0      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038be:	4b3d      	ldr	r3, [pc, #244]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4939      	ldr	r1, [pc, #228]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d2:	e03a      	b.n	800394a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d020      	beq.n	800391e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038dc:	4b36      	ldr	r3, [pc, #216]	@ (80039b8 <HAL_RCC_OscConfig+0x270>)
 80038de:	2201      	movs	r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e2:	f7fe ff23 	bl	800272c <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ea:	f7fe ff1f 	bl	800272c <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e1a1      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fc:	4b2d      	ldr	r3, [pc, #180]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003908:	4b2a      	ldr	r3, [pc, #168]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4927      	ldr	r1, [pc, #156]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]
 800391c:	e015      	b.n	800394a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391e:	4b26      	ldr	r3, [pc, #152]	@ (80039b8 <HAL_RCC_OscConfig+0x270>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fe ff02 	bl	800272c <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392c:	f7fe fefe 	bl	800272c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e180      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	4b1d      	ldr	r3, [pc, #116]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d03a      	beq.n	80039cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d019      	beq.n	8003992 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395e:	4b17      	ldr	r3, [pc, #92]	@ (80039bc <HAL_RCC_OscConfig+0x274>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003964:	f7fe fee2 	bl	800272c <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800396c:	f7fe fede 	bl	800272c <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e160      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397e:	4b0d      	ldr	r3, [pc, #52]	@ (80039b4 <HAL_RCC_OscConfig+0x26c>)
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800398a:	2001      	movs	r0, #1
 800398c:	f000 face 	bl	8003f2c <RCC_Delay>
 8003990:	e01c      	b.n	80039cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003992:	4b0a      	ldr	r3, [pc, #40]	@ (80039bc <HAL_RCC_OscConfig+0x274>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003998:	f7fe fec8 	bl	800272c <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399e:	e00f      	b.n	80039c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a0:	f7fe fec4 	bl	800272c <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d908      	bls.n	80039c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e146      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000
 80039b8:	42420000 	.word	0x42420000
 80039bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	4b92      	ldr	r3, [pc, #584]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e9      	bne.n	80039a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80a6 	beq.w	8003b26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039de:	4b8b      	ldr	r3, [pc, #556]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10d      	bne.n	8003a06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ea:	4b88      	ldr	r3, [pc, #544]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	4a87      	ldr	r2, [pc, #540]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	61d3      	str	r3, [r2, #28]
 80039f6:	4b85      	ldr	r3, [pc, #532]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a02:	2301      	movs	r3, #1
 8003a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	4b82      	ldr	r3, [pc, #520]	@ (8003c10 <HAL_RCC_OscConfig+0x4c8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d118      	bne.n	8003a44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a12:	4b7f      	ldr	r3, [pc, #508]	@ (8003c10 <HAL_RCC_OscConfig+0x4c8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a7e      	ldr	r2, [pc, #504]	@ (8003c10 <HAL_RCC_OscConfig+0x4c8>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1e:	f7fe fe85 	bl	800272c <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a26:	f7fe fe81 	bl	800272c <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b64      	cmp	r3, #100	@ 0x64
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e103      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a38:	4b75      	ldr	r3, [pc, #468]	@ (8003c10 <HAL_RCC_OscConfig+0x4c8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d106      	bne.n	8003a5a <HAL_RCC_OscConfig+0x312>
 8003a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	4a6e      	ldr	r2, [pc, #440]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6213      	str	r3, [r2, #32]
 8003a58:	e02d      	b.n	8003ab6 <HAL_RCC_OscConfig+0x36e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x334>
 8003a62:	4b6a      	ldr	r3, [pc, #424]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	4a69      	ldr	r2, [pc, #420]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	f023 0301 	bic.w	r3, r3, #1
 8003a6c:	6213      	str	r3, [r2, #32]
 8003a6e:	4b67      	ldr	r3, [pc, #412]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	4a66      	ldr	r2, [pc, #408]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	f023 0304 	bic.w	r3, r3, #4
 8003a78:	6213      	str	r3, [r2, #32]
 8003a7a:	e01c      	b.n	8003ab6 <HAL_RCC_OscConfig+0x36e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	d10c      	bne.n	8003a9e <HAL_RCC_OscConfig+0x356>
 8003a84:	4b61      	ldr	r3, [pc, #388]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	4a60      	ldr	r2, [pc, #384]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	f043 0304 	orr.w	r3, r3, #4
 8003a8e:	6213      	str	r3, [r2, #32]
 8003a90:	4b5e      	ldr	r3, [pc, #376]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4a5d      	ldr	r2, [pc, #372]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6213      	str	r3, [r2, #32]
 8003a9c:	e00b      	b.n	8003ab6 <HAL_RCC_OscConfig+0x36e>
 8003a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	4a5a      	ldr	r2, [pc, #360]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	6213      	str	r3, [r2, #32]
 8003aaa:	4b58      	ldr	r3, [pc, #352]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	4a57      	ldr	r2, [pc, #348]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003ab0:	f023 0304 	bic.w	r3, r3, #4
 8003ab4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d015      	beq.n	8003aea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abe:	f7fe fe35 	bl	800272c <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac4:	e00a      	b.n	8003adc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fe fe31 	bl	800272c <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e0b1      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003adc:	4b4b      	ldr	r3, [pc, #300]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0ee      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x37e>
 8003ae8:	e014      	b.n	8003b14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aea:	f7fe fe1f 	bl	800272c <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af0:	e00a      	b.n	8003b08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af2:	f7fe fe1b 	bl	800272c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e09b      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b08:	4b40      	ldr	r3, [pc, #256]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1ee      	bne.n	8003af2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d105      	bne.n	8003b26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003b20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8087 	beq.w	8003c3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b30:	4b36      	ldr	r3, [pc, #216]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 030c 	and.w	r3, r3, #12
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d061      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d146      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b44:	4b33      	ldr	r3, [pc, #204]	@ (8003c14 <HAL_RCC_OscConfig+0x4cc>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4a:	f7fe fdef 	bl	800272c <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b52:	f7fe fdeb 	bl	800272c <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e06d      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b64:	4b29      	ldr	r3, [pc, #164]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1f0      	bne.n	8003b52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b78:	d108      	bne.n	8003b8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b7a:	4b24      	ldr	r3, [pc, #144]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	4921      	ldr	r1, [pc, #132]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a19      	ldr	r1, [r3, #32]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	491b      	ldr	r1, [pc, #108]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c14 <HAL_RCC_OscConfig+0x4cc>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003baa:	f7fe fdbf 	bl	800272c <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb2:	f7fe fdbb 	bl	800272c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e03d      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bc4:	4b11      	ldr	r3, [pc, #68]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x46a>
 8003bd0:	e035      	b.n	8003c3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b10      	ldr	r3, [pc, #64]	@ (8003c14 <HAL_RCC_OscConfig+0x4cc>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fe fda8 	bl	800272c <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fe fda4 	bl	800272c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e026      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bf2:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x498>
 8003bfe:	e01e      	b.n	8003c3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d107      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e019      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40007000 	.word	0x40007000
 8003c14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c18:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <HAL_RCC_OscConfig+0x500>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d106      	bne.n	8003c3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d001      	beq.n	8003c3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000

08003c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0d0      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c60:	4b6a      	ldr	r3, [pc, #424]	@ (8003e0c <HAL_RCC_ClockConfig+0x1c0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d910      	bls.n	8003c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6e:	4b67      	ldr	r3, [pc, #412]	@ (8003e0c <HAL_RCC_ClockConfig+0x1c0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 0207 	bic.w	r2, r3, #7
 8003c76:	4965      	ldr	r1, [pc, #404]	@ (8003e0c <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7e:	4b63      	ldr	r3, [pc, #396]	@ (8003e0c <HAL_RCC_ClockConfig+0x1c0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0b8      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d020      	beq.n	8003cde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca8:	4b59      	ldr	r3, [pc, #356]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4a58      	ldr	r2, [pc, #352]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc0:	4b53      	ldr	r3, [pc, #332]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4a52      	ldr	r2, [pc, #328]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003cca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ccc:	4b50      	ldr	r3, [pc, #320]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	494d      	ldr	r1, [pc, #308]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d040      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d107      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf2:	4b47      	ldr	r3, [pc, #284]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d115      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e07f      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d107      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0a:	4b41      	ldr	r3, [pc, #260]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e073      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e06b      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d2a:	4b39      	ldr	r3, [pc, #228]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f023 0203 	bic.w	r2, r3, #3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4936      	ldr	r1, [pc, #216]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d3c:	f7fe fcf6 	bl	800272c <HAL_GetTick>
 8003d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d44:	f7fe fcf2 	bl	800272c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e053      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 020c 	and.w	r2, r3, #12
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d1eb      	bne.n	8003d44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b27      	ldr	r3, [pc, #156]	@ (8003e0c <HAL_RCC_ClockConfig+0x1c0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d210      	bcs.n	8003d9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b24      	ldr	r3, [pc, #144]	@ (8003e0c <HAL_RCC_ClockConfig+0x1c0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 0207 	bic.w	r2, r3, #7
 8003d82:	4922      	ldr	r1, [pc, #136]	@ (8003e0c <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b20      	ldr	r3, [pc, #128]	@ (8003e0c <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e032      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da8:	4b19      	ldr	r3, [pc, #100]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4916      	ldr	r1, [pc, #88]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dc6:	4b12      	ldr	r3, [pc, #72]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	490e      	ldr	r1, [pc, #56]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dda:	f000 f821 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 8003dde:	4602      	mov	r2, r0
 8003de0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <HAL_RCC_ClockConfig+0x1c4>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	490a      	ldr	r1, [pc, #40]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c8>)
 8003dec:	5ccb      	ldrb	r3, [r1, r3]
 8003dee:	fa22 f303 	lsr.w	r3, r2, r3
 8003df2:	4a09      	ldr	r2, [pc, #36]	@ (8003e18 <HAL_RCC_ClockConfig+0x1cc>)
 8003df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003df6:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <HAL_RCC_ClockConfig+0x1d0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe fc54 	bl	80026a8 <HAL_InitTick>

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40022000 	.word	0x40022000
 8003e10:	40021000 	.word	0x40021000
 8003e14:	0800b720 	.word	0x0800b720
 8003e18:	20000010 	.word	0x20000010
 8003e1c:	20000014 	.word	0x20000014

08003e20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 030c 	and.w	r3, r3, #12
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d002      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0x30>
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d003      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0x36>
 8003e4e:	e027      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e50:	4b19      	ldr	r3, [pc, #100]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e52:	613b      	str	r3, [r7, #16]
      break;
 8003e54:	e027      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	0c9b      	lsrs	r3, r3, #18
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	4a17      	ldr	r2, [pc, #92]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e60:	5cd3      	ldrb	r3, [r2, r3]
 8003e62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d010      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e6e:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	0c5b      	lsrs	r3, r3, #17
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	4a11      	ldr	r2, [pc, #68]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e7a:	5cd3      	ldrb	r3, [r2, r3]
 8003e7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e82:	fb03 f202 	mul.w	r2, r3, r2
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	e004      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a0c      	ldr	r2, [pc, #48]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e94:	fb02 f303 	mul.w	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	613b      	str	r3, [r7, #16]
      break;
 8003e9e:	e002      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ea0:	4b05      	ldr	r3, [pc, #20]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ea2:	613b      	str	r3, [r7, #16]
      break;
 8003ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ea6:	693b      	ldr	r3, [r7, #16]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	007a1200 	.word	0x007a1200
 8003ebc:	0800b738 	.word	0x0800b738
 8003ec0:	0800b748 	.word	0x0800b748
 8003ec4:	003d0900 	.word	0x003d0900

08003ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ecc:	4b02      	ldr	r3, [pc, #8]	@ (8003ed8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ece:	681b      	ldr	r3, [r3, #0]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr
 8003ed8:	20000010 	.word	0x20000010

08003edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ee0:	f7ff fff2 	bl	8003ec8 <HAL_RCC_GetHCLKFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4903      	ldr	r1, [pc, #12]	@ (8003f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef2:	5ccb      	ldrb	r3, [r1, r3]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40021000 	.word	0x40021000
 8003f00:	0800b730 	.word	0x0800b730

08003f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f08:	f7ff ffde 	bl	8003ec8 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	0adb      	lsrs	r3, r3, #11
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	@ (8003f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40021000 	.word	0x40021000
 8003f28:	0800b730 	.word	0x0800b730

08003f2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f34:	4b0a      	ldr	r3, [pc, #40]	@ (8003f60 <RCC_Delay+0x34>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <RCC_Delay+0x38>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	0a5b      	lsrs	r3, r3, #9
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f48:	bf00      	nop
  }
  while (Delay --);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1e5a      	subs	r2, r3, #1
 8003f4e:	60fa      	str	r2, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f9      	bne.n	8003f48 <RCC_Delay+0x1c>
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	20000010 	.word	0x20000010
 8003f64:	10624dd3 	.word	0x10624dd3

08003f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e041      	b.n	8003ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fe f9a0 	bl	80022d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	f000 fe4a 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d001      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e03a      	b.n	8004096 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a18      	ldr	r2, [pc, #96]	@ (80040a0 <HAL_TIM_Base_Start_IT+0x98>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00e      	beq.n	8004060 <HAL_TIM_Base_Start_IT+0x58>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800404a:	d009      	beq.n	8004060 <HAL_TIM_Base_Start_IT+0x58>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a14      	ldr	r2, [pc, #80]	@ (80040a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <HAL_TIM_Base_Start_IT+0x58>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a13      	ldr	r2, [pc, #76]	@ (80040a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d111      	bne.n	8004084 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b06      	cmp	r3, #6
 8004070:	d010      	beq.n	8004094 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0201 	orr.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004082:	e007      	b.n	8004094 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40000800 	.word	0x40000800

080040ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e041      	b.n	8004142 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f839 	bl	800414a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f000 fda8 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d109      	bne.n	8004180 <HAL_TIM_PWM_Start+0x24>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b01      	cmp	r3, #1
 8004176:	bf14      	ite	ne
 8004178:	2301      	movne	r3, #1
 800417a:	2300      	moveq	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	e022      	b.n	80041c6 <HAL_TIM_PWM_Start+0x6a>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b04      	cmp	r3, #4
 8004184:	d109      	bne.n	800419a <HAL_TIM_PWM_Start+0x3e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b01      	cmp	r3, #1
 8004190:	bf14      	ite	ne
 8004192:	2301      	movne	r3, #1
 8004194:	2300      	moveq	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	e015      	b.n	80041c6 <HAL_TIM_PWM_Start+0x6a>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b08      	cmp	r3, #8
 800419e:	d109      	bne.n	80041b4 <HAL_TIM_PWM_Start+0x58>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	bf14      	ite	ne
 80041ac:	2301      	movne	r3, #1
 80041ae:	2300      	moveq	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	e008      	b.n	80041c6 <HAL_TIM_PWM_Start+0x6a>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	bf14      	ite	ne
 80041c0:	2301      	movne	r3, #1
 80041c2:	2300      	moveq	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e05e      	b.n	800428c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d104      	bne.n	80041de <HAL_TIM_PWM_Start+0x82>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041dc:	e013      	b.n	8004206 <HAL_TIM_PWM_Start+0xaa>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d104      	bne.n	80041ee <HAL_TIM_PWM_Start+0x92>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041ec:	e00b      	b.n	8004206 <HAL_TIM_PWM_Start+0xaa>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d104      	bne.n	80041fe <HAL_TIM_PWM_Start+0xa2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041fc:	e003      	b.n	8004206 <HAL_TIM_PWM_Start+0xaa>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2202      	movs	r2, #2
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2201      	movs	r2, #1
 800420c:	6839      	ldr	r1, [r7, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f001 f8a3 	bl	800535a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1e      	ldr	r2, [pc, #120]	@ (8004294 <HAL_TIM_PWM_Start+0x138>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d107      	bne.n	800422e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800422c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a18      	ldr	r2, [pc, #96]	@ (8004294 <HAL_TIM_PWM_Start+0x138>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_TIM_PWM_Start+0xfa>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004240:	d009      	beq.n	8004256 <HAL_TIM_PWM_Start+0xfa>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a14      	ldr	r2, [pc, #80]	@ (8004298 <HAL_TIM_PWM_Start+0x13c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_TIM_PWM_Start+0xfa>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a12      	ldr	r2, [pc, #72]	@ (800429c <HAL_TIM_PWM_Start+0x140>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d111      	bne.n	800427a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b06      	cmp	r3, #6
 8004266:	d010      	beq.n	800428a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004278:	e007      	b.n	800428a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0201 	orr.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40012c00 	.word	0x40012c00
 8004298:	40000400 	.word	0x40000400
 800429c:	40000800 	.word	0x40000800

080042a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e041      	b.n	8004336 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fe f878 	bl	80023bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	4619      	mov	r1, r3
 80042de:	4610      	mov	r0, r2
 80042e0:	f000 fcae 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b086      	sub	sp, #24
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e093      	b.n	800447a <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f88b 	bl	8004482 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004382:	f023 0307 	bic.w	r3, r3, #7
 8004386:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f000 fc54 	bl	8004c40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c0:	f023 0303 	bic.w	r3, r3, #3
 80043c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	4313      	orrs	r3, r2
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80043de:	f023 030c 	bic.w	r3, r3, #12
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	4313      	orrs	r3, r2
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	011a      	lsls	r2, r3, #4
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	031b      	lsls	r3, r3, #12
 800440e:	4313      	orrs	r3, r2
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800441c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	4313      	orrs	r3, r2
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80044bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d110      	bne.n	80044e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d102      	bne.n	80044d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80044ca:	7b7b      	ldrb	r3, [r7, #13]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d001      	beq.n	80044d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e069      	b.n	80045a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044e4:	e031      	b.n	800454a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d110      	bne.n	800450e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044ec:	7bbb      	ldrb	r3, [r7, #14]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d102      	bne.n	80044f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044f2:	7b3b      	ldrb	r3, [r7, #12]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d001      	beq.n	80044fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e055      	b.n	80045a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800450c:	e01d      	b.n	800454a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d108      	bne.n	8004526 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004514:	7bbb      	ldrb	r3, [r7, #14]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d105      	bne.n	8004526 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800451a:	7b7b      	ldrb	r3, [r7, #13]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d102      	bne.n	8004526 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004520:	7b3b      	ldrb	r3, [r7, #12]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d001      	beq.n	800452a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e03e      	b.n	80045a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2202      	movs	r2, #2
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2202      	movs	r2, #2
 8004536:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_TIM_Encoder_Start+0xc4>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b04      	cmp	r3, #4
 8004554:	d008      	beq.n	8004568 <HAL_TIM_Encoder_Start+0xd4>
 8004556:	e00f      	b.n	8004578 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2201      	movs	r2, #1
 800455e:	2100      	movs	r1, #0
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fefa 	bl	800535a <TIM_CCxChannelCmd>
      break;
 8004566:	e016      	b.n	8004596 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2201      	movs	r2, #1
 800456e:	2104      	movs	r1, #4
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fef2 	bl	800535a <TIM_CCxChannelCmd>
      break;
 8004576:	e00e      	b.n	8004596 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2201      	movs	r2, #1
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f000 feea 	bl	800535a <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2201      	movs	r2, #1
 800458c:	2104      	movs	r1, #4
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fee3 	bl	800535a <TIM_CCxChannelCmd>
      break;
 8004594:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d122      	bne.n	800460c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d11b      	bne.n	800460c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0202 	mvn.w	r2, #2
 80045dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fd f8a4 	bl	8001740 <HAL_TIM_IC_CaptureCallback>
 80045f8:	e005      	b.n	8004606 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fb05 	bl	8004c0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fb0b 	bl	8004c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b04      	cmp	r3, #4
 8004618:	d122      	bne.n	8004660 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b04      	cmp	r3, #4
 8004626:	d11b      	bne.n	8004660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0204 	mvn.w	r2, #4
 8004630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fd f87a 	bl	8001740 <HAL_TIM_IC_CaptureCallback>
 800464c:	e005      	b.n	800465a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fadb 	bl	8004c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fae1 	bl	8004c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b08      	cmp	r3, #8
 800466c:	d122      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b08      	cmp	r3, #8
 800467a:	d11b      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0208 	mvn.w	r2, #8
 8004684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2204      	movs	r2, #4
 800468a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd f850 	bl	8001740 <HAL_TIM_IC_CaptureCallback>
 80046a0:	e005      	b.n	80046ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fab1 	bl	8004c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fab7 	bl	8004c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b10      	cmp	r3, #16
 80046c0:	d122      	bne.n	8004708 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d11b      	bne.n	8004708 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0210 	mvn.w	r2, #16
 80046d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2208      	movs	r2, #8
 80046de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fd f826 	bl	8001740 <HAL_TIM_IC_CaptureCallback>
 80046f4:	e005      	b.n	8004702 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fa87 	bl	8004c0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fa8d 	bl	8004c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d10e      	bne.n	8004734 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b01      	cmp	r3, #1
 8004722:	d107      	bne.n	8004734 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0201 	mvn.w	r2, #1
 800472c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fd f836 	bl	80017a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473e:	2b80      	cmp	r3, #128	@ 0x80
 8004740:	d10e      	bne.n	8004760 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474c:	2b80      	cmp	r3, #128	@ 0x80
 800474e:	d107      	bne.n	8004760 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 feda 	bl	8005514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476a:	2b40      	cmp	r3, #64	@ 0x40
 800476c:	d10e      	bne.n	800478c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004778:	2b40      	cmp	r3, #64	@ 0x40
 800477a:	d107      	bne.n	800478c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa51 	bl	8004c2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b20      	cmp	r3, #32
 8004798:	d10e      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d107      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0220 	mvn.w	r2, #32
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fea5 	bl	8005502 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047b8:	bf00      	nop
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_TIM_IC_ConfigChannel+0x1e>
 80047da:	2302      	movs	r3, #2
 80047dc:	e088      	b.n	80048f0 <HAL_TIM_IC_ConfigChannel+0x130>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d11b      	bne.n	8004824 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80047fc:	f000 fc0a 	bl	8005014 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 020c 	bic.w	r2, r2, #12
 800480e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6999      	ldr	r1, [r3, #24]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	619a      	str	r2, [r3, #24]
 8004822:	e060      	b.n	80048e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b04      	cmp	r3, #4
 8004828:	d11c      	bne.n	8004864 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800483a:	f000 fc73 	bl	8005124 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800484c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6999      	ldr	r1, [r3, #24]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	021a      	lsls	r2, r3, #8
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	619a      	str	r2, [r3, #24]
 8004862:	e040      	b.n	80048e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b08      	cmp	r3, #8
 8004868:	d11b      	bne.n	80048a2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800487a:	f000 fcbe 	bl	80051fa <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 020c 	bic.w	r2, r2, #12
 800488c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69d9      	ldr	r1, [r3, #28]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	61da      	str	r2, [r3, #28]
 80048a0:	e021      	b.n	80048e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	d11c      	bne.n	80048e2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80048b8:	f000 fcda 	bl	8005270 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69da      	ldr	r2, [r3, #28]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80048ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69d9      	ldr	r1, [r3, #28]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	021a      	lsls	r2, r3, #8
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	61da      	str	r2, [r3, #28]
 80048e0:	e001      	b.n	80048e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004912:	2302      	movs	r3, #2
 8004914:	e0ae      	b.n	8004a74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b0c      	cmp	r3, #12
 8004922:	f200 809f 	bhi.w	8004a64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004926:	a201      	add	r2, pc, #4	@ (adr r2, 800492c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492c:	08004961 	.word	0x08004961
 8004930:	08004a65 	.word	0x08004a65
 8004934:	08004a65 	.word	0x08004a65
 8004938:	08004a65 	.word	0x08004a65
 800493c:	080049a1 	.word	0x080049a1
 8004940:	08004a65 	.word	0x08004a65
 8004944:	08004a65 	.word	0x08004a65
 8004948:	08004a65 	.word	0x08004a65
 800494c:	080049e3 	.word	0x080049e3
 8004950:	08004a65 	.word	0x08004a65
 8004954:	08004a65 	.word	0x08004a65
 8004958:	08004a65 	.word	0x08004a65
 800495c:	08004a23 	.word	0x08004a23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f9cc 	bl	8004d04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0208 	orr.w	r2, r2, #8
 800497a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0204 	bic.w	r2, r2, #4
 800498a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6999      	ldr	r1, [r3, #24]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	619a      	str	r2, [r3, #24]
      break;
 800499e:	e064      	b.n	8004a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fa12 	bl	8004dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6999      	ldr	r1, [r3, #24]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	021a      	lsls	r2, r3, #8
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	619a      	str	r2, [r3, #24]
      break;
 80049e0:	e043      	b.n	8004a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fa5b 	bl	8004ea4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 0208 	orr.w	r2, r2, #8
 80049fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0204 	bic.w	r2, r2, #4
 8004a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69d9      	ldr	r1, [r3, #28]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	61da      	str	r2, [r3, #28]
      break;
 8004a20:	e023      	b.n	8004a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68b9      	ldr	r1, [r7, #8]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 faa5 	bl	8004f78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69da      	ldr	r2, [r3, #28]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69d9      	ldr	r1, [r3, #28]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	021a      	lsls	r2, r3, #8
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	61da      	str	r2, [r3, #28]
      break;
 8004a62:	e002      	b.n	8004a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	75fb      	strb	r3, [r7, #23]
      break;
 8004a68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_TIM_ConfigClockSource+0x1c>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e0b4      	b.n	8004c02 <HAL_TIM_ConfigClockSource+0x186>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004abe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad0:	d03e      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0xd4>
 8004ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad6:	f200 8087 	bhi.w	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ade:	f000 8086 	beq.w	8004bee <HAL_TIM_ConfigClockSource+0x172>
 8004ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae6:	d87f      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae8:	2b70      	cmp	r3, #112	@ 0x70
 8004aea:	d01a      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0xa6>
 8004aec:	2b70      	cmp	r3, #112	@ 0x70
 8004aee:	d87b      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af0:	2b60      	cmp	r3, #96	@ 0x60
 8004af2:	d050      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x11a>
 8004af4:	2b60      	cmp	r3, #96	@ 0x60
 8004af6:	d877      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af8:	2b50      	cmp	r3, #80	@ 0x50
 8004afa:	d03c      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0xfa>
 8004afc:	2b50      	cmp	r3, #80	@ 0x50
 8004afe:	d873      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b00:	2b40      	cmp	r3, #64	@ 0x40
 8004b02:	d058      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x13a>
 8004b04:	2b40      	cmp	r3, #64	@ 0x40
 8004b06:	d86f      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b08:	2b30      	cmp	r3, #48	@ 0x30
 8004b0a:	d064      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b0c:	2b30      	cmp	r3, #48	@ 0x30
 8004b0e:	d86b      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d060      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d867      	bhi.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d05c      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d05a      	beq.n	8004bd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b20:	e062      	b.n	8004be8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b32:	f000 fbf3 	bl	800531c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	609a      	str	r2, [r3, #8]
      break;
 8004b4e:	e04f      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b60:	f000 fbdc 	bl	800531c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b72:	609a      	str	r2, [r3, #8]
      break;
 8004b74:	e03c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b82:	461a      	mov	r2, r3
 8004b84:	f000 faa0 	bl	80050c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2150      	movs	r1, #80	@ 0x50
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fbaa 	bl	80052e8 <TIM_ITRx_SetConfig>
      break;
 8004b94:	e02c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f000 fafa 	bl	800519c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2160      	movs	r1, #96	@ 0x60
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fb9a 	bl	80052e8 <TIM_ITRx_SetConfig>
      break;
 8004bb4:	e01c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f000 fa80 	bl	80050c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2140      	movs	r1, #64	@ 0x40
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fb8a 	bl	80052e8 <TIM_ITRx_SetConfig>
      break;
 8004bd4:	e00c      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f000 fb81 	bl	80052e8 <TIM_ITRx_SetConfig>
      break;
 8004be6:	e003      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
      break;
 8004bec:	e000      	b.n	8004bf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr

08004c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr

08004c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a29      	ldr	r2, [pc, #164]	@ (8004cf8 <TIM_Base_SetConfig+0xb8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00b      	beq.n	8004c70 <TIM_Base_SetConfig+0x30>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c5e:	d007      	beq.n	8004c70 <TIM_Base_SetConfig+0x30>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a26      	ldr	r2, [pc, #152]	@ (8004cfc <TIM_Base_SetConfig+0xbc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_Base_SetConfig+0x30>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a25      	ldr	r2, [pc, #148]	@ (8004d00 <TIM_Base_SetConfig+0xc0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d108      	bne.n	8004c82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a1c      	ldr	r2, [pc, #112]	@ (8004cf8 <TIM_Base_SetConfig+0xb8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00b      	beq.n	8004ca2 <TIM_Base_SetConfig+0x62>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c90:	d007      	beq.n	8004ca2 <TIM_Base_SetConfig+0x62>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a19      	ldr	r2, [pc, #100]	@ (8004cfc <TIM_Base_SetConfig+0xbc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d003      	beq.n	8004ca2 <TIM_Base_SetConfig+0x62>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a18      	ldr	r2, [pc, #96]	@ (8004d00 <TIM_Base_SetConfig+0xc0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d108      	bne.n	8004cb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a07      	ldr	r2, [pc, #28]	@ (8004cf8 <TIM_Base_SetConfig+0xb8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d103      	bne.n	8004ce8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	615a      	str	r2, [r3, #20]
}
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr
 8004cf8:	40012c00 	.word	0x40012c00
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40000800 	.word	0x40000800

08004d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f023 0201 	bic.w	r2, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0303 	bic.w	r3, r3, #3
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f023 0302 	bic.w	r3, r3, #2
 8004d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004dcc <TIM_OC1_SetConfig+0xc8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10c      	bne.n	8004d7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f023 0308 	bic.w	r3, r3, #8
 8004d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f023 0304 	bic.w	r3, r3, #4
 8004d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a13      	ldr	r2, [pc, #76]	@ (8004dcc <TIM_OC1_SetConfig+0xc8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d111      	bne.n	8004da6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	621a      	str	r2, [r3, #32]
}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40012c00 	.word	0x40012c00

08004dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f023 0210 	bic.w	r2, r3, #16
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f023 0320 	bic.w	r3, r3, #32
 8004e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea0 <TIM_OC2_SetConfig+0xd0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10d      	bne.n	8004e4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a14      	ldr	r2, [pc, #80]	@ (8004ea0 <TIM_OC2_SetConfig+0xd0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d113      	bne.n	8004e7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr
 8004ea0:	40012c00 	.word	0x40012c00

08004ea4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0303 	bic.w	r3, r3, #3
 8004eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	021b      	lsls	r3, r3, #8
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f74 <TIM_OC3_SetConfig+0xd0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d10d      	bne.n	8004f1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a14      	ldr	r2, [pc, #80]	@ (8004f74 <TIM_OC3_SetConfig+0xd0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d113      	bne.n	8004f4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	621a      	str	r2, [r3, #32]
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40012c00 	.word	0x40012c00

08004f78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	031b      	lsls	r3, r3, #12
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a0f      	ldr	r2, [pc, #60]	@ (8005010 <TIM_OC4_SetConfig+0x98>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d109      	bne.n	8004fec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	019b      	lsls	r3, r3, #6
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	621a      	str	r2, [r3, #32]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr
 8005010:	40012c00 	.word	0x40012c00

08005014 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f023 0201 	bic.w	r2, r3, #1
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a1f      	ldr	r2, [pc, #124]	@ (80050bc <TIM_TI1_SetConfig+0xa8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00b      	beq.n	800505a <TIM_TI1_SetConfig+0x46>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005048:	d007      	beq.n	800505a <TIM_TI1_SetConfig+0x46>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4a1c      	ldr	r2, [pc, #112]	@ (80050c0 <TIM_TI1_SetConfig+0xac>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d003      	beq.n	800505a <TIM_TI1_SetConfig+0x46>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4a1b      	ldr	r2, [pc, #108]	@ (80050c4 <TIM_TI1_SetConfig+0xb0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d101      	bne.n	800505e <TIM_TI1_SetConfig+0x4a>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <TIM_TI1_SetConfig+0x4c>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f023 0303 	bic.w	r3, r3, #3
 800506a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	e003      	b.n	800507e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005084:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	b2db      	uxtb	r3, r3
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f023 030a 	bic.w	r3, r3, #10
 8005098:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f003 030a 	and.w	r3, r3, #10
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40000400 	.word	0x40000400
 80050c4:	40000800 	.word	0x40000800

080050c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f023 0201 	bic.w	r2, r3, #1
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f023 030a 	bic.w	r3, r3, #10
 8005104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr

08005124 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	f023 0210 	bic.w	r2, r3, #16
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005150:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	031b      	lsls	r3, r3, #12
 8005168:	b29b      	uxth	r3, r3
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005176:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	621a      	str	r2, [r3, #32]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr

0800519c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f023 0210 	bic.w	r2, r3, #16
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	031b      	lsls	r3, r3, #12
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	621a      	str	r2, [r3, #32]
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b087      	sub	sp, #28
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f023 0303 	bic.w	r3, r3, #3
 8005226:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005236:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	b2db      	uxtb	r3, r3
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800524a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800529c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052ae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	031b      	lsls	r3, r3, #12
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052c2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	031b      	lsls	r3, r3, #12
 80052c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr

080052e8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	f043 0307 	orr.w	r3, r3, #7
 800530a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	609a      	str	r2, [r3, #8]
}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	021a      	lsls	r2, r3, #8
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	431a      	orrs	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4313      	orrs	r3, r2
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	609a      	str	r2, [r3, #8]
}
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr

0800535a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800535a:	b480      	push	{r7}
 800535c:	b087      	sub	sp, #28
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	2201      	movs	r2, #1
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a1a      	ldr	r2, [r3, #32]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	43db      	mvns	r3, r3
 800537c:	401a      	ands	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1a      	ldr	r2, [r3, #32]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	fa01 f303 	lsl.w	r3, r1, r3
 8005392:	431a      	orrs	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	621a      	str	r2, [r3, #32]
}
 8005398:	bf00      	nop
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr
	...

080053a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e046      	b.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a16      	ldr	r2, [pc, #88]	@ (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00e      	beq.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005408:	d009      	beq.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a12      	ldr	r2, [pc, #72]	@ (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d004      	beq.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a10      	ldr	r2, [pc, #64]	@ (800545c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d10c      	bne.n	8005438 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	4313      	orrs	r3, r2
 800542e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800

08005460 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005478:	2302      	movs	r3, #2
 800547a:	e03d      	b.n	80054f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr

08005502 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr

08005526 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e042      	b.n	80055be <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d106      	bne.n	8005552 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7fc fff3 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2224      	movs	r2, #36	@ 0x24
 8005556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005568:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fd0a 	bl	8005f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800557e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800558e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800559e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	4613      	mov	r3, r2
 80055d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d121      	bne.n	8005624 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <HAL_UART_Transmit_IT+0x26>
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e01a      	b.n	8005626 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	88fa      	ldrh	r2, [r7, #6]
 8005600:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2221      	movs	r2, #33	@ 0x21
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800561e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	e000      	b.n	8005626 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005624:	2302      	movs	r3, #2
  }
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr

08005630 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	4613      	mov	r3, r2
 800563c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b20      	cmp	r3, #32
 8005648:	d112      	bne.n	8005670 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <HAL_UART_Receive_IT+0x26>
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e00b      	b.n	8005672 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	461a      	mov	r2, r3
 8005664:	68b9      	ldr	r1, [r7, #8]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fab7 	bl	8005bda <UART_Start_Receive_IT>
 800566c:	4603      	mov	r3, r0
 800566e:	e000      	b.n	8005672 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005670:	2302      	movs	r3, #2
  }
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b0ba      	sub	sp, #232	@ 0xe8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80056ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10f      	bne.n	80056e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_UART_IRQHandler+0x66>
 80056ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fb93 	bl	8005e06 <UART_Receive_IT>
      return;
 80056e0:	e25b      	b.n	8005b9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 80de 	beq.w	80058a8 <HAL_UART_IRQHandler+0x22c>
 80056ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d106      	bne.n	8005706 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 80d1 	beq.w	80058a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <HAL_UART_IRQHandler+0xae>
 8005712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d005      	beq.n	800572a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005722:	f043 0201 	orr.w	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800572a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00b      	beq.n	800574e <HAL_UART_IRQHandler+0xd2>
 8005736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005746:	f043 0202 	orr.w	r2, r3, #2
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800574e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00b      	beq.n	8005772 <HAL_UART_IRQHandler+0xf6>
 800575a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576a:	f043 0204 	orr.w	r2, r3, #4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d011      	beq.n	80057a2 <HAL_UART_IRQHandler+0x126>
 800577e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005782:	f003 0320 	and.w	r3, r3, #32
 8005786:	2b00      	cmp	r3, #0
 8005788:	d105      	bne.n	8005796 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800578a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579a:	f043 0208 	orr.w	r2, r3, #8
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 81f2 	beq.w	8005b90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d008      	beq.n	80057ca <HAL_UART_IRQHandler+0x14e>
 80057b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fb1e 	bl	8005e06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bf14      	ite	ne
 80057d8:	2301      	movne	r3, #1
 80057da:	2300      	moveq	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d103      	bne.n	80057f6 <HAL_UART_IRQHandler+0x17a>
 80057ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d04f      	beq.n	8005896 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fa28 	bl	8005c4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d041      	beq.n	800588e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3314      	adds	r3, #20
 8005810:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005820:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005828:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3314      	adds	r3, #20
 8005832:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005836:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800583a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800584e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1d9      	bne.n	800580a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d013      	beq.n	8005886 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005862:	4a7e      	ldr	r2, [pc, #504]	@ (8005a5c <HAL_UART_IRQHandler+0x3e0>)
 8005864:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586a:	4618      	mov	r0, r3
 800586c:	f7fd f8d4 	bl	8002a18 <HAL_DMA_Abort_IT>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d016      	beq.n	80058a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005880:	4610      	mov	r0, r2
 8005882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005884:	e00e      	b.n	80058a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f993 	bl	8005bb2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	e00a      	b.n	80058a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f98f 	bl	8005bb2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005894:	e006      	b.n	80058a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f98b 	bl	8005bb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80058a2:	e175      	b.n	8005b90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a4:	bf00      	nop
    return;
 80058a6:	e173      	b.n	8005b90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	f040 814f 	bne.w	8005b50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 8148 	beq.w	8005b50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8141 	beq.w	8005b50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058ce:	2300      	movs	r3, #0
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60bb      	str	r3, [r7, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 80b6 	beq.w	8005a60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005900:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8145 	beq.w	8005b94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800590e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005912:	429a      	cmp	r2, r3
 8005914:	f080 813e 	bcs.w	8005b94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800591e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	2b20      	cmp	r3, #32
 8005928:	f000 8088 	beq.w	8005a3c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	330c      	adds	r3, #12
 8005932:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005942:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005946:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800594a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005958:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800595c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005964:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005970:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1d9      	bne.n	800592c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005988:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800598a:	f023 0301 	bic.w	r3, r3, #1
 800598e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3314      	adds	r3, #20
 8005998:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800599c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e1      	bne.n	8005978 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3314      	adds	r3, #20
 80059ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3314      	adds	r3, #20
 80059d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059e0:	e841 2300 	strex	r3, r2, [r1]
 80059e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e3      	bne.n	80059b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	330c      	adds	r3, #12
 8005a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a0c:	f023 0310 	bic.w	r3, r3, #16
 8005a10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a1e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a20:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a26:	e841 2300 	strex	r3, r2, [r1]
 8005a2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e3      	bne.n	80059fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fc ffb3 	bl	80029a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f8b6 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a58:	e09c      	b.n	8005b94 <HAL_UART_IRQHandler+0x518>
 8005a5a:	bf00      	nop
 8005a5c:	08005d11 	.word	0x08005d11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 808e 	beq.w	8005b98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 8089 	beq.w	8005b98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005aaa:	647a      	str	r2, [r7, #68]	@ 0x44
 8005aac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ab0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e3      	bne.n	8005a86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3314      	adds	r3, #20
 8005ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	f023 0301 	bic.w	r3, r3, #1
 8005ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3314      	adds	r3, #20
 8005ade:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ae2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e3      	bne.n	8005abe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0310 	bic.w	r3, r3, #16
 8005b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b28:	61fa      	str	r2, [r7, #28]
 8005b2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	69b9      	ldr	r1, [r7, #24]
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	617b      	str	r3, [r7, #20]
   return(result);
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e3      	bne.n	8005b04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f83b 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b4e:	e023      	b.n	8005b98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d009      	beq.n	8005b70 <HAL_UART_IRQHandler+0x4f4>
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f8e5 	bl	8005d38 <UART_Transmit_IT>
    return;
 8005b6e:	e014      	b.n	8005b9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00e      	beq.n	8005b9a <HAL_UART_IRQHandler+0x51e>
 8005b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d008      	beq.n	8005b9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f924 	bl	8005dd6 <UART_EndTransmit_IT>
    return;
 8005b8e:	e004      	b.n	8005b9a <HAL_UART_IRQHandler+0x51e>
    return;
 8005b90:	bf00      	nop
 8005b92:	e002      	b.n	8005b9a <HAL_UART_IRQHandler+0x51e>
      return;
 8005b94:	bf00      	nop
 8005b96:	e000      	b.n	8005b9a <HAL_UART_IRQHandler+0x51e>
      return;
 8005b98:	bf00      	nop
  }
}
 8005b9a:	37e8      	adds	r7, #232	@ 0xe8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr

08005bda <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	4613      	mov	r3, r2
 8005be6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	88fa      	ldrh	r2, [r7, #6]
 8005bf8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2222      	movs	r2, #34	@ 0x22
 8005c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c1e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695a      	ldr	r2, [r3, #20]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0220 	orr.w	r2, r2, #32
 8005c3e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bc80      	pop	{r7}
 8005c4a:	4770      	bx	lr

08005c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b095      	sub	sp, #84	@ 0x54
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	330c      	adds	r3, #12
 8005c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c74:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e5      	bne.n	8005c54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3314      	adds	r3, #20
 8005c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	e853 3f00 	ldrex	r3, [r3]
 8005c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f023 0301 	bic.w	r3, r3, #1
 8005c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3314      	adds	r3, #20
 8005ca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e5      	bne.n	8005c88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d119      	bne.n	8005cf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	e853 3f00 	ldrex	r3, [r3]
 8005cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f023 0310 	bic.w	r3, r3, #16
 8005cda:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ce4:	61ba      	str	r2, [r7, #24]
 8005ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce8:	6979      	ldr	r1, [r7, #20]
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	e841 2300 	strex	r3, r2, [r1]
 8005cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e5      	bne.n	8005cc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d06:	bf00      	nop
 8005d08:	3754      	adds	r7, #84	@ 0x54
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr

08005d10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7ff ff41 	bl	8005bb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b21      	cmp	r3, #33	@ 0x21
 8005d4a:	d13e      	bne.n	8005dca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d54:	d114      	bne.n	8005d80 <UART_Transmit_IT+0x48>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d110      	bne.n	8005d80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	1c9a      	adds	r2, r3, #2
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	621a      	str	r2, [r3, #32]
 8005d7e:	e008      	b.n	8005d92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	1c59      	adds	r1, r3, #1
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6211      	str	r1, [r2, #32]
 8005d8a:	781a      	ldrb	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10f      	bne.n	8005dc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005db4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e000      	b.n	8005dcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005dca:	2302      	movs	r3, #2
  }
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bc80      	pop	{r7}
 8005dd4:	4770      	bx	lr

08005dd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff fed2 	bl	8005ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b08c      	sub	sp, #48	@ 0x30
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b22      	cmp	r3, #34	@ 0x22
 8005e18:	f040 80ae 	bne.w	8005f78 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e24:	d117      	bne.n	8005e56 <UART_Receive_IT+0x50>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d113      	bne.n	8005e56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e36:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4e:	1c9a      	adds	r2, r3, #2
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e54:	e026      	b.n	8005ea4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e68:	d007      	beq.n	8005e7a <UART_Receive_IT+0x74>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10a      	bne.n	8005e88 <UART_Receive_IT+0x82>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	e008      	b.n	8005e9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d15d      	bne.n	8005f74 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0220 	bic.w	r2, r2, #32
 8005ec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ed6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695a      	ldr	r2, [r3, #20]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0201 	bic.w	r2, r2, #1
 8005ee6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d135      	bne.n	8005f6a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	613b      	str	r3, [r7, #16]
   return(result);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f023 0310 	bic.w	r3, r3, #16
 8005f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	330c      	adds	r3, #12
 8005f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f24:	623a      	str	r2, [r7, #32]
 8005f26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	69f9      	ldr	r1, [r7, #28]
 8005f2a:	6a3a      	ldr	r2, [r7, #32]
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e5      	bne.n	8005f04 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0310 	and.w	r3, r3, #16
 8005f42:	2b10      	cmp	r3, #16
 8005f44:	d10a      	bne.n	8005f5c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff fe2e 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
 8005f68:	e002      	b.n	8005f70 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fb faec 	bl	8001548 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e002      	b.n	8005f7a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e000      	b.n	8005f7a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f78:	2302      	movs	r3, #2
  }
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3730      	adds	r7, #48	@ 0x30
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005fbe:	f023 030c 	bic.w	r3, r3, #12
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6812      	ldr	r2, [r2, #0]
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8006098 <UART_SetConfig+0x114>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d103      	bne.n	8005ff4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005fec:	f7fd ff8a 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	e002      	b.n	8005ffa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ff4:	f7fd ff72 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 8005ff8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009a      	lsls	r2, r3, #2
 8006004:	441a      	add	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006010:	4a22      	ldr	r2, [pc, #136]	@ (800609c <UART_SetConfig+0x118>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	095b      	lsrs	r3, r3, #5
 8006018:	0119      	lsls	r1, r3, #4
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	009a      	lsls	r2, r3, #2
 8006024:	441a      	add	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006030:	4b1a      	ldr	r3, [pc, #104]	@ (800609c <UART_SetConfig+0x118>)
 8006032:	fba3 0302 	umull	r0, r3, r3, r2
 8006036:	095b      	lsrs	r3, r3, #5
 8006038:	2064      	movs	r0, #100	@ 0x64
 800603a:	fb00 f303 	mul.w	r3, r0, r3
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	3332      	adds	r3, #50	@ 0x32
 8006044:	4a15      	ldr	r2, [pc, #84]	@ (800609c <UART_SetConfig+0x118>)
 8006046:	fba2 2303 	umull	r2, r3, r2, r3
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006050:	4419      	add	r1, r3
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009a      	lsls	r2, r3, #2
 800605c:	441a      	add	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	fbb2 f2f3 	udiv	r2, r2, r3
 8006068:	4b0c      	ldr	r3, [pc, #48]	@ (800609c <UART_SetConfig+0x118>)
 800606a:	fba3 0302 	umull	r0, r3, r3, r2
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	2064      	movs	r0, #100	@ 0x64
 8006072:	fb00 f303 	mul.w	r3, r0, r3
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	3332      	adds	r3, #50	@ 0x32
 800607c:	4a07      	ldr	r2, [pc, #28]	@ (800609c <UART_SetConfig+0x118>)
 800607e:	fba2 2303 	umull	r2, r3, r2, r3
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	f003 020f 	and.w	r2, r3, #15
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	440a      	add	r2, r1
 800608e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006090:	bf00      	nop
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40013800 	.word	0x40013800
 800609c:	51eb851f 	.word	0x51eb851f

080060a0 <__cvt>:
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a6:	461d      	mov	r5, r3
 80060a8:	bfbb      	ittet	lt
 80060aa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80060ae:	461d      	movlt	r5, r3
 80060b0:	2300      	movge	r3, #0
 80060b2:	232d      	movlt	r3, #45	@ 0x2d
 80060b4:	b088      	sub	sp, #32
 80060b6:	4614      	mov	r4, r2
 80060b8:	bfb8      	it	lt
 80060ba:	4614      	movlt	r4, r2
 80060bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80060be:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80060c0:	7013      	strb	r3, [r2, #0]
 80060c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80060c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80060c8:	f023 0820 	bic.w	r8, r3, #32
 80060cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80060d0:	d005      	beq.n	80060de <__cvt+0x3e>
 80060d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80060d6:	d100      	bne.n	80060da <__cvt+0x3a>
 80060d8:	3601      	adds	r6, #1
 80060da:	2302      	movs	r3, #2
 80060dc:	e000      	b.n	80060e0 <__cvt+0x40>
 80060de:	2303      	movs	r3, #3
 80060e0:	aa07      	add	r2, sp, #28
 80060e2:	9204      	str	r2, [sp, #16]
 80060e4:	aa06      	add	r2, sp, #24
 80060e6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80060ea:	e9cd 3600 	strd	r3, r6, [sp]
 80060ee:	4622      	mov	r2, r4
 80060f0:	462b      	mov	r3, r5
 80060f2:	f001 f891 	bl	8007218 <_dtoa_r>
 80060f6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80060fa:	4607      	mov	r7, r0
 80060fc:	d119      	bne.n	8006132 <__cvt+0x92>
 80060fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006100:	07db      	lsls	r3, r3, #31
 8006102:	d50e      	bpl.n	8006122 <__cvt+0x82>
 8006104:	eb00 0906 	add.w	r9, r0, r6
 8006108:	2200      	movs	r2, #0
 800610a:	2300      	movs	r3, #0
 800610c:	4620      	mov	r0, r4
 800610e:	4629      	mov	r1, r5
 8006110:	f7fa fc4a 	bl	80009a8 <__aeabi_dcmpeq>
 8006114:	b108      	cbz	r0, 800611a <__cvt+0x7a>
 8006116:	f8cd 901c 	str.w	r9, [sp, #28]
 800611a:	2230      	movs	r2, #48	@ 0x30
 800611c:	9b07      	ldr	r3, [sp, #28]
 800611e:	454b      	cmp	r3, r9
 8006120:	d31e      	bcc.n	8006160 <__cvt+0xc0>
 8006122:	4638      	mov	r0, r7
 8006124:	9b07      	ldr	r3, [sp, #28]
 8006126:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006128:	1bdb      	subs	r3, r3, r7
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	b008      	add	sp, #32
 800612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006132:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006136:	eb00 0906 	add.w	r9, r0, r6
 800613a:	d1e5      	bne.n	8006108 <__cvt+0x68>
 800613c:	7803      	ldrb	r3, [r0, #0]
 800613e:	2b30      	cmp	r3, #48	@ 0x30
 8006140:	d10a      	bne.n	8006158 <__cvt+0xb8>
 8006142:	2200      	movs	r2, #0
 8006144:	2300      	movs	r3, #0
 8006146:	4620      	mov	r0, r4
 8006148:	4629      	mov	r1, r5
 800614a:	f7fa fc2d 	bl	80009a8 <__aeabi_dcmpeq>
 800614e:	b918      	cbnz	r0, 8006158 <__cvt+0xb8>
 8006150:	f1c6 0601 	rsb	r6, r6, #1
 8006154:	f8ca 6000 	str.w	r6, [sl]
 8006158:	f8da 3000 	ldr.w	r3, [sl]
 800615c:	4499      	add	r9, r3
 800615e:	e7d3      	b.n	8006108 <__cvt+0x68>
 8006160:	1c59      	adds	r1, r3, #1
 8006162:	9107      	str	r1, [sp, #28]
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	e7d9      	b.n	800611c <__cvt+0x7c>

08006168 <__exponent>:
 8006168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800616a:	2900      	cmp	r1, #0
 800616c:	bfb6      	itet	lt
 800616e:	232d      	movlt	r3, #45	@ 0x2d
 8006170:	232b      	movge	r3, #43	@ 0x2b
 8006172:	4249      	neglt	r1, r1
 8006174:	2909      	cmp	r1, #9
 8006176:	7002      	strb	r2, [r0, #0]
 8006178:	7043      	strb	r3, [r0, #1]
 800617a:	dd29      	ble.n	80061d0 <__exponent+0x68>
 800617c:	f10d 0307 	add.w	r3, sp, #7
 8006180:	461d      	mov	r5, r3
 8006182:	270a      	movs	r7, #10
 8006184:	fbb1 f6f7 	udiv	r6, r1, r7
 8006188:	461a      	mov	r2, r3
 800618a:	fb07 1416 	mls	r4, r7, r6, r1
 800618e:	3430      	adds	r4, #48	@ 0x30
 8006190:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006194:	460c      	mov	r4, r1
 8006196:	2c63      	cmp	r4, #99	@ 0x63
 8006198:	4631      	mov	r1, r6
 800619a:	f103 33ff 	add.w	r3, r3, #4294967295
 800619e:	dcf1      	bgt.n	8006184 <__exponent+0x1c>
 80061a0:	3130      	adds	r1, #48	@ 0x30
 80061a2:	1e94      	subs	r4, r2, #2
 80061a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80061a8:	4623      	mov	r3, r4
 80061aa:	1c41      	adds	r1, r0, #1
 80061ac:	42ab      	cmp	r3, r5
 80061ae:	d30a      	bcc.n	80061c6 <__exponent+0x5e>
 80061b0:	f10d 0309 	add.w	r3, sp, #9
 80061b4:	1a9b      	subs	r3, r3, r2
 80061b6:	42ac      	cmp	r4, r5
 80061b8:	bf88      	it	hi
 80061ba:	2300      	movhi	r3, #0
 80061bc:	3302      	adds	r3, #2
 80061be:	4403      	add	r3, r0
 80061c0:	1a18      	subs	r0, r3, r0
 80061c2:	b003      	add	sp, #12
 80061c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80061ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 80061ce:	e7ed      	b.n	80061ac <__exponent+0x44>
 80061d0:	2330      	movs	r3, #48	@ 0x30
 80061d2:	3130      	adds	r1, #48	@ 0x30
 80061d4:	7083      	strb	r3, [r0, #2]
 80061d6:	70c1      	strb	r1, [r0, #3]
 80061d8:	1d03      	adds	r3, r0, #4
 80061da:	e7f1      	b.n	80061c0 <__exponent+0x58>

080061dc <_printf_float>:
 80061dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e0:	b091      	sub	sp, #68	@ 0x44
 80061e2:	460c      	mov	r4, r1
 80061e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80061e8:	4616      	mov	r6, r2
 80061ea:	461f      	mov	r7, r3
 80061ec:	4605      	mov	r5, r0
 80061ee:	f000 fef1 	bl	8006fd4 <_localeconv_r>
 80061f2:	6803      	ldr	r3, [r0, #0]
 80061f4:	4618      	mov	r0, r3
 80061f6:	9308      	str	r3, [sp, #32]
 80061f8:	f7f9 ffaa 	bl	8000150 <strlen>
 80061fc:	2300      	movs	r3, #0
 80061fe:	930e      	str	r3, [sp, #56]	@ 0x38
 8006200:	f8d8 3000 	ldr.w	r3, [r8]
 8006204:	9009      	str	r0, [sp, #36]	@ 0x24
 8006206:	3307      	adds	r3, #7
 8006208:	f023 0307 	bic.w	r3, r3, #7
 800620c:	f103 0208 	add.w	r2, r3, #8
 8006210:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006214:	f8d4 b000 	ldr.w	fp, [r4]
 8006218:	f8c8 2000 	str.w	r2, [r8]
 800621c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006220:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006224:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006226:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800622a:	f04f 32ff 	mov.w	r2, #4294967295
 800622e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006232:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006236:	4b9c      	ldr	r3, [pc, #624]	@ (80064a8 <_printf_float+0x2cc>)
 8006238:	f7fa fbe8 	bl	8000a0c <__aeabi_dcmpun>
 800623c:	bb70      	cbnz	r0, 800629c <_printf_float+0xc0>
 800623e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006242:	f04f 32ff 	mov.w	r2, #4294967295
 8006246:	4b98      	ldr	r3, [pc, #608]	@ (80064a8 <_printf_float+0x2cc>)
 8006248:	f7fa fbc2 	bl	80009d0 <__aeabi_dcmple>
 800624c:	bb30      	cbnz	r0, 800629c <_printf_float+0xc0>
 800624e:	2200      	movs	r2, #0
 8006250:	2300      	movs	r3, #0
 8006252:	4640      	mov	r0, r8
 8006254:	4649      	mov	r1, r9
 8006256:	f7fa fbb1 	bl	80009bc <__aeabi_dcmplt>
 800625a:	b110      	cbz	r0, 8006262 <_printf_float+0x86>
 800625c:	232d      	movs	r3, #45	@ 0x2d
 800625e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006262:	4a92      	ldr	r2, [pc, #584]	@ (80064ac <_printf_float+0x2d0>)
 8006264:	4b92      	ldr	r3, [pc, #584]	@ (80064b0 <_printf_float+0x2d4>)
 8006266:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800626a:	bf94      	ite	ls
 800626c:	4690      	movls	r8, r2
 800626e:	4698      	movhi	r8, r3
 8006270:	2303      	movs	r3, #3
 8006272:	f04f 0900 	mov.w	r9, #0
 8006276:	6123      	str	r3, [r4, #16]
 8006278:	f02b 0304 	bic.w	r3, fp, #4
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	4633      	mov	r3, r6
 8006280:	4621      	mov	r1, r4
 8006282:	4628      	mov	r0, r5
 8006284:	9700      	str	r7, [sp, #0]
 8006286:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006288:	f000 f9d4 	bl	8006634 <_printf_common>
 800628c:	3001      	adds	r0, #1
 800628e:	f040 8090 	bne.w	80063b2 <_printf_float+0x1d6>
 8006292:	f04f 30ff 	mov.w	r0, #4294967295
 8006296:	b011      	add	sp, #68	@ 0x44
 8006298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629c:	4642      	mov	r2, r8
 800629e:	464b      	mov	r3, r9
 80062a0:	4640      	mov	r0, r8
 80062a2:	4649      	mov	r1, r9
 80062a4:	f7fa fbb2 	bl	8000a0c <__aeabi_dcmpun>
 80062a8:	b148      	cbz	r0, 80062be <_printf_float+0xe2>
 80062aa:	464b      	mov	r3, r9
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bfb8      	it	lt
 80062b0:	232d      	movlt	r3, #45	@ 0x2d
 80062b2:	4a80      	ldr	r2, [pc, #512]	@ (80064b4 <_printf_float+0x2d8>)
 80062b4:	bfb8      	it	lt
 80062b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80062ba:	4b7f      	ldr	r3, [pc, #508]	@ (80064b8 <_printf_float+0x2dc>)
 80062bc:	e7d3      	b.n	8006266 <_printf_float+0x8a>
 80062be:	6863      	ldr	r3, [r4, #4]
 80062c0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	d13f      	bne.n	8006348 <_printf_float+0x16c>
 80062c8:	2306      	movs	r3, #6
 80062ca:	6063      	str	r3, [r4, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80062d2:	6023      	str	r3, [r4, #0]
 80062d4:	9206      	str	r2, [sp, #24]
 80062d6:	aa0e      	add	r2, sp, #56	@ 0x38
 80062d8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80062dc:	aa0d      	add	r2, sp, #52	@ 0x34
 80062de:	9203      	str	r2, [sp, #12]
 80062e0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80062e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	4642      	mov	r2, r8
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	4628      	mov	r0, r5
 80062f0:	464b      	mov	r3, r9
 80062f2:	910a      	str	r1, [sp, #40]	@ 0x28
 80062f4:	f7ff fed4 	bl	80060a0 <__cvt>
 80062f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062fa:	4680      	mov	r8, r0
 80062fc:	2947      	cmp	r1, #71	@ 0x47
 80062fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006300:	d128      	bne.n	8006354 <_printf_float+0x178>
 8006302:	1cc8      	adds	r0, r1, #3
 8006304:	db02      	blt.n	800630c <_printf_float+0x130>
 8006306:	6863      	ldr	r3, [r4, #4]
 8006308:	4299      	cmp	r1, r3
 800630a:	dd40      	ble.n	800638e <_printf_float+0x1b2>
 800630c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006310:	fa5f fa8a 	uxtb.w	sl, sl
 8006314:	4652      	mov	r2, sl
 8006316:	3901      	subs	r1, #1
 8006318:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800631c:	910d      	str	r1, [sp, #52]	@ 0x34
 800631e:	f7ff ff23 	bl	8006168 <__exponent>
 8006322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006324:	4681      	mov	r9, r0
 8006326:	1813      	adds	r3, r2, r0
 8006328:	2a01      	cmp	r2, #1
 800632a:	6123      	str	r3, [r4, #16]
 800632c:	dc02      	bgt.n	8006334 <_printf_float+0x158>
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	07d2      	lsls	r2, r2, #31
 8006332:	d501      	bpl.n	8006338 <_printf_float+0x15c>
 8006334:	3301      	adds	r3, #1
 8006336:	6123      	str	r3, [r4, #16]
 8006338:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800633c:	2b00      	cmp	r3, #0
 800633e:	d09e      	beq.n	800627e <_printf_float+0xa2>
 8006340:	232d      	movs	r3, #45	@ 0x2d
 8006342:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006346:	e79a      	b.n	800627e <_printf_float+0xa2>
 8006348:	2947      	cmp	r1, #71	@ 0x47
 800634a:	d1bf      	bne.n	80062cc <_printf_float+0xf0>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1bd      	bne.n	80062cc <_printf_float+0xf0>
 8006350:	2301      	movs	r3, #1
 8006352:	e7ba      	b.n	80062ca <_printf_float+0xee>
 8006354:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006358:	d9dc      	bls.n	8006314 <_printf_float+0x138>
 800635a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800635e:	d118      	bne.n	8006392 <_printf_float+0x1b6>
 8006360:	2900      	cmp	r1, #0
 8006362:	6863      	ldr	r3, [r4, #4]
 8006364:	dd0b      	ble.n	800637e <_printf_float+0x1a2>
 8006366:	6121      	str	r1, [r4, #16]
 8006368:	b913      	cbnz	r3, 8006370 <_printf_float+0x194>
 800636a:	6822      	ldr	r2, [r4, #0]
 800636c:	07d0      	lsls	r0, r2, #31
 800636e:	d502      	bpl.n	8006376 <_printf_float+0x19a>
 8006370:	3301      	adds	r3, #1
 8006372:	440b      	add	r3, r1
 8006374:	6123      	str	r3, [r4, #16]
 8006376:	f04f 0900 	mov.w	r9, #0
 800637a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800637c:	e7dc      	b.n	8006338 <_printf_float+0x15c>
 800637e:	b913      	cbnz	r3, 8006386 <_printf_float+0x1aa>
 8006380:	6822      	ldr	r2, [r4, #0]
 8006382:	07d2      	lsls	r2, r2, #31
 8006384:	d501      	bpl.n	800638a <_printf_float+0x1ae>
 8006386:	3302      	adds	r3, #2
 8006388:	e7f4      	b.n	8006374 <_printf_float+0x198>
 800638a:	2301      	movs	r3, #1
 800638c:	e7f2      	b.n	8006374 <_printf_float+0x198>
 800638e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006394:	4299      	cmp	r1, r3
 8006396:	db05      	blt.n	80063a4 <_printf_float+0x1c8>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	6121      	str	r1, [r4, #16]
 800639c:	07d8      	lsls	r0, r3, #31
 800639e:	d5ea      	bpl.n	8006376 <_printf_float+0x19a>
 80063a0:	1c4b      	adds	r3, r1, #1
 80063a2:	e7e7      	b.n	8006374 <_printf_float+0x198>
 80063a4:	2900      	cmp	r1, #0
 80063a6:	bfcc      	ite	gt
 80063a8:	2201      	movgt	r2, #1
 80063aa:	f1c1 0202 	rsble	r2, r1, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	e7e0      	b.n	8006374 <_printf_float+0x198>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	055a      	lsls	r2, r3, #21
 80063b6:	d407      	bmi.n	80063c8 <_printf_float+0x1ec>
 80063b8:	6923      	ldr	r3, [r4, #16]
 80063ba:	4642      	mov	r2, r8
 80063bc:	4631      	mov	r1, r6
 80063be:	4628      	mov	r0, r5
 80063c0:	47b8      	blx	r7
 80063c2:	3001      	adds	r0, #1
 80063c4:	d12b      	bne.n	800641e <_printf_float+0x242>
 80063c6:	e764      	b.n	8006292 <_printf_float+0xb6>
 80063c8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063cc:	f240 80dc 	bls.w	8006588 <_printf_float+0x3ac>
 80063d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80063d4:	2200      	movs	r2, #0
 80063d6:	2300      	movs	r3, #0
 80063d8:	f7fa fae6 	bl	80009a8 <__aeabi_dcmpeq>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d033      	beq.n	8006448 <_printf_float+0x26c>
 80063e0:	2301      	movs	r3, #1
 80063e2:	4631      	mov	r1, r6
 80063e4:	4628      	mov	r0, r5
 80063e6:	4a35      	ldr	r2, [pc, #212]	@ (80064bc <_printf_float+0x2e0>)
 80063e8:	47b8      	blx	r7
 80063ea:	3001      	adds	r0, #1
 80063ec:	f43f af51 	beq.w	8006292 <_printf_float+0xb6>
 80063f0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80063f4:	4543      	cmp	r3, r8
 80063f6:	db02      	blt.n	80063fe <_printf_float+0x222>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	07d8      	lsls	r0, r3, #31
 80063fc:	d50f      	bpl.n	800641e <_printf_float+0x242>
 80063fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	47b8      	blx	r7
 8006408:	3001      	adds	r0, #1
 800640a:	f43f af42 	beq.w	8006292 <_printf_float+0xb6>
 800640e:	f04f 0900 	mov.w	r9, #0
 8006412:	f108 38ff 	add.w	r8, r8, #4294967295
 8006416:	f104 0a1a 	add.w	sl, r4, #26
 800641a:	45c8      	cmp	r8, r9
 800641c:	dc09      	bgt.n	8006432 <_printf_float+0x256>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	079b      	lsls	r3, r3, #30
 8006422:	f100 8102 	bmi.w	800662a <_printf_float+0x44e>
 8006426:	68e0      	ldr	r0, [r4, #12]
 8006428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800642a:	4298      	cmp	r0, r3
 800642c:	bfb8      	it	lt
 800642e:	4618      	movlt	r0, r3
 8006430:	e731      	b.n	8006296 <_printf_float+0xba>
 8006432:	2301      	movs	r3, #1
 8006434:	4652      	mov	r2, sl
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	f43f af28 	beq.w	8006292 <_printf_float+0xb6>
 8006442:	f109 0901 	add.w	r9, r9, #1
 8006446:	e7e8      	b.n	800641a <_printf_float+0x23e>
 8006448:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800644a:	2b00      	cmp	r3, #0
 800644c:	dc38      	bgt.n	80064c0 <_printf_float+0x2e4>
 800644e:	2301      	movs	r3, #1
 8006450:	4631      	mov	r1, r6
 8006452:	4628      	mov	r0, r5
 8006454:	4a19      	ldr	r2, [pc, #100]	@ (80064bc <_printf_float+0x2e0>)
 8006456:	47b8      	blx	r7
 8006458:	3001      	adds	r0, #1
 800645a:	f43f af1a 	beq.w	8006292 <_printf_float+0xb6>
 800645e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006462:	ea59 0303 	orrs.w	r3, r9, r3
 8006466:	d102      	bne.n	800646e <_printf_float+0x292>
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	07d9      	lsls	r1, r3, #31
 800646c:	d5d7      	bpl.n	800641e <_printf_float+0x242>
 800646e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006472:	4631      	mov	r1, r6
 8006474:	4628      	mov	r0, r5
 8006476:	47b8      	blx	r7
 8006478:	3001      	adds	r0, #1
 800647a:	f43f af0a 	beq.w	8006292 <_printf_float+0xb6>
 800647e:	f04f 0a00 	mov.w	sl, #0
 8006482:	f104 0b1a 	add.w	fp, r4, #26
 8006486:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006488:	425b      	negs	r3, r3
 800648a:	4553      	cmp	r3, sl
 800648c:	dc01      	bgt.n	8006492 <_printf_float+0x2b6>
 800648e:	464b      	mov	r3, r9
 8006490:	e793      	b.n	80063ba <_printf_float+0x1de>
 8006492:	2301      	movs	r3, #1
 8006494:	465a      	mov	r2, fp
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	f43f aef8 	beq.w	8006292 <_printf_float+0xb6>
 80064a2:	f10a 0a01 	add.w	sl, sl, #1
 80064a6:	e7ee      	b.n	8006486 <_printf_float+0x2aa>
 80064a8:	7fefffff 	.word	0x7fefffff
 80064ac:	0800b74a 	.word	0x0800b74a
 80064b0:	0800b74e 	.word	0x0800b74e
 80064b4:	0800b752 	.word	0x0800b752
 80064b8:	0800b756 	.word	0x0800b756
 80064bc:	0800b75a 	.word	0x0800b75a
 80064c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064c2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80064c6:	4553      	cmp	r3, sl
 80064c8:	bfa8      	it	ge
 80064ca:	4653      	movge	r3, sl
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	4699      	mov	r9, r3
 80064d0:	dc36      	bgt.n	8006540 <_printf_float+0x364>
 80064d2:	f04f 0b00 	mov.w	fp, #0
 80064d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064da:	f104 021a 	add.w	r2, r4, #26
 80064de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80064e2:	eba3 0309 	sub.w	r3, r3, r9
 80064e6:	455b      	cmp	r3, fp
 80064e8:	dc31      	bgt.n	800654e <_printf_float+0x372>
 80064ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064ec:	459a      	cmp	sl, r3
 80064ee:	dc3a      	bgt.n	8006566 <_printf_float+0x38a>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	07da      	lsls	r2, r3, #31
 80064f4:	d437      	bmi.n	8006566 <_printf_float+0x38a>
 80064f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064f8:	ebaa 0903 	sub.w	r9, sl, r3
 80064fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064fe:	ebaa 0303 	sub.w	r3, sl, r3
 8006502:	4599      	cmp	r9, r3
 8006504:	bfa8      	it	ge
 8006506:	4699      	movge	r9, r3
 8006508:	f1b9 0f00 	cmp.w	r9, #0
 800650c:	dc33      	bgt.n	8006576 <_printf_float+0x39a>
 800650e:	f04f 0800 	mov.w	r8, #0
 8006512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006516:	f104 0b1a 	add.w	fp, r4, #26
 800651a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800651c:	ebaa 0303 	sub.w	r3, sl, r3
 8006520:	eba3 0309 	sub.w	r3, r3, r9
 8006524:	4543      	cmp	r3, r8
 8006526:	f77f af7a 	ble.w	800641e <_printf_float+0x242>
 800652a:	2301      	movs	r3, #1
 800652c:	465a      	mov	r2, fp
 800652e:	4631      	mov	r1, r6
 8006530:	4628      	mov	r0, r5
 8006532:	47b8      	blx	r7
 8006534:	3001      	adds	r0, #1
 8006536:	f43f aeac 	beq.w	8006292 <_printf_float+0xb6>
 800653a:	f108 0801 	add.w	r8, r8, #1
 800653e:	e7ec      	b.n	800651a <_printf_float+0x33e>
 8006540:	4642      	mov	r2, r8
 8006542:	4631      	mov	r1, r6
 8006544:	4628      	mov	r0, r5
 8006546:	47b8      	blx	r7
 8006548:	3001      	adds	r0, #1
 800654a:	d1c2      	bne.n	80064d2 <_printf_float+0x2f6>
 800654c:	e6a1      	b.n	8006292 <_printf_float+0xb6>
 800654e:	2301      	movs	r3, #1
 8006550:	4631      	mov	r1, r6
 8006552:	4628      	mov	r0, r5
 8006554:	920a      	str	r2, [sp, #40]	@ 0x28
 8006556:	47b8      	blx	r7
 8006558:	3001      	adds	r0, #1
 800655a:	f43f ae9a 	beq.w	8006292 <_printf_float+0xb6>
 800655e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006560:	f10b 0b01 	add.w	fp, fp, #1
 8006564:	e7bb      	b.n	80064de <_printf_float+0x302>
 8006566:	4631      	mov	r1, r6
 8006568:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800656c:	4628      	mov	r0, r5
 800656e:	47b8      	blx	r7
 8006570:	3001      	adds	r0, #1
 8006572:	d1c0      	bne.n	80064f6 <_printf_float+0x31a>
 8006574:	e68d      	b.n	8006292 <_printf_float+0xb6>
 8006576:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006578:	464b      	mov	r3, r9
 800657a:	4631      	mov	r1, r6
 800657c:	4628      	mov	r0, r5
 800657e:	4442      	add	r2, r8
 8006580:	47b8      	blx	r7
 8006582:	3001      	adds	r0, #1
 8006584:	d1c3      	bne.n	800650e <_printf_float+0x332>
 8006586:	e684      	b.n	8006292 <_printf_float+0xb6>
 8006588:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800658c:	f1ba 0f01 	cmp.w	sl, #1
 8006590:	dc01      	bgt.n	8006596 <_printf_float+0x3ba>
 8006592:	07db      	lsls	r3, r3, #31
 8006594:	d536      	bpl.n	8006604 <_printf_float+0x428>
 8006596:	2301      	movs	r3, #1
 8006598:	4642      	mov	r2, r8
 800659a:	4631      	mov	r1, r6
 800659c:	4628      	mov	r0, r5
 800659e:	47b8      	blx	r7
 80065a0:	3001      	adds	r0, #1
 80065a2:	f43f ae76 	beq.w	8006292 <_printf_float+0xb6>
 80065a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80065aa:	4631      	mov	r1, r6
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b8      	blx	r7
 80065b0:	3001      	adds	r0, #1
 80065b2:	f43f ae6e 	beq.w	8006292 <_printf_float+0xb6>
 80065b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80065ba:	2200      	movs	r2, #0
 80065bc:	2300      	movs	r3, #0
 80065be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065c2:	f7fa f9f1 	bl	80009a8 <__aeabi_dcmpeq>
 80065c6:	b9c0      	cbnz	r0, 80065fa <_printf_float+0x41e>
 80065c8:	4653      	mov	r3, sl
 80065ca:	f108 0201 	add.w	r2, r8, #1
 80065ce:	4631      	mov	r1, r6
 80065d0:	4628      	mov	r0, r5
 80065d2:	47b8      	blx	r7
 80065d4:	3001      	adds	r0, #1
 80065d6:	d10c      	bne.n	80065f2 <_printf_float+0x416>
 80065d8:	e65b      	b.n	8006292 <_printf_float+0xb6>
 80065da:	2301      	movs	r3, #1
 80065dc:	465a      	mov	r2, fp
 80065de:	4631      	mov	r1, r6
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b8      	blx	r7
 80065e4:	3001      	adds	r0, #1
 80065e6:	f43f ae54 	beq.w	8006292 <_printf_float+0xb6>
 80065ea:	f108 0801 	add.w	r8, r8, #1
 80065ee:	45d0      	cmp	r8, sl
 80065f0:	dbf3      	blt.n	80065da <_printf_float+0x3fe>
 80065f2:	464b      	mov	r3, r9
 80065f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80065f8:	e6e0      	b.n	80063bc <_printf_float+0x1e0>
 80065fa:	f04f 0800 	mov.w	r8, #0
 80065fe:	f104 0b1a 	add.w	fp, r4, #26
 8006602:	e7f4      	b.n	80065ee <_printf_float+0x412>
 8006604:	2301      	movs	r3, #1
 8006606:	4642      	mov	r2, r8
 8006608:	e7e1      	b.n	80065ce <_printf_float+0x3f2>
 800660a:	2301      	movs	r3, #1
 800660c:	464a      	mov	r2, r9
 800660e:	4631      	mov	r1, r6
 8006610:	4628      	mov	r0, r5
 8006612:	47b8      	blx	r7
 8006614:	3001      	adds	r0, #1
 8006616:	f43f ae3c 	beq.w	8006292 <_printf_float+0xb6>
 800661a:	f108 0801 	add.w	r8, r8, #1
 800661e:	68e3      	ldr	r3, [r4, #12]
 8006620:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006622:	1a5b      	subs	r3, r3, r1
 8006624:	4543      	cmp	r3, r8
 8006626:	dcf0      	bgt.n	800660a <_printf_float+0x42e>
 8006628:	e6fd      	b.n	8006426 <_printf_float+0x24a>
 800662a:	f04f 0800 	mov.w	r8, #0
 800662e:	f104 0919 	add.w	r9, r4, #25
 8006632:	e7f4      	b.n	800661e <_printf_float+0x442>

08006634 <_printf_common>:
 8006634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006638:	4616      	mov	r6, r2
 800663a:	4698      	mov	r8, r3
 800663c:	688a      	ldr	r2, [r1, #8]
 800663e:	690b      	ldr	r3, [r1, #16]
 8006640:	4607      	mov	r7, r0
 8006642:	4293      	cmp	r3, r2
 8006644:	bfb8      	it	lt
 8006646:	4613      	movlt	r3, r2
 8006648:	6033      	str	r3, [r6, #0]
 800664a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800664e:	460c      	mov	r4, r1
 8006650:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006654:	b10a      	cbz	r2, 800665a <_printf_common+0x26>
 8006656:	3301      	adds	r3, #1
 8006658:	6033      	str	r3, [r6, #0]
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	0699      	lsls	r1, r3, #26
 800665e:	bf42      	ittt	mi
 8006660:	6833      	ldrmi	r3, [r6, #0]
 8006662:	3302      	addmi	r3, #2
 8006664:	6033      	strmi	r3, [r6, #0]
 8006666:	6825      	ldr	r5, [r4, #0]
 8006668:	f015 0506 	ands.w	r5, r5, #6
 800666c:	d106      	bne.n	800667c <_printf_common+0x48>
 800666e:	f104 0a19 	add.w	sl, r4, #25
 8006672:	68e3      	ldr	r3, [r4, #12]
 8006674:	6832      	ldr	r2, [r6, #0]
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	42ab      	cmp	r3, r5
 800667a:	dc2b      	bgt.n	80066d4 <_printf_common+0xa0>
 800667c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006680:	6822      	ldr	r2, [r4, #0]
 8006682:	3b00      	subs	r3, #0
 8006684:	bf18      	it	ne
 8006686:	2301      	movne	r3, #1
 8006688:	0692      	lsls	r2, r2, #26
 800668a:	d430      	bmi.n	80066ee <_printf_common+0xba>
 800668c:	4641      	mov	r1, r8
 800668e:	4638      	mov	r0, r7
 8006690:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006694:	47c8      	blx	r9
 8006696:	3001      	adds	r0, #1
 8006698:	d023      	beq.n	80066e2 <_printf_common+0xae>
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	6922      	ldr	r2, [r4, #16]
 800669e:	f003 0306 	and.w	r3, r3, #6
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	bf14      	ite	ne
 80066a6:	2500      	movne	r5, #0
 80066a8:	6833      	ldreq	r3, [r6, #0]
 80066aa:	f04f 0600 	mov.w	r6, #0
 80066ae:	bf08      	it	eq
 80066b0:	68e5      	ldreq	r5, [r4, #12]
 80066b2:	f104 041a 	add.w	r4, r4, #26
 80066b6:	bf08      	it	eq
 80066b8:	1aed      	subeq	r5, r5, r3
 80066ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80066be:	bf08      	it	eq
 80066c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066c4:	4293      	cmp	r3, r2
 80066c6:	bfc4      	itt	gt
 80066c8:	1a9b      	subgt	r3, r3, r2
 80066ca:	18ed      	addgt	r5, r5, r3
 80066cc:	42b5      	cmp	r5, r6
 80066ce:	d11a      	bne.n	8006706 <_printf_common+0xd2>
 80066d0:	2000      	movs	r0, #0
 80066d2:	e008      	b.n	80066e6 <_printf_common+0xb2>
 80066d4:	2301      	movs	r3, #1
 80066d6:	4652      	mov	r2, sl
 80066d8:	4641      	mov	r1, r8
 80066da:	4638      	mov	r0, r7
 80066dc:	47c8      	blx	r9
 80066de:	3001      	adds	r0, #1
 80066e0:	d103      	bne.n	80066ea <_printf_common+0xb6>
 80066e2:	f04f 30ff 	mov.w	r0, #4294967295
 80066e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ea:	3501      	adds	r5, #1
 80066ec:	e7c1      	b.n	8006672 <_printf_common+0x3e>
 80066ee:	2030      	movs	r0, #48	@ 0x30
 80066f0:	18e1      	adds	r1, r4, r3
 80066f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066fc:	4422      	add	r2, r4
 80066fe:	3302      	adds	r3, #2
 8006700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006704:	e7c2      	b.n	800668c <_printf_common+0x58>
 8006706:	2301      	movs	r3, #1
 8006708:	4622      	mov	r2, r4
 800670a:	4641      	mov	r1, r8
 800670c:	4638      	mov	r0, r7
 800670e:	47c8      	blx	r9
 8006710:	3001      	adds	r0, #1
 8006712:	d0e6      	beq.n	80066e2 <_printf_common+0xae>
 8006714:	3601      	adds	r6, #1
 8006716:	e7d9      	b.n	80066cc <_printf_common+0x98>

08006718 <_printf_i>:
 8006718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800671c:	7e0f      	ldrb	r7, [r1, #24]
 800671e:	4691      	mov	r9, r2
 8006720:	2f78      	cmp	r7, #120	@ 0x78
 8006722:	4680      	mov	r8, r0
 8006724:	460c      	mov	r4, r1
 8006726:	469a      	mov	sl, r3
 8006728:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800672a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800672e:	d807      	bhi.n	8006740 <_printf_i+0x28>
 8006730:	2f62      	cmp	r7, #98	@ 0x62
 8006732:	d80a      	bhi.n	800674a <_printf_i+0x32>
 8006734:	2f00      	cmp	r7, #0
 8006736:	f000 80d3 	beq.w	80068e0 <_printf_i+0x1c8>
 800673a:	2f58      	cmp	r7, #88	@ 0x58
 800673c:	f000 80ba 	beq.w	80068b4 <_printf_i+0x19c>
 8006740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006744:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006748:	e03a      	b.n	80067c0 <_printf_i+0xa8>
 800674a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800674e:	2b15      	cmp	r3, #21
 8006750:	d8f6      	bhi.n	8006740 <_printf_i+0x28>
 8006752:	a101      	add	r1, pc, #4	@ (adr r1, 8006758 <_printf_i+0x40>)
 8006754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006758:	080067b1 	.word	0x080067b1
 800675c:	080067c5 	.word	0x080067c5
 8006760:	08006741 	.word	0x08006741
 8006764:	08006741 	.word	0x08006741
 8006768:	08006741 	.word	0x08006741
 800676c:	08006741 	.word	0x08006741
 8006770:	080067c5 	.word	0x080067c5
 8006774:	08006741 	.word	0x08006741
 8006778:	08006741 	.word	0x08006741
 800677c:	08006741 	.word	0x08006741
 8006780:	08006741 	.word	0x08006741
 8006784:	080068c7 	.word	0x080068c7
 8006788:	080067ef 	.word	0x080067ef
 800678c:	08006881 	.word	0x08006881
 8006790:	08006741 	.word	0x08006741
 8006794:	08006741 	.word	0x08006741
 8006798:	080068e9 	.word	0x080068e9
 800679c:	08006741 	.word	0x08006741
 80067a0:	080067ef 	.word	0x080067ef
 80067a4:	08006741 	.word	0x08006741
 80067a8:	08006741 	.word	0x08006741
 80067ac:	08006889 	.word	0x08006889
 80067b0:	6833      	ldr	r3, [r6, #0]
 80067b2:	1d1a      	adds	r2, r3, #4
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6032      	str	r2, [r6, #0]
 80067b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067c0:	2301      	movs	r3, #1
 80067c2:	e09e      	b.n	8006902 <_printf_i+0x1ea>
 80067c4:	6833      	ldr	r3, [r6, #0]
 80067c6:	6820      	ldr	r0, [r4, #0]
 80067c8:	1d19      	adds	r1, r3, #4
 80067ca:	6031      	str	r1, [r6, #0]
 80067cc:	0606      	lsls	r6, r0, #24
 80067ce:	d501      	bpl.n	80067d4 <_printf_i+0xbc>
 80067d0:	681d      	ldr	r5, [r3, #0]
 80067d2:	e003      	b.n	80067dc <_printf_i+0xc4>
 80067d4:	0645      	lsls	r5, r0, #25
 80067d6:	d5fb      	bpl.n	80067d0 <_printf_i+0xb8>
 80067d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067dc:	2d00      	cmp	r5, #0
 80067de:	da03      	bge.n	80067e8 <_printf_i+0xd0>
 80067e0:	232d      	movs	r3, #45	@ 0x2d
 80067e2:	426d      	negs	r5, r5
 80067e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067e8:	230a      	movs	r3, #10
 80067ea:	4859      	ldr	r0, [pc, #356]	@ (8006950 <_printf_i+0x238>)
 80067ec:	e011      	b.n	8006812 <_printf_i+0xfa>
 80067ee:	6821      	ldr	r1, [r4, #0]
 80067f0:	6833      	ldr	r3, [r6, #0]
 80067f2:	0608      	lsls	r0, r1, #24
 80067f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80067f8:	d402      	bmi.n	8006800 <_printf_i+0xe8>
 80067fa:	0649      	lsls	r1, r1, #25
 80067fc:	bf48      	it	mi
 80067fe:	b2ad      	uxthmi	r5, r5
 8006800:	2f6f      	cmp	r7, #111	@ 0x6f
 8006802:	6033      	str	r3, [r6, #0]
 8006804:	bf14      	ite	ne
 8006806:	230a      	movne	r3, #10
 8006808:	2308      	moveq	r3, #8
 800680a:	4851      	ldr	r0, [pc, #324]	@ (8006950 <_printf_i+0x238>)
 800680c:	2100      	movs	r1, #0
 800680e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006812:	6866      	ldr	r6, [r4, #4]
 8006814:	2e00      	cmp	r6, #0
 8006816:	bfa8      	it	ge
 8006818:	6821      	ldrge	r1, [r4, #0]
 800681a:	60a6      	str	r6, [r4, #8]
 800681c:	bfa4      	itt	ge
 800681e:	f021 0104 	bicge.w	r1, r1, #4
 8006822:	6021      	strge	r1, [r4, #0]
 8006824:	b90d      	cbnz	r5, 800682a <_printf_i+0x112>
 8006826:	2e00      	cmp	r6, #0
 8006828:	d04b      	beq.n	80068c2 <_printf_i+0x1aa>
 800682a:	4616      	mov	r6, r2
 800682c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006830:	fb03 5711 	mls	r7, r3, r1, r5
 8006834:	5dc7      	ldrb	r7, [r0, r7]
 8006836:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800683a:	462f      	mov	r7, r5
 800683c:	42bb      	cmp	r3, r7
 800683e:	460d      	mov	r5, r1
 8006840:	d9f4      	bls.n	800682c <_printf_i+0x114>
 8006842:	2b08      	cmp	r3, #8
 8006844:	d10b      	bne.n	800685e <_printf_i+0x146>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	07df      	lsls	r7, r3, #31
 800684a:	d508      	bpl.n	800685e <_printf_i+0x146>
 800684c:	6923      	ldr	r3, [r4, #16]
 800684e:	6861      	ldr	r1, [r4, #4]
 8006850:	4299      	cmp	r1, r3
 8006852:	bfde      	ittt	le
 8006854:	2330      	movle	r3, #48	@ 0x30
 8006856:	f806 3c01 	strble.w	r3, [r6, #-1]
 800685a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800685e:	1b92      	subs	r2, r2, r6
 8006860:	6122      	str	r2, [r4, #16]
 8006862:	464b      	mov	r3, r9
 8006864:	4621      	mov	r1, r4
 8006866:	4640      	mov	r0, r8
 8006868:	f8cd a000 	str.w	sl, [sp]
 800686c:	aa03      	add	r2, sp, #12
 800686e:	f7ff fee1 	bl	8006634 <_printf_common>
 8006872:	3001      	adds	r0, #1
 8006874:	d14a      	bne.n	800690c <_printf_i+0x1f4>
 8006876:	f04f 30ff 	mov.w	r0, #4294967295
 800687a:	b004      	add	sp, #16
 800687c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	f043 0320 	orr.w	r3, r3, #32
 8006886:	6023      	str	r3, [r4, #0]
 8006888:	2778      	movs	r7, #120	@ 0x78
 800688a:	4832      	ldr	r0, [pc, #200]	@ (8006954 <_printf_i+0x23c>)
 800688c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	6831      	ldr	r1, [r6, #0]
 8006894:	061f      	lsls	r7, r3, #24
 8006896:	f851 5b04 	ldr.w	r5, [r1], #4
 800689a:	d402      	bmi.n	80068a2 <_printf_i+0x18a>
 800689c:	065f      	lsls	r7, r3, #25
 800689e:	bf48      	it	mi
 80068a0:	b2ad      	uxthmi	r5, r5
 80068a2:	6031      	str	r1, [r6, #0]
 80068a4:	07d9      	lsls	r1, r3, #31
 80068a6:	bf44      	itt	mi
 80068a8:	f043 0320 	orrmi.w	r3, r3, #32
 80068ac:	6023      	strmi	r3, [r4, #0]
 80068ae:	b11d      	cbz	r5, 80068b8 <_printf_i+0x1a0>
 80068b0:	2310      	movs	r3, #16
 80068b2:	e7ab      	b.n	800680c <_printf_i+0xf4>
 80068b4:	4826      	ldr	r0, [pc, #152]	@ (8006950 <_printf_i+0x238>)
 80068b6:	e7e9      	b.n	800688c <_printf_i+0x174>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	f023 0320 	bic.w	r3, r3, #32
 80068be:	6023      	str	r3, [r4, #0]
 80068c0:	e7f6      	b.n	80068b0 <_printf_i+0x198>
 80068c2:	4616      	mov	r6, r2
 80068c4:	e7bd      	b.n	8006842 <_printf_i+0x12a>
 80068c6:	6833      	ldr	r3, [r6, #0]
 80068c8:	6825      	ldr	r5, [r4, #0]
 80068ca:	1d18      	adds	r0, r3, #4
 80068cc:	6961      	ldr	r1, [r4, #20]
 80068ce:	6030      	str	r0, [r6, #0]
 80068d0:	062e      	lsls	r6, r5, #24
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	d501      	bpl.n	80068da <_printf_i+0x1c2>
 80068d6:	6019      	str	r1, [r3, #0]
 80068d8:	e002      	b.n	80068e0 <_printf_i+0x1c8>
 80068da:	0668      	lsls	r0, r5, #25
 80068dc:	d5fb      	bpl.n	80068d6 <_printf_i+0x1be>
 80068de:	8019      	strh	r1, [r3, #0]
 80068e0:	2300      	movs	r3, #0
 80068e2:	4616      	mov	r6, r2
 80068e4:	6123      	str	r3, [r4, #16]
 80068e6:	e7bc      	b.n	8006862 <_printf_i+0x14a>
 80068e8:	6833      	ldr	r3, [r6, #0]
 80068ea:	2100      	movs	r1, #0
 80068ec:	1d1a      	adds	r2, r3, #4
 80068ee:	6032      	str	r2, [r6, #0]
 80068f0:	681e      	ldr	r6, [r3, #0]
 80068f2:	6862      	ldr	r2, [r4, #4]
 80068f4:	4630      	mov	r0, r6
 80068f6:	f000 fbe4 	bl	80070c2 <memchr>
 80068fa:	b108      	cbz	r0, 8006900 <_printf_i+0x1e8>
 80068fc:	1b80      	subs	r0, r0, r6
 80068fe:	6060      	str	r0, [r4, #4]
 8006900:	6863      	ldr	r3, [r4, #4]
 8006902:	6123      	str	r3, [r4, #16]
 8006904:	2300      	movs	r3, #0
 8006906:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800690a:	e7aa      	b.n	8006862 <_printf_i+0x14a>
 800690c:	4632      	mov	r2, r6
 800690e:	4649      	mov	r1, r9
 8006910:	4640      	mov	r0, r8
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	47d0      	blx	sl
 8006916:	3001      	adds	r0, #1
 8006918:	d0ad      	beq.n	8006876 <_printf_i+0x15e>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	079b      	lsls	r3, r3, #30
 800691e:	d413      	bmi.n	8006948 <_printf_i+0x230>
 8006920:	68e0      	ldr	r0, [r4, #12]
 8006922:	9b03      	ldr	r3, [sp, #12]
 8006924:	4298      	cmp	r0, r3
 8006926:	bfb8      	it	lt
 8006928:	4618      	movlt	r0, r3
 800692a:	e7a6      	b.n	800687a <_printf_i+0x162>
 800692c:	2301      	movs	r3, #1
 800692e:	4632      	mov	r2, r6
 8006930:	4649      	mov	r1, r9
 8006932:	4640      	mov	r0, r8
 8006934:	47d0      	blx	sl
 8006936:	3001      	adds	r0, #1
 8006938:	d09d      	beq.n	8006876 <_printf_i+0x15e>
 800693a:	3501      	adds	r5, #1
 800693c:	68e3      	ldr	r3, [r4, #12]
 800693e:	9903      	ldr	r1, [sp, #12]
 8006940:	1a5b      	subs	r3, r3, r1
 8006942:	42ab      	cmp	r3, r5
 8006944:	dcf2      	bgt.n	800692c <_printf_i+0x214>
 8006946:	e7eb      	b.n	8006920 <_printf_i+0x208>
 8006948:	2500      	movs	r5, #0
 800694a:	f104 0619 	add.w	r6, r4, #25
 800694e:	e7f5      	b.n	800693c <_printf_i+0x224>
 8006950:	0800b75c 	.word	0x0800b75c
 8006954:	0800b76d 	.word	0x0800b76d

08006958 <_scanf_float>:
 8006958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695c:	b087      	sub	sp, #28
 800695e:	9303      	str	r3, [sp, #12]
 8006960:	688b      	ldr	r3, [r1, #8]
 8006962:	4617      	mov	r7, r2
 8006964:	1e5a      	subs	r2, r3, #1
 8006966:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800696a:	bf82      	ittt	hi
 800696c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006970:	eb03 0b05 	addhi.w	fp, r3, r5
 8006974:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006978:	460a      	mov	r2, r1
 800697a:	f04f 0500 	mov.w	r5, #0
 800697e:	bf88      	it	hi
 8006980:	608b      	strhi	r3, [r1, #8]
 8006982:	680b      	ldr	r3, [r1, #0]
 8006984:	4680      	mov	r8, r0
 8006986:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800698a:	f842 3b1c 	str.w	r3, [r2], #28
 800698e:	460c      	mov	r4, r1
 8006990:	bf98      	it	ls
 8006992:	f04f 0b00 	movls.w	fp, #0
 8006996:	4616      	mov	r6, r2
 8006998:	46aa      	mov	sl, r5
 800699a:	46a9      	mov	r9, r5
 800699c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80069a0:	9201      	str	r2, [sp, #4]
 80069a2:	9502      	str	r5, [sp, #8]
 80069a4:	68a2      	ldr	r2, [r4, #8]
 80069a6:	b152      	cbz	r2, 80069be <_scanf_float+0x66>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b4e      	cmp	r3, #78	@ 0x4e
 80069ae:	d865      	bhi.n	8006a7c <_scanf_float+0x124>
 80069b0:	2b40      	cmp	r3, #64	@ 0x40
 80069b2:	d83d      	bhi.n	8006a30 <_scanf_float+0xd8>
 80069b4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80069b8:	b2c8      	uxtb	r0, r1
 80069ba:	280e      	cmp	r0, #14
 80069bc:	d93b      	bls.n	8006a36 <_scanf_float+0xde>
 80069be:	f1b9 0f00 	cmp.w	r9, #0
 80069c2:	d003      	beq.n	80069cc <_scanf_float+0x74>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069ca:	6023      	str	r3, [r4, #0]
 80069cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069d0:	f1ba 0f01 	cmp.w	sl, #1
 80069d4:	f200 8118 	bhi.w	8006c08 <_scanf_float+0x2b0>
 80069d8:	9b01      	ldr	r3, [sp, #4]
 80069da:	429e      	cmp	r6, r3
 80069dc:	f200 8109 	bhi.w	8006bf2 <_scanf_float+0x29a>
 80069e0:	2001      	movs	r0, #1
 80069e2:	b007      	add	sp, #28
 80069e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80069ec:	2a0d      	cmp	r2, #13
 80069ee:	d8e6      	bhi.n	80069be <_scanf_float+0x66>
 80069f0:	a101      	add	r1, pc, #4	@ (adr r1, 80069f8 <_scanf_float+0xa0>)
 80069f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006b3f 	.word	0x08006b3f
 80069fc:	080069bf 	.word	0x080069bf
 8006a00:	080069bf 	.word	0x080069bf
 8006a04:	080069bf 	.word	0x080069bf
 8006a08:	08006b9f 	.word	0x08006b9f
 8006a0c:	08006b77 	.word	0x08006b77
 8006a10:	080069bf 	.word	0x080069bf
 8006a14:	080069bf 	.word	0x080069bf
 8006a18:	08006b4d 	.word	0x08006b4d
 8006a1c:	080069bf 	.word	0x080069bf
 8006a20:	080069bf 	.word	0x080069bf
 8006a24:	080069bf 	.word	0x080069bf
 8006a28:	080069bf 	.word	0x080069bf
 8006a2c:	08006b05 	.word	0x08006b05
 8006a30:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006a34:	e7da      	b.n	80069ec <_scanf_float+0x94>
 8006a36:	290e      	cmp	r1, #14
 8006a38:	d8c1      	bhi.n	80069be <_scanf_float+0x66>
 8006a3a:	a001      	add	r0, pc, #4	@ (adr r0, 8006a40 <_scanf_float+0xe8>)
 8006a3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006a40:	08006af5 	.word	0x08006af5
 8006a44:	080069bf 	.word	0x080069bf
 8006a48:	08006af5 	.word	0x08006af5
 8006a4c:	08006b8b 	.word	0x08006b8b
 8006a50:	080069bf 	.word	0x080069bf
 8006a54:	08006a9d 	.word	0x08006a9d
 8006a58:	08006adb 	.word	0x08006adb
 8006a5c:	08006adb 	.word	0x08006adb
 8006a60:	08006adb 	.word	0x08006adb
 8006a64:	08006adb 	.word	0x08006adb
 8006a68:	08006adb 	.word	0x08006adb
 8006a6c:	08006adb 	.word	0x08006adb
 8006a70:	08006adb 	.word	0x08006adb
 8006a74:	08006adb 	.word	0x08006adb
 8006a78:	08006adb 	.word	0x08006adb
 8006a7c:	2b6e      	cmp	r3, #110	@ 0x6e
 8006a7e:	d809      	bhi.n	8006a94 <_scanf_float+0x13c>
 8006a80:	2b60      	cmp	r3, #96	@ 0x60
 8006a82:	d8b1      	bhi.n	80069e8 <_scanf_float+0x90>
 8006a84:	2b54      	cmp	r3, #84	@ 0x54
 8006a86:	d07b      	beq.n	8006b80 <_scanf_float+0x228>
 8006a88:	2b59      	cmp	r3, #89	@ 0x59
 8006a8a:	d198      	bne.n	80069be <_scanf_float+0x66>
 8006a8c:	2d07      	cmp	r5, #7
 8006a8e:	d196      	bne.n	80069be <_scanf_float+0x66>
 8006a90:	2508      	movs	r5, #8
 8006a92:	e02c      	b.n	8006aee <_scanf_float+0x196>
 8006a94:	2b74      	cmp	r3, #116	@ 0x74
 8006a96:	d073      	beq.n	8006b80 <_scanf_float+0x228>
 8006a98:	2b79      	cmp	r3, #121	@ 0x79
 8006a9a:	e7f6      	b.n	8006a8a <_scanf_float+0x132>
 8006a9c:	6821      	ldr	r1, [r4, #0]
 8006a9e:	05c8      	lsls	r0, r1, #23
 8006aa0:	d51b      	bpl.n	8006ada <_scanf_float+0x182>
 8006aa2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006aa6:	6021      	str	r1, [r4, #0]
 8006aa8:	f109 0901 	add.w	r9, r9, #1
 8006aac:	f1bb 0f00 	cmp.w	fp, #0
 8006ab0:	d003      	beq.n	8006aba <_scanf_float+0x162>
 8006ab2:	3201      	adds	r2, #1
 8006ab4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ab8:	60a2      	str	r2, [r4, #8]
 8006aba:	68a3      	ldr	r3, [r4, #8]
 8006abc:	3b01      	subs	r3, #1
 8006abe:	60a3      	str	r3, [r4, #8]
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	607b      	str	r3, [r7, #4]
 8006ace:	f340 8087 	ble.w	8006be0 <_scanf_float+0x288>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	603b      	str	r3, [r7, #0]
 8006ad8:	e764      	b.n	80069a4 <_scanf_float+0x4c>
 8006ada:	eb1a 0105 	adds.w	r1, sl, r5
 8006ade:	f47f af6e 	bne.w	80069be <_scanf_float+0x66>
 8006ae2:	460d      	mov	r5, r1
 8006ae4:	468a      	mov	sl, r1
 8006ae6:	6822      	ldr	r2, [r4, #0]
 8006ae8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006aec:	6022      	str	r2, [r4, #0]
 8006aee:	f806 3b01 	strb.w	r3, [r6], #1
 8006af2:	e7e2      	b.n	8006aba <_scanf_float+0x162>
 8006af4:	6822      	ldr	r2, [r4, #0]
 8006af6:	0610      	lsls	r0, r2, #24
 8006af8:	f57f af61 	bpl.w	80069be <_scanf_float+0x66>
 8006afc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b00:	6022      	str	r2, [r4, #0]
 8006b02:	e7f4      	b.n	8006aee <_scanf_float+0x196>
 8006b04:	f1ba 0f00 	cmp.w	sl, #0
 8006b08:	d10e      	bne.n	8006b28 <_scanf_float+0x1d0>
 8006b0a:	f1b9 0f00 	cmp.w	r9, #0
 8006b0e:	d10e      	bne.n	8006b2e <_scanf_float+0x1d6>
 8006b10:	6822      	ldr	r2, [r4, #0]
 8006b12:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006b16:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006b1a:	d108      	bne.n	8006b2e <_scanf_float+0x1d6>
 8006b1c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006b20:	f04f 0a01 	mov.w	sl, #1
 8006b24:	6022      	str	r2, [r4, #0]
 8006b26:	e7e2      	b.n	8006aee <_scanf_float+0x196>
 8006b28:	f1ba 0f02 	cmp.w	sl, #2
 8006b2c:	d055      	beq.n	8006bda <_scanf_float+0x282>
 8006b2e:	2d01      	cmp	r5, #1
 8006b30:	d002      	beq.n	8006b38 <_scanf_float+0x1e0>
 8006b32:	2d04      	cmp	r5, #4
 8006b34:	f47f af43 	bne.w	80069be <_scanf_float+0x66>
 8006b38:	3501      	adds	r5, #1
 8006b3a:	b2ed      	uxtb	r5, r5
 8006b3c:	e7d7      	b.n	8006aee <_scanf_float+0x196>
 8006b3e:	f1ba 0f01 	cmp.w	sl, #1
 8006b42:	f47f af3c 	bne.w	80069be <_scanf_float+0x66>
 8006b46:	f04f 0a02 	mov.w	sl, #2
 8006b4a:	e7d0      	b.n	8006aee <_scanf_float+0x196>
 8006b4c:	b97d      	cbnz	r5, 8006b6e <_scanf_float+0x216>
 8006b4e:	f1b9 0f00 	cmp.w	r9, #0
 8006b52:	f47f af37 	bne.w	80069c4 <_scanf_float+0x6c>
 8006b56:	6822      	ldr	r2, [r4, #0]
 8006b58:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006b5c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006b60:	f040 8103 	bne.w	8006d6a <_scanf_float+0x412>
 8006b64:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006b68:	2501      	movs	r5, #1
 8006b6a:	6022      	str	r2, [r4, #0]
 8006b6c:	e7bf      	b.n	8006aee <_scanf_float+0x196>
 8006b6e:	2d03      	cmp	r5, #3
 8006b70:	d0e2      	beq.n	8006b38 <_scanf_float+0x1e0>
 8006b72:	2d05      	cmp	r5, #5
 8006b74:	e7de      	b.n	8006b34 <_scanf_float+0x1dc>
 8006b76:	2d02      	cmp	r5, #2
 8006b78:	f47f af21 	bne.w	80069be <_scanf_float+0x66>
 8006b7c:	2503      	movs	r5, #3
 8006b7e:	e7b6      	b.n	8006aee <_scanf_float+0x196>
 8006b80:	2d06      	cmp	r5, #6
 8006b82:	f47f af1c 	bne.w	80069be <_scanf_float+0x66>
 8006b86:	2507      	movs	r5, #7
 8006b88:	e7b1      	b.n	8006aee <_scanf_float+0x196>
 8006b8a:	6822      	ldr	r2, [r4, #0]
 8006b8c:	0591      	lsls	r1, r2, #22
 8006b8e:	f57f af16 	bpl.w	80069be <_scanf_float+0x66>
 8006b92:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006b96:	6022      	str	r2, [r4, #0]
 8006b98:	f8cd 9008 	str.w	r9, [sp, #8]
 8006b9c:	e7a7      	b.n	8006aee <_scanf_float+0x196>
 8006b9e:	6822      	ldr	r2, [r4, #0]
 8006ba0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006ba4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006ba8:	d006      	beq.n	8006bb8 <_scanf_float+0x260>
 8006baa:	0550      	lsls	r0, r2, #21
 8006bac:	f57f af07 	bpl.w	80069be <_scanf_float+0x66>
 8006bb0:	f1b9 0f00 	cmp.w	r9, #0
 8006bb4:	f000 80d9 	beq.w	8006d6a <_scanf_float+0x412>
 8006bb8:	0591      	lsls	r1, r2, #22
 8006bba:	bf58      	it	pl
 8006bbc:	9902      	ldrpl	r1, [sp, #8]
 8006bbe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006bc2:	bf58      	it	pl
 8006bc4:	eba9 0101 	subpl.w	r1, r9, r1
 8006bc8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006bcc:	f04f 0900 	mov.w	r9, #0
 8006bd0:	bf58      	it	pl
 8006bd2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006bd6:	6022      	str	r2, [r4, #0]
 8006bd8:	e789      	b.n	8006aee <_scanf_float+0x196>
 8006bda:	f04f 0a03 	mov.w	sl, #3
 8006bde:	e786      	b.n	8006aee <_scanf_float+0x196>
 8006be0:	4639      	mov	r1, r7
 8006be2:	4640      	mov	r0, r8
 8006be4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006be8:	4798      	blx	r3
 8006bea:	2800      	cmp	r0, #0
 8006bec:	f43f aeda 	beq.w	80069a4 <_scanf_float+0x4c>
 8006bf0:	e6e5      	b.n	80069be <_scanf_float+0x66>
 8006bf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bf6:	463a      	mov	r2, r7
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bfe:	4798      	blx	r3
 8006c00:	6923      	ldr	r3, [r4, #16]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	6123      	str	r3, [r4, #16]
 8006c06:	e6e7      	b.n	80069d8 <_scanf_float+0x80>
 8006c08:	1e6b      	subs	r3, r5, #1
 8006c0a:	2b06      	cmp	r3, #6
 8006c0c:	d824      	bhi.n	8006c58 <_scanf_float+0x300>
 8006c0e:	2d02      	cmp	r5, #2
 8006c10:	d836      	bhi.n	8006c80 <_scanf_float+0x328>
 8006c12:	9b01      	ldr	r3, [sp, #4]
 8006c14:	429e      	cmp	r6, r3
 8006c16:	f67f aee3 	bls.w	80069e0 <_scanf_float+0x88>
 8006c1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c1e:	463a      	mov	r2, r7
 8006c20:	4640      	mov	r0, r8
 8006c22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c26:	4798      	blx	r3
 8006c28:	6923      	ldr	r3, [r4, #16]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	6123      	str	r3, [r4, #16]
 8006c2e:	e7f0      	b.n	8006c12 <_scanf_float+0x2ba>
 8006c30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c34:	463a      	mov	r2, r7
 8006c36:	4640      	mov	r0, r8
 8006c38:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006c3c:	4798      	blx	r3
 8006c3e:	6923      	ldr	r3, [r4, #16]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	6123      	str	r3, [r4, #16]
 8006c44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c48:	fa5f fa8a 	uxtb.w	sl, sl
 8006c4c:	f1ba 0f02 	cmp.w	sl, #2
 8006c50:	d1ee      	bne.n	8006c30 <_scanf_float+0x2d8>
 8006c52:	3d03      	subs	r5, #3
 8006c54:	b2ed      	uxtb	r5, r5
 8006c56:	1b76      	subs	r6, r6, r5
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	05da      	lsls	r2, r3, #23
 8006c5c:	d530      	bpl.n	8006cc0 <_scanf_float+0x368>
 8006c5e:	055b      	lsls	r3, r3, #21
 8006c60:	d511      	bpl.n	8006c86 <_scanf_float+0x32e>
 8006c62:	9b01      	ldr	r3, [sp, #4]
 8006c64:	429e      	cmp	r6, r3
 8006c66:	f67f aebb 	bls.w	80069e0 <_scanf_float+0x88>
 8006c6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c6e:	463a      	mov	r2, r7
 8006c70:	4640      	mov	r0, r8
 8006c72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c76:	4798      	blx	r3
 8006c78:	6923      	ldr	r3, [r4, #16]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	6123      	str	r3, [r4, #16]
 8006c7e:	e7f0      	b.n	8006c62 <_scanf_float+0x30a>
 8006c80:	46aa      	mov	sl, r5
 8006c82:	46b3      	mov	fp, r6
 8006c84:	e7de      	b.n	8006c44 <_scanf_float+0x2ec>
 8006c86:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	2965      	cmp	r1, #101	@ 0x65
 8006c8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c92:	f106 35ff 	add.w	r5, r6, #4294967295
 8006c96:	6123      	str	r3, [r4, #16]
 8006c98:	d00c      	beq.n	8006cb4 <_scanf_float+0x35c>
 8006c9a:	2945      	cmp	r1, #69	@ 0x45
 8006c9c:	d00a      	beq.n	8006cb4 <_scanf_float+0x35c>
 8006c9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ca2:	463a      	mov	r2, r7
 8006ca4:	4640      	mov	r0, r8
 8006ca6:	4798      	blx	r3
 8006ca8:	6923      	ldr	r3, [r4, #16]
 8006caa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	1eb5      	subs	r5, r6, #2
 8006cb2:	6123      	str	r3, [r4, #16]
 8006cb4:	463a      	mov	r2, r7
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cbc:	4798      	blx	r3
 8006cbe:	462e      	mov	r6, r5
 8006cc0:	6822      	ldr	r2, [r4, #0]
 8006cc2:	f012 0210 	ands.w	r2, r2, #16
 8006cc6:	d001      	beq.n	8006ccc <_scanf_float+0x374>
 8006cc8:	2000      	movs	r0, #0
 8006cca:	e68a      	b.n	80069e2 <_scanf_float+0x8a>
 8006ccc:	7032      	strb	r2, [r6, #0]
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd8:	d11c      	bne.n	8006d14 <_scanf_float+0x3bc>
 8006cda:	9b02      	ldr	r3, [sp, #8]
 8006cdc:	454b      	cmp	r3, r9
 8006cde:	eba3 0209 	sub.w	r2, r3, r9
 8006ce2:	d123      	bne.n	8006d2c <_scanf_float+0x3d4>
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	9901      	ldr	r1, [sp, #4]
 8006cea:	f002 fbfd 	bl	80094e8 <_strtod_r>
 8006cee:	9b03      	ldr	r3, [sp, #12]
 8006cf0:	6825      	ldr	r5, [r4, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f015 0f02 	tst.w	r5, #2
 8006cf8:	4606      	mov	r6, r0
 8006cfa:	460f      	mov	r7, r1
 8006cfc:	f103 0204 	add.w	r2, r3, #4
 8006d00:	d01f      	beq.n	8006d42 <_scanf_float+0x3ea>
 8006d02:	9903      	ldr	r1, [sp, #12]
 8006d04:	600a      	str	r2, [r1, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	e9c3 6700 	strd	r6, r7, [r3]
 8006d0c:	68e3      	ldr	r3, [r4, #12]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60e3      	str	r3, [r4, #12]
 8006d12:	e7d9      	b.n	8006cc8 <_scanf_float+0x370>
 8006d14:	9b04      	ldr	r3, [sp, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0e4      	beq.n	8006ce4 <_scanf_float+0x38c>
 8006d1a:	9905      	ldr	r1, [sp, #20]
 8006d1c:	230a      	movs	r3, #10
 8006d1e:	4640      	mov	r0, r8
 8006d20:	3101      	adds	r1, #1
 8006d22:	f002 fc61 	bl	80095e8 <_strtol_r>
 8006d26:	9b04      	ldr	r3, [sp, #16]
 8006d28:	9e05      	ldr	r6, [sp, #20]
 8006d2a:	1ac2      	subs	r2, r0, r3
 8006d2c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006d30:	429e      	cmp	r6, r3
 8006d32:	bf28      	it	cs
 8006d34:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006d38:	4630      	mov	r0, r6
 8006d3a:	490d      	ldr	r1, [pc, #52]	@ (8006d70 <_scanf_float+0x418>)
 8006d3c:	f000 f8de 	bl	8006efc <siprintf>
 8006d40:	e7d0      	b.n	8006ce4 <_scanf_float+0x38c>
 8006d42:	076d      	lsls	r5, r5, #29
 8006d44:	d4dd      	bmi.n	8006d02 <_scanf_float+0x3aa>
 8006d46:	9d03      	ldr	r5, [sp, #12]
 8006d48:	602a      	str	r2, [r5, #0]
 8006d4a:	681d      	ldr	r5, [r3, #0]
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	f7f9 fe5c 	bl	8000a0c <__aeabi_dcmpun>
 8006d54:	b120      	cbz	r0, 8006d60 <_scanf_float+0x408>
 8006d56:	4807      	ldr	r0, [pc, #28]	@ (8006d74 <_scanf_float+0x41c>)
 8006d58:	f000 f9d0 	bl	80070fc <nanf>
 8006d5c:	6028      	str	r0, [r5, #0]
 8006d5e:	e7d5      	b.n	8006d0c <_scanf_float+0x3b4>
 8006d60:	4630      	mov	r0, r6
 8006d62:	4639      	mov	r1, r7
 8006d64:	f7f9 feb0 	bl	8000ac8 <__aeabi_d2f>
 8006d68:	e7f8      	b.n	8006d5c <_scanf_float+0x404>
 8006d6a:	f04f 0900 	mov.w	r9, #0
 8006d6e:	e62d      	b.n	80069cc <_scanf_float+0x74>
 8006d70:	0800b77e 	.word	0x0800b77e
 8006d74:	0800bb15 	.word	0x0800bb15

08006d78 <std>:
 8006d78:	2300      	movs	r3, #0
 8006d7a:	b510      	push	{r4, lr}
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d86:	6083      	str	r3, [r0, #8]
 8006d88:	8181      	strh	r1, [r0, #12]
 8006d8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d8c:	81c2      	strh	r2, [r0, #14]
 8006d8e:	6183      	str	r3, [r0, #24]
 8006d90:	4619      	mov	r1, r3
 8006d92:	2208      	movs	r2, #8
 8006d94:	305c      	adds	r0, #92	@ 0x5c
 8006d96:	f000 f914 	bl	8006fc2 <memset>
 8006d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd0 <std+0x58>)
 8006d9c:	6224      	str	r4, [r4, #32]
 8006d9e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006da0:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd4 <std+0x5c>)
 8006da2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006da4:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd8 <std+0x60>)
 8006da6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006da8:	4b0c      	ldr	r3, [pc, #48]	@ (8006ddc <std+0x64>)
 8006daa:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dac:	4b0c      	ldr	r3, [pc, #48]	@ (8006de0 <std+0x68>)
 8006dae:	429c      	cmp	r4, r3
 8006db0:	d006      	beq.n	8006dc0 <std+0x48>
 8006db2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006db6:	4294      	cmp	r4, r2
 8006db8:	d002      	beq.n	8006dc0 <std+0x48>
 8006dba:	33d0      	adds	r3, #208	@ 0xd0
 8006dbc:	429c      	cmp	r4, r3
 8006dbe:	d105      	bne.n	8006dcc <std+0x54>
 8006dc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dc8:	f000 b978 	b.w	80070bc <__retarget_lock_init_recursive>
 8006dcc:	bd10      	pop	{r4, pc}
 8006dce:	bf00      	nop
 8006dd0:	08006f3d 	.word	0x08006f3d
 8006dd4:	08006f5f 	.word	0x08006f5f
 8006dd8:	08006f97 	.word	0x08006f97
 8006ddc:	08006fbb 	.word	0x08006fbb
 8006de0:	200008f4 	.word	0x200008f4

08006de4 <stdio_exit_handler>:
 8006de4:	4a02      	ldr	r2, [pc, #8]	@ (8006df0 <stdio_exit_handler+0xc>)
 8006de6:	4903      	ldr	r1, [pc, #12]	@ (8006df4 <stdio_exit_handler+0x10>)
 8006de8:	4803      	ldr	r0, [pc, #12]	@ (8006df8 <stdio_exit_handler+0x14>)
 8006dea:	f000 b869 	b.w	8006ec0 <_fwalk_sglue>
 8006dee:	bf00      	nop
 8006df0:	2000001c 	.word	0x2000001c
 8006df4:	0800999d 	.word	0x0800999d
 8006df8:	2000002c 	.word	0x2000002c

08006dfc <cleanup_stdio>:
 8006dfc:	6841      	ldr	r1, [r0, #4]
 8006dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006e30 <cleanup_stdio+0x34>)
 8006e00:	b510      	push	{r4, lr}
 8006e02:	4299      	cmp	r1, r3
 8006e04:	4604      	mov	r4, r0
 8006e06:	d001      	beq.n	8006e0c <cleanup_stdio+0x10>
 8006e08:	f002 fdc8 	bl	800999c <_fflush_r>
 8006e0c:	68a1      	ldr	r1, [r4, #8]
 8006e0e:	4b09      	ldr	r3, [pc, #36]	@ (8006e34 <cleanup_stdio+0x38>)
 8006e10:	4299      	cmp	r1, r3
 8006e12:	d002      	beq.n	8006e1a <cleanup_stdio+0x1e>
 8006e14:	4620      	mov	r0, r4
 8006e16:	f002 fdc1 	bl	800999c <_fflush_r>
 8006e1a:	68e1      	ldr	r1, [r4, #12]
 8006e1c:	4b06      	ldr	r3, [pc, #24]	@ (8006e38 <cleanup_stdio+0x3c>)
 8006e1e:	4299      	cmp	r1, r3
 8006e20:	d004      	beq.n	8006e2c <cleanup_stdio+0x30>
 8006e22:	4620      	mov	r0, r4
 8006e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e28:	f002 bdb8 	b.w	800999c <_fflush_r>
 8006e2c:	bd10      	pop	{r4, pc}
 8006e2e:	bf00      	nop
 8006e30:	200008f4 	.word	0x200008f4
 8006e34:	2000095c 	.word	0x2000095c
 8006e38:	200009c4 	.word	0x200009c4

08006e3c <global_stdio_init.part.0>:
 8006e3c:	b510      	push	{r4, lr}
 8006e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e6c <global_stdio_init.part.0+0x30>)
 8006e40:	4c0b      	ldr	r4, [pc, #44]	@ (8006e70 <global_stdio_init.part.0+0x34>)
 8006e42:	4a0c      	ldr	r2, [pc, #48]	@ (8006e74 <global_stdio_init.part.0+0x38>)
 8006e44:	4620      	mov	r0, r4
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	2104      	movs	r1, #4
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f7ff ff94 	bl	8006d78 <std>
 8006e50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e54:	2201      	movs	r2, #1
 8006e56:	2109      	movs	r1, #9
 8006e58:	f7ff ff8e 	bl	8006d78 <std>
 8006e5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e60:	2202      	movs	r2, #2
 8006e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e66:	2112      	movs	r1, #18
 8006e68:	f7ff bf86 	b.w	8006d78 <std>
 8006e6c:	20000a2c 	.word	0x20000a2c
 8006e70:	200008f4 	.word	0x200008f4
 8006e74:	08006de5 	.word	0x08006de5

08006e78 <__sfp_lock_acquire>:
 8006e78:	4801      	ldr	r0, [pc, #4]	@ (8006e80 <__sfp_lock_acquire+0x8>)
 8006e7a:	f000 b920 	b.w	80070be <__retarget_lock_acquire_recursive>
 8006e7e:	bf00      	nop
 8006e80:	20000a35 	.word	0x20000a35

08006e84 <__sfp_lock_release>:
 8006e84:	4801      	ldr	r0, [pc, #4]	@ (8006e8c <__sfp_lock_release+0x8>)
 8006e86:	f000 b91b 	b.w	80070c0 <__retarget_lock_release_recursive>
 8006e8a:	bf00      	nop
 8006e8c:	20000a35 	.word	0x20000a35

08006e90 <__sinit>:
 8006e90:	b510      	push	{r4, lr}
 8006e92:	4604      	mov	r4, r0
 8006e94:	f7ff fff0 	bl	8006e78 <__sfp_lock_acquire>
 8006e98:	6a23      	ldr	r3, [r4, #32]
 8006e9a:	b11b      	cbz	r3, 8006ea4 <__sinit+0x14>
 8006e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea0:	f7ff bff0 	b.w	8006e84 <__sfp_lock_release>
 8006ea4:	4b04      	ldr	r3, [pc, #16]	@ (8006eb8 <__sinit+0x28>)
 8006ea6:	6223      	str	r3, [r4, #32]
 8006ea8:	4b04      	ldr	r3, [pc, #16]	@ (8006ebc <__sinit+0x2c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1f5      	bne.n	8006e9c <__sinit+0xc>
 8006eb0:	f7ff ffc4 	bl	8006e3c <global_stdio_init.part.0>
 8006eb4:	e7f2      	b.n	8006e9c <__sinit+0xc>
 8006eb6:	bf00      	nop
 8006eb8:	08006dfd 	.word	0x08006dfd
 8006ebc:	20000a2c 	.word	0x20000a2c

08006ec0 <_fwalk_sglue>:
 8006ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec4:	4607      	mov	r7, r0
 8006ec6:	4688      	mov	r8, r1
 8006ec8:	4614      	mov	r4, r2
 8006eca:	2600      	movs	r6, #0
 8006ecc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ed0:	f1b9 0901 	subs.w	r9, r9, #1
 8006ed4:	d505      	bpl.n	8006ee2 <_fwalk_sglue+0x22>
 8006ed6:	6824      	ldr	r4, [r4, #0]
 8006ed8:	2c00      	cmp	r4, #0
 8006eda:	d1f7      	bne.n	8006ecc <_fwalk_sglue+0xc>
 8006edc:	4630      	mov	r0, r6
 8006ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ee2:	89ab      	ldrh	r3, [r5, #12]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d907      	bls.n	8006ef8 <_fwalk_sglue+0x38>
 8006ee8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006eec:	3301      	adds	r3, #1
 8006eee:	d003      	beq.n	8006ef8 <_fwalk_sglue+0x38>
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	47c0      	blx	r8
 8006ef6:	4306      	orrs	r6, r0
 8006ef8:	3568      	adds	r5, #104	@ 0x68
 8006efa:	e7e9      	b.n	8006ed0 <_fwalk_sglue+0x10>

08006efc <siprintf>:
 8006efc:	b40e      	push	{r1, r2, r3}
 8006efe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f02:	b500      	push	{lr}
 8006f04:	b09c      	sub	sp, #112	@ 0x70
 8006f06:	ab1d      	add	r3, sp, #116	@ 0x74
 8006f08:	9002      	str	r0, [sp, #8]
 8006f0a:	9006      	str	r0, [sp, #24]
 8006f0c:	9107      	str	r1, [sp, #28]
 8006f0e:	9104      	str	r1, [sp, #16]
 8006f10:	4808      	ldr	r0, [pc, #32]	@ (8006f34 <siprintf+0x38>)
 8006f12:	4909      	ldr	r1, [pc, #36]	@ (8006f38 <siprintf+0x3c>)
 8006f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f18:	9105      	str	r1, [sp, #20]
 8006f1a:	6800      	ldr	r0, [r0, #0]
 8006f1c:	a902      	add	r1, sp, #8
 8006f1e:	9301      	str	r3, [sp, #4]
 8006f20:	f002 fbc0 	bl	80096a4 <_svfiprintf_r>
 8006f24:	2200      	movs	r2, #0
 8006f26:	9b02      	ldr	r3, [sp, #8]
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	b01c      	add	sp, #112	@ 0x70
 8006f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f30:	b003      	add	sp, #12
 8006f32:	4770      	bx	lr
 8006f34:	20000028 	.word	0x20000028
 8006f38:	ffff0208 	.word	0xffff0208

08006f3c <__sread>:
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	460c      	mov	r4, r1
 8006f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f44:	f000 f86c 	bl	8007020 <_read_r>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	bfab      	itete	ge
 8006f4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f50:	181b      	addge	r3, r3, r0
 8006f52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f56:	bfac      	ite	ge
 8006f58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f5a:	81a3      	strhlt	r3, [r4, #12]
 8006f5c:	bd10      	pop	{r4, pc}

08006f5e <__swrite>:
 8006f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f62:	461f      	mov	r7, r3
 8006f64:	898b      	ldrh	r3, [r1, #12]
 8006f66:	4605      	mov	r5, r0
 8006f68:	05db      	lsls	r3, r3, #23
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	4616      	mov	r6, r2
 8006f6e:	d505      	bpl.n	8006f7c <__swrite+0x1e>
 8006f70:	2302      	movs	r3, #2
 8006f72:	2200      	movs	r2, #0
 8006f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f78:	f000 f840 	bl	8006ffc <_lseek_r>
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	4632      	mov	r2, r6
 8006f80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f84:	81a3      	strh	r3, [r4, #12]
 8006f86:	4628      	mov	r0, r5
 8006f88:	463b      	mov	r3, r7
 8006f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f92:	f000 b857 	b.w	8007044 <_write_r>

08006f96 <__sseek>:
 8006f96:	b510      	push	{r4, lr}
 8006f98:	460c      	mov	r4, r1
 8006f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9e:	f000 f82d 	bl	8006ffc <_lseek_r>
 8006fa2:	1c43      	adds	r3, r0, #1
 8006fa4:	89a3      	ldrh	r3, [r4, #12]
 8006fa6:	bf15      	itete	ne
 8006fa8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006faa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006fae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fb2:	81a3      	strheq	r3, [r4, #12]
 8006fb4:	bf18      	it	ne
 8006fb6:	81a3      	strhne	r3, [r4, #12]
 8006fb8:	bd10      	pop	{r4, pc}

08006fba <__sclose>:
 8006fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbe:	f000 b80d 	b.w	8006fdc <_close_r>

08006fc2 <memset>:
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	4402      	add	r2, r0
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d100      	bne.n	8006fcc <memset+0xa>
 8006fca:	4770      	bx	lr
 8006fcc:	f803 1b01 	strb.w	r1, [r3], #1
 8006fd0:	e7f9      	b.n	8006fc6 <memset+0x4>
	...

08006fd4 <_localeconv_r>:
 8006fd4:	4800      	ldr	r0, [pc, #0]	@ (8006fd8 <_localeconv_r+0x4>)
 8006fd6:	4770      	bx	lr
 8006fd8:	20000168 	.word	0x20000168

08006fdc <_close_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	2300      	movs	r3, #0
 8006fe0:	4d05      	ldr	r5, [pc, #20]	@ (8006ff8 <_close_r+0x1c>)
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	f7fa ff47 	bl	8001e7a <_close>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d102      	bne.n	8006ff6 <_close_r+0x1a>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	b103      	cbz	r3, 8006ff6 <_close_r+0x1a>
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	20000a30 	.word	0x20000a30

08006ffc <_lseek_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4604      	mov	r4, r0
 8007000:	4608      	mov	r0, r1
 8007002:	4611      	mov	r1, r2
 8007004:	2200      	movs	r2, #0
 8007006:	4d05      	ldr	r5, [pc, #20]	@ (800701c <_lseek_r+0x20>)
 8007008:	602a      	str	r2, [r5, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	f7fa ff59 	bl	8001ec2 <_lseek>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_lseek_r+0x1e>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_lseek_r+0x1e>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	20000a30 	.word	0x20000a30

08007020 <_read_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4604      	mov	r4, r0
 8007024:	4608      	mov	r0, r1
 8007026:	4611      	mov	r1, r2
 8007028:	2200      	movs	r2, #0
 800702a:	4d05      	ldr	r5, [pc, #20]	@ (8007040 <_read_r+0x20>)
 800702c:	602a      	str	r2, [r5, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	f7fa feea 	bl	8001e08 <_read>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d102      	bne.n	800703e <_read_r+0x1e>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	b103      	cbz	r3, 800703e <_read_r+0x1e>
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	20000a30 	.word	0x20000a30

08007044 <_write_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	4611      	mov	r1, r2
 800704c:	2200      	movs	r2, #0
 800704e:	4d05      	ldr	r5, [pc, #20]	@ (8007064 <_write_r+0x20>)
 8007050:	602a      	str	r2, [r5, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	f7fa fef5 	bl	8001e42 <_write>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_write_r+0x1e>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_write_r+0x1e>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20000a30 	.word	0x20000a30

08007068 <__errno>:
 8007068:	4b01      	ldr	r3, [pc, #4]	@ (8007070 <__errno+0x8>)
 800706a:	6818      	ldr	r0, [r3, #0]
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20000028 	.word	0x20000028

08007074 <__libc_init_array>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	2600      	movs	r6, #0
 8007078:	4d0c      	ldr	r5, [pc, #48]	@ (80070ac <__libc_init_array+0x38>)
 800707a:	4c0d      	ldr	r4, [pc, #52]	@ (80070b0 <__libc_init_array+0x3c>)
 800707c:	1b64      	subs	r4, r4, r5
 800707e:	10a4      	asrs	r4, r4, #2
 8007080:	42a6      	cmp	r6, r4
 8007082:	d109      	bne.n	8007098 <__libc_init_array+0x24>
 8007084:	f004 fb40 	bl	800b708 <_init>
 8007088:	2600      	movs	r6, #0
 800708a:	4d0a      	ldr	r5, [pc, #40]	@ (80070b4 <__libc_init_array+0x40>)
 800708c:	4c0a      	ldr	r4, [pc, #40]	@ (80070b8 <__libc_init_array+0x44>)
 800708e:	1b64      	subs	r4, r4, r5
 8007090:	10a4      	asrs	r4, r4, #2
 8007092:	42a6      	cmp	r6, r4
 8007094:	d105      	bne.n	80070a2 <__libc_init_array+0x2e>
 8007096:	bd70      	pop	{r4, r5, r6, pc}
 8007098:	f855 3b04 	ldr.w	r3, [r5], #4
 800709c:	4798      	blx	r3
 800709e:	3601      	adds	r6, #1
 80070a0:	e7ee      	b.n	8007080 <__libc_init_array+0xc>
 80070a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a6:	4798      	blx	r3
 80070a8:	3601      	adds	r6, #1
 80070aa:	e7f2      	b.n	8007092 <__libc_init_array+0x1e>
 80070ac:	0800bd58 	.word	0x0800bd58
 80070b0:	0800bd58 	.word	0x0800bd58
 80070b4:	0800bd58 	.word	0x0800bd58
 80070b8:	0800bd5c 	.word	0x0800bd5c

080070bc <__retarget_lock_init_recursive>:
 80070bc:	4770      	bx	lr

080070be <__retarget_lock_acquire_recursive>:
 80070be:	4770      	bx	lr

080070c0 <__retarget_lock_release_recursive>:
 80070c0:	4770      	bx	lr

080070c2 <memchr>:
 80070c2:	4603      	mov	r3, r0
 80070c4:	b510      	push	{r4, lr}
 80070c6:	b2c9      	uxtb	r1, r1
 80070c8:	4402      	add	r2, r0
 80070ca:	4293      	cmp	r3, r2
 80070cc:	4618      	mov	r0, r3
 80070ce:	d101      	bne.n	80070d4 <memchr+0x12>
 80070d0:	2000      	movs	r0, #0
 80070d2:	e003      	b.n	80070dc <memchr+0x1a>
 80070d4:	7804      	ldrb	r4, [r0, #0]
 80070d6:	3301      	adds	r3, #1
 80070d8:	428c      	cmp	r4, r1
 80070da:	d1f6      	bne.n	80070ca <memchr+0x8>
 80070dc:	bd10      	pop	{r4, pc}

080070de <memcpy>:
 80070de:	440a      	add	r2, r1
 80070e0:	4291      	cmp	r1, r2
 80070e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80070e6:	d100      	bne.n	80070ea <memcpy+0xc>
 80070e8:	4770      	bx	lr
 80070ea:	b510      	push	{r4, lr}
 80070ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070f0:	4291      	cmp	r1, r2
 80070f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070f6:	d1f9      	bne.n	80070ec <memcpy+0xe>
 80070f8:	bd10      	pop	{r4, pc}
	...

080070fc <nanf>:
 80070fc:	4800      	ldr	r0, [pc, #0]	@ (8007100 <nanf+0x4>)
 80070fe:	4770      	bx	lr
 8007100:	7fc00000 	.word	0x7fc00000

08007104 <quorem>:
 8007104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	6903      	ldr	r3, [r0, #16]
 800710a:	690c      	ldr	r4, [r1, #16]
 800710c:	4607      	mov	r7, r0
 800710e:	42a3      	cmp	r3, r4
 8007110:	db7e      	blt.n	8007210 <quorem+0x10c>
 8007112:	3c01      	subs	r4, #1
 8007114:	00a3      	lsls	r3, r4, #2
 8007116:	f100 0514 	add.w	r5, r0, #20
 800711a:	f101 0814 	add.w	r8, r1, #20
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007124:	9301      	str	r3, [sp, #4]
 8007126:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800712a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800712e:	3301      	adds	r3, #1
 8007130:	429a      	cmp	r2, r3
 8007132:	fbb2 f6f3 	udiv	r6, r2, r3
 8007136:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800713a:	d32e      	bcc.n	800719a <quorem+0x96>
 800713c:	f04f 0a00 	mov.w	sl, #0
 8007140:	46c4      	mov	ip, r8
 8007142:	46ae      	mov	lr, r5
 8007144:	46d3      	mov	fp, sl
 8007146:	f85c 3b04 	ldr.w	r3, [ip], #4
 800714a:	b298      	uxth	r0, r3
 800714c:	fb06 a000 	mla	r0, r6, r0, sl
 8007150:	0c1b      	lsrs	r3, r3, #16
 8007152:	0c02      	lsrs	r2, r0, #16
 8007154:	fb06 2303 	mla	r3, r6, r3, r2
 8007158:	f8de 2000 	ldr.w	r2, [lr]
 800715c:	b280      	uxth	r0, r0
 800715e:	b292      	uxth	r2, r2
 8007160:	1a12      	subs	r2, r2, r0
 8007162:	445a      	add	r2, fp
 8007164:	f8de 0000 	ldr.w	r0, [lr]
 8007168:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800716c:	b29b      	uxth	r3, r3
 800716e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007172:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007176:	b292      	uxth	r2, r2
 8007178:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800717c:	45e1      	cmp	r9, ip
 800717e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007182:	f84e 2b04 	str.w	r2, [lr], #4
 8007186:	d2de      	bcs.n	8007146 <quorem+0x42>
 8007188:	9b00      	ldr	r3, [sp, #0]
 800718a:	58eb      	ldr	r3, [r5, r3]
 800718c:	b92b      	cbnz	r3, 800719a <quorem+0x96>
 800718e:	9b01      	ldr	r3, [sp, #4]
 8007190:	3b04      	subs	r3, #4
 8007192:	429d      	cmp	r5, r3
 8007194:	461a      	mov	r2, r3
 8007196:	d32f      	bcc.n	80071f8 <quorem+0xf4>
 8007198:	613c      	str	r4, [r7, #16]
 800719a:	4638      	mov	r0, r7
 800719c:	f001 f9c4 	bl	8008528 <__mcmp>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	db25      	blt.n	80071f0 <quorem+0xec>
 80071a4:	4629      	mov	r1, r5
 80071a6:	2000      	movs	r0, #0
 80071a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80071ac:	f8d1 c000 	ldr.w	ip, [r1]
 80071b0:	fa1f fe82 	uxth.w	lr, r2
 80071b4:	fa1f f38c 	uxth.w	r3, ip
 80071b8:	eba3 030e 	sub.w	r3, r3, lr
 80071bc:	4403      	add	r3, r0
 80071be:	0c12      	lsrs	r2, r2, #16
 80071c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071ce:	45c1      	cmp	r9, r8
 80071d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071d4:	f841 3b04 	str.w	r3, [r1], #4
 80071d8:	d2e6      	bcs.n	80071a8 <quorem+0xa4>
 80071da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071e2:	b922      	cbnz	r2, 80071ee <quorem+0xea>
 80071e4:	3b04      	subs	r3, #4
 80071e6:	429d      	cmp	r5, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	d30b      	bcc.n	8007204 <quorem+0x100>
 80071ec:	613c      	str	r4, [r7, #16]
 80071ee:	3601      	adds	r6, #1
 80071f0:	4630      	mov	r0, r6
 80071f2:	b003      	add	sp, #12
 80071f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f8:	6812      	ldr	r2, [r2, #0]
 80071fa:	3b04      	subs	r3, #4
 80071fc:	2a00      	cmp	r2, #0
 80071fe:	d1cb      	bne.n	8007198 <quorem+0x94>
 8007200:	3c01      	subs	r4, #1
 8007202:	e7c6      	b.n	8007192 <quorem+0x8e>
 8007204:	6812      	ldr	r2, [r2, #0]
 8007206:	3b04      	subs	r3, #4
 8007208:	2a00      	cmp	r2, #0
 800720a:	d1ef      	bne.n	80071ec <quorem+0xe8>
 800720c:	3c01      	subs	r4, #1
 800720e:	e7ea      	b.n	80071e6 <quorem+0xe2>
 8007210:	2000      	movs	r0, #0
 8007212:	e7ee      	b.n	80071f2 <quorem+0xee>
 8007214:	0000      	movs	r0, r0
	...

08007218 <_dtoa_r>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	4614      	mov	r4, r2
 800721e:	461d      	mov	r5, r3
 8007220:	69c7      	ldr	r7, [r0, #28]
 8007222:	b097      	sub	sp, #92	@ 0x5c
 8007224:	4683      	mov	fp, r0
 8007226:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800722a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800722c:	b97f      	cbnz	r7, 800724e <_dtoa_r+0x36>
 800722e:	2010      	movs	r0, #16
 8007230:	f000 fe02 	bl	8007e38 <malloc>
 8007234:	4602      	mov	r2, r0
 8007236:	f8cb 001c 	str.w	r0, [fp, #28]
 800723a:	b920      	cbnz	r0, 8007246 <_dtoa_r+0x2e>
 800723c:	21ef      	movs	r1, #239	@ 0xef
 800723e:	4ba8      	ldr	r3, [pc, #672]	@ (80074e0 <_dtoa_r+0x2c8>)
 8007240:	48a8      	ldr	r0, [pc, #672]	@ (80074e4 <_dtoa_r+0x2cc>)
 8007242:	f002 fc15 	bl	8009a70 <__assert_func>
 8007246:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800724a:	6007      	str	r7, [r0, #0]
 800724c:	60c7      	str	r7, [r0, #12]
 800724e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007252:	6819      	ldr	r1, [r3, #0]
 8007254:	b159      	cbz	r1, 800726e <_dtoa_r+0x56>
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	2301      	movs	r3, #1
 800725a:	4093      	lsls	r3, r2
 800725c:	604a      	str	r2, [r1, #4]
 800725e:	608b      	str	r3, [r1, #8]
 8007260:	4658      	mov	r0, fp
 8007262:	f000 fedf 	bl	8008024 <_Bfree>
 8007266:	2200      	movs	r2, #0
 8007268:	f8db 301c 	ldr.w	r3, [fp, #28]
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	1e2b      	subs	r3, r5, #0
 8007270:	bfaf      	iteee	ge
 8007272:	2300      	movge	r3, #0
 8007274:	2201      	movlt	r2, #1
 8007276:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800727a:	9303      	strlt	r3, [sp, #12]
 800727c:	bfa8      	it	ge
 800727e:	6033      	strge	r3, [r6, #0]
 8007280:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007284:	4b98      	ldr	r3, [pc, #608]	@ (80074e8 <_dtoa_r+0x2d0>)
 8007286:	bfb8      	it	lt
 8007288:	6032      	strlt	r2, [r6, #0]
 800728a:	ea33 0308 	bics.w	r3, r3, r8
 800728e:	d112      	bne.n	80072b6 <_dtoa_r+0x9e>
 8007290:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007294:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800729c:	4323      	orrs	r3, r4
 800729e:	f000 8550 	beq.w	8007d42 <_dtoa_r+0xb2a>
 80072a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072a4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80074ec <_dtoa_r+0x2d4>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 8552 	beq.w	8007d52 <_dtoa_r+0xb3a>
 80072ae:	f10a 0303 	add.w	r3, sl, #3
 80072b2:	f000 bd4c 	b.w	8007d4e <_dtoa_r+0xb36>
 80072b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80072be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072c2:	2200      	movs	r2, #0
 80072c4:	2300      	movs	r3, #0
 80072c6:	f7f9 fb6f 	bl	80009a8 <__aeabi_dcmpeq>
 80072ca:	4607      	mov	r7, r0
 80072cc:	b158      	cbz	r0, 80072e6 <_dtoa_r+0xce>
 80072ce:	2301      	movs	r3, #1
 80072d0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072d6:	b113      	cbz	r3, 80072de <_dtoa_r+0xc6>
 80072d8:	4b85      	ldr	r3, [pc, #532]	@ (80074f0 <_dtoa_r+0x2d8>)
 80072da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80074f4 <_dtoa_r+0x2dc>
 80072e2:	f000 bd36 	b.w	8007d52 <_dtoa_r+0xb3a>
 80072e6:	ab14      	add	r3, sp, #80	@ 0x50
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	ab15      	add	r3, sp, #84	@ 0x54
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	4658      	mov	r0, fp
 80072f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80072f4:	f001 fa30 	bl	8008758 <__d2b>
 80072f8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80072fc:	4681      	mov	r9, r0
 80072fe:	2e00      	cmp	r6, #0
 8007300:	d077      	beq.n	80073f2 <_dtoa_r+0x1da>
 8007302:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007308:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800730c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007310:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007314:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007318:	9712      	str	r7, [sp, #72]	@ 0x48
 800731a:	4619      	mov	r1, r3
 800731c:	2200      	movs	r2, #0
 800731e:	4b76      	ldr	r3, [pc, #472]	@ (80074f8 <_dtoa_r+0x2e0>)
 8007320:	f7f8 ff22 	bl	8000168 <__aeabi_dsub>
 8007324:	a368      	add	r3, pc, #416	@ (adr r3, 80074c8 <_dtoa_r+0x2b0>)
 8007326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732a:	f7f9 f8d5 	bl	80004d8 <__aeabi_dmul>
 800732e:	a368      	add	r3, pc, #416	@ (adr r3, 80074d0 <_dtoa_r+0x2b8>)
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	f7f8 ff1a 	bl	800016c <__adddf3>
 8007338:	4604      	mov	r4, r0
 800733a:	4630      	mov	r0, r6
 800733c:	460d      	mov	r5, r1
 800733e:	f7f9 f861 	bl	8000404 <__aeabi_i2d>
 8007342:	a365      	add	r3, pc, #404	@ (adr r3, 80074d8 <_dtoa_r+0x2c0>)
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f7f9 f8c6 	bl	80004d8 <__aeabi_dmul>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4620      	mov	r0, r4
 8007352:	4629      	mov	r1, r5
 8007354:	f7f8 ff0a 	bl	800016c <__adddf3>
 8007358:	4604      	mov	r4, r0
 800735a:	460d      	mov	r5, r1
 800735c:	f7f9 fb6c 	bl	8000a38 <__aeabi_d2iz>
 8007360:	2200      	movs	r2, #0
 8007362:	4607      	mov	r7, r0
 8007364:	2300      	movs	r3, #0
 8007366:	4620      	mov	r0, r4
 8007368:	4629      	mov	r1, r5
 800736a:	f7f9 fb27 	bl	80009bc <__aeabi_dcmplt>
 800736e:	b140      	cbz	r0, 8007382 <_dtoa_r+0x16a>
 8007370:	4638      	mov	r0, r7
 8007372:	f7f9 f847 	bl	8000404 <__aeabi_i2d>
 8007376:	4622      	mov	r2, r4
 8007378:	462b      	mov	r3, r5
 800737a:	f7f9 fb15 	bl	80009a8 <__aeabi_dcmpeq>
 800737e:	b900      	cbnz	r0, 8007382 <_dtoa_r+0x16a>
 8007380:	3f01      	subs	r7, #1
 8007382:	2f16      	cmp	r7, #22
 8007384:	d853      	bhi.n	800742e <_dtoa_r+0x216>
 8007386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800738a:	4b5c      	ldr	r3, [pc, #368]	@ (80074fc <_dtoa_r+0x2e4>)
 800738c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	f7f9 fb12 	bl	80009bc <__aeabi_dcmplt>
 8007398:	2800      	cmp	r0, #0
 800739a:	d04a      	beq.n	8007432 <_dtoa_r+0x21a>
 800739c:	2300      	movs	r3, #0
 800739e:	3f01      	subs	r7, #1
 80073a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80073a4:	1b9b      	subs	r3, r3, r6
 80073a6:	1e5a      	subs	r2, r3, #1
 80073a8:	bf46      	itte	mi
 80073aa:	f1c3 0801 	rsbmi	r8, r3, #1
 80073ae:	2300      	movmi	r3, #0
 80073b0:	f04f 0800 	movpl.w	r8, #0
 80073b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80073b6:	bf48      	it	mi
 80073b8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80073ba:	2f00      	cmp	r7, #0
 80073bc:	db3b      	blt.n	8007436 <_dtoa_r+0x21e>
 80073be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073c0:	970e      	str	r7, [sp, #56]	@ 0x38
 80073c2:	443b      	add	r3, r7
 80073c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073c6:	2300      	movs	r3, #0
 80073c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80073ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073cc:	2b09      	cmp	r3, #9
 80073ce:	d866      	bhi.n	800749e <_dtoa_r+0x286>
 80073d0:	2b05      	cmp	r3, #5
 80073d2:	bfc4      	itt	gt
 80073d4:	3b04      	subgt	r3, #4
 80073d6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80073d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073da:	bfc8      	it	gt
 80073dc:	2400      	movgt	r4, #0
 80073de:	f1a3 0302 	sub.w	r3, r3, #2
 80073e2:	bfd8      	it	le
 80073e4:	2401      	movle	r4, #1
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d864      	bhi.n	80074b4 <_dtoa_r+0x29c>
 80073ea:	e8df f003 	tbb	[pc, r3]
 80073ee:	382b      	.short	0x382b
 80073f0:	5636      	.short	0x5636
 80073f2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80073f6:	441e      	add	r6, r3
 80073f8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	bfc1      	itttt	gt
 8007400:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007404:	fa08 f803 	lslgt.w	r8, r8, r3
 8007408:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800740c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007410:	bfd6      	itet	le
 8007412:	f1c3 0320 	rsble	r3, r3, #32
 8007416:	ea48 0003 	orrgt.w	r0, r8, r3
 800741a:	fa04 f003 	lslle.w	r0, r4, r3
 800741e:	f7f8 ffe1 	bl	80003e4 <__aeabi_ui2d>
 8007422:	2201      	movs	r2, #1
 8007424:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007428:	3e01      	subs	r6, #1
 800742a:	9212      	str	r2, [sp, #72]	@ 0x48
 800742c:	e775      	b.n	800731a <_dtoa_r+0x102>
 800742e:	2301      	movs	r3, #1
 8007430:	e7b6      	b.n	80073a0 <_dtoa_r+0x188>
 8007432:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007434:	e7b5      	b.n	80073a2 <_dtoa_r+0x18a>
 8007436:	427b      	negs	r3, r7
 8007438:	930a      	str	r3, [sp, #40]	@ 0x28
 800743a:	2300      	movs	r3, #0
 800743c:	eba8 0807 	sub.w	r8, r8, r7
 8007440:	930e      	str	r3, [sp, #56]	@ 0x38
 8007442:	e7c2      	b.n	80073ca <_dtoa_r+0x1b2>
 8007444:	2300      	movs	r3, #0
 8007446:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007448:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800744a:	2b00      	cmp	r3, #0
 800744c:	dc35      	bgt.n	80074ba <_dtoa_r+0x2a2>
 800744e:	2301      	movs	r3, #1
 8007450:	461a      	mov	r2, r3
 8007452:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007456:	9221      	str	r2, [sp, #132]	@ 0x84
 8007458:	e00b      	b.n	8007472 <_dtoa_r+0x25a>
 800745a:	2301      	movs	r3, #1
 800745c:	e7f3      	b.n	8007446 <_dtoa_r+0x22e>
 800745e:	2300      	movs	r3, #0
 8007460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007462:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007464:	18fb      	adds	r3, r7, r3
 8007466:	9308      	str	r3, [sp, #32]
 8007468:	3301      	adds	r3, #1
 800746a:	2b01      	cmp	r3, #1
 800746c:	9307      	str	r3, [sp, #28]
 800746e:	bfb8      	it	lt
 8007470:	2301      	movlt	r3, #1
 8007472:	2100      	movs	r1, #0
 8007474:	2204      	movs	r2, #4
 8007476:	f8db 001c 	ldr.w	r0, [fp, #28]
 800747a:	f102 0514 	add.w	r5, r2, #20
 800747e:	429d      	cmp	r5, r3
 8007480:	d91f      	bls.n	80074c2 <_dtoa_r+0x2aa>
 8007482:	6041      	str	r1, [r0, #4]
 8007484:	4658      	mov	r0, fp
 8007486:	f000 fd8d 	bl	8007fa4 <_Balloc>
 800748a:	4682      	mov	sl, r0
 800748c:	2800      	cmp	r0, #0
 800748e:	d139      	bne.n	8007504 <_dtoa_r+0x2ec>
 8007490:	4602      	mov	r2, r0
 8007492:	f240 11af 	movw	r1, #431	@ 0x1af
 8007496:	4b1a      	ldr	r3, [pc, #104]	@ (8007500 <_dtoa_r+0x2e8>)
 8007498:	e6d2      	b.n	8007240 <_dtoa_r+0x28>
 800749a:	2301      	movs	r3, #1
 800749c:	e7e0      	b.n	8007460 <_dtoa_r+0x248>
 800749e:	2401      	movs	r4, #1
 80074a0:	2300      	movs	r3, #0
 80074a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074a4:	9320      	str	r3, [sp, #128]	@ 0x80
 80074a6:	f04f 33ff 	mov.w	r3, #4294967295
 80074aa:	2200      	movs	r2, #0
 80074ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80074b0:	2312      	movs	r3, #18
 80074b2:	e7d0      	b.n	8007456 <_dtoa_r+0x23e>
 80074b4:	2301      	movs	r3, #1
 80074b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074b8:	e7f5      	b.n	80074a6 <_dtoa_r+0x28e>
 80074ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80074c0:	e7d7      	b.n	8007472 <_dtoa_r+0x25a>
 80074c2:	3101      	adds	r1, #1
 80074c4:	0052      	lsls	r2, r2, #1
 80074c6:	e7d8      	b.n	800747a <_dtoa_r+0x262>
 80074c8:	636f4361 	.word	0x636f4361
 80074cc:	3fd287a7 	.word	0x3fd287a7
 80074d0:	8b60c8b3 	.word	0x8b60c8b3
 80074d4:	3fc68a28 	.word	0x3fc68a28
 80074d8:	509f79fb 	.word	0x509f79fb
 80074dc:	3fd34413 	.word	0x3fd34413
 80074e0:	0800b790 	.word	0x0800b790
 80074e4:	0800b7a7 	.word	0x0800b7a7
 80074e8:	7ff00000 	.word	0x7ff00000
 80074ec:	0800b78c 	.word	0x0800b78c
 80074f0:	0800b75b 	.word	0x0800b75b
 80074f4:	0800b75a 	.word	0x0800b75a
 80074f8:	3ff80000 	.word	0x3ff80000
 80074fc:	0800b8a0 	.word	0x0800b8a0
 8007500:	0800b7ff 	.word	0x0800b7ff
 8007504:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007508:	6018      	str	r0, [r3, #0]
 800750a:	9b07      	ldr	r3, [sp, #28]
 800750c:	2b0e      	cmp	r3, #14
 800750e:	f200 80a4 	bhi.w	800765a <_dtoa_r+0x442>
 8007512:	2c00      	cmp	r4, #0
 8007514:	f000 80a1 	beq.w	800765a <_dtoa_r+0x442>
 8007518:	2f00      	cmp	r7, #0
 800751a:	dd33      	ble.n	8007584 <_dtoa_r+0x36c>
 800751c:	4b86      	ldr	r3, [pc, #536]	@ (8007738 <_dtoa_r+0x520>)
 800751e:	f007 020f 	and.w	r2, r7, #15
 8007522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007526:	05f8      	lsls	r0, r7, #23
 8007528:	e9d3 3400 	ldrd	r3, r4, [r3]
 800752c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007530:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007534:	d516      	bpl.n	8007564 <_dtoa_r+0x34c>
 8007536:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800753a:	4b80      	ldr	r3, [pc, #512]	@ (800773c <_dtoa_r+0x524>)
 800753c:	2603      	movs	r6, #3
 800753e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007542:	f7f9 f8f3 	bl	800072c <__aeabi_ddiv>
 8007546:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800754a:	f004 040f 	and.w	r4, r4, #15
 800754e:	4d7b      	ldr	r5, [pc, #492]	@ (800773c <_dtoa_r+0x524>)
 8007550:	b954      	cbnz	r4, 8007568 <_dtoa_r+0x350>
 8007552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800755a:	f7f9 f8e7 	bl	800072c <__aeabi_ddiv>
 800755e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007562:	e028      	b.n	80075b6 <_dtoa_r+0x39e>
 8007564:	2602      	movs	r6, #2
 8007566:	e7f2      	b.n	800754e <_dtoa_r+0x336>
 8007568:	07e1      	lsls	r1, r4, #31
 800756a:	d508      	bpl.n	800757e <_dtoa_r+0x366>
 800756c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007570:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007574:	f7f8 ffb0 	bl	80004d8 <__aeabi_dmul>
 8007578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800757c:	3601      	adds	r6, #1
 800757e:	1064      	asrs	r4, r4, #1
 8007580:	3508      	adds	r5, #8
 8007582:	e7e5      	b.n	8007550 <_dtoa_r+0x338>
 8007584:	f000 80d2 	beq.w	800772c <_dtoa_r+0x514>
 8007588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800758c:	427c      	negs	r4, r7
 800758e:	4b6a      	ldr	r3, [pc, #424]	@ (8007738 <_dtoa_r+0x520>)
 8007590:	f004 020f 	and.w	r2, r4, #15
 8007594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	f7f8 ff9c 	bl	80004d8 <__aeabi_dmul>
 80075a0:	2602      	movs	r6, #2
 80075a2:	2300      	movs	r3, #0
 80075a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075a8:	4d64      	ldr	r5, [pc, #400]	@ (800773c <_dtoa_r+0x524>)
 80075aa:	1124      	asrs	r4, r4, #4
 80075ac:	2c00      	cmp	r4, #0
 80075ae:	f040 80b2 	bne.w	8007716 <_dtoa_r+0x4fe>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1d3      	bne.n	800755e <_dtoa_r+0x346>
 80075b6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 80b7 	beq.w	8007730 <_dtoa_r+0x518>
 80075c2:	2200      	movs	r2, #0
 80075c4:	4620      	mov	r0, r4
 80075c6:	4629      	mov	r1, r5
 80075c8:	4b5d      	ldr	r3, [pc, #372]	@ (8007740 <_dtoa_r+0x528>)
 80075ca:	f7f9 f9f7 	bl	80009bc <__aeabi_dcmplt>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	f000 80ae 	beq.w	8007730 <_dtoa_r+0x518>
 80075d4:	9b07      	ldr	r3, [sp, #28]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 80aa 	beq.w	8007730 <_dtoa_r+0x518>
 80075dc:	9b08      	ldr	r3, [sp, #32]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	dd37      	ble.n	8007652 <_dtoa_r+0x43a>
 80075e2:	1e7b      	subs	r3, r7, #1
 80075e4:	4620      	mov	r0, r4
 80075e6:	9304      	str	r3, [sp, #16]
 80075e8:	2200      	movs	r2, #0
 80075ea:	4629      	mov	r1, r5
 80075ec:	4b55      	ldr	r3, [pc, #340]	@ (8007744 <_dtoa_r+0x52c>)
 80075ee:	f7f8 ff73 	bl	80004d8 <__aeabi_dmul>
 80075f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075f6:	9c08      	ldr	r4, [sp, #32]
 80075f8:	3601      	adds	r6, #1
 80075fa:	4630      	mov	r0, r6
 80075fc:	f7f8 ff02 	bl	8000404 <__aeabi_i2d>
 8007600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007604:	f7f8 ff68 	bl	80004d8 <__aeabi_dmul>
 8007608:	2200      	movs	r2, #0
 800760a:	4b4f      	ldr	r3, [pc, #316]	@ (8007748 <_dtoa_r+0x530>)
 800760c:	f7f8 fdae 	bl	800016c <__adddf3>
 8007610:	4605      	mov	r5, r0
 8007612:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007616:	2c00      	cmp	r4, #0
 8007618:	f040 809a 	bne.w	8007750 <_dtoa_r+0x538>
 800761c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007620:	2200      	movs	r2, #0
 8007622:	4b4a      	ldr	r3, [pc, #296]	@ (800774c <_dtoa_r+0x534>)
 8007624:	f7f8 fda0 	bl	8000168 <__aeabi_dsub>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007630:	462a      	mov	r2, r5
 8007632:	4633      	mov	r3, r6
 8007634:	f7f9 f9e0 	bl	80009f8 <__aeabi_dcmpgt>
 8007638:	2800      	cmp	r0, #0
 800763a:	f040 828e 	bne.w	8007b5a <_dtoa_r+0x942>
 800763e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007642:	462a      	mov	r2, r5
 8007644:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007648:	f7f9 f9b8 	bl	80009bc <__aeabi_dcmplt>
 800764c:	2800      	cmp	r0, #0
 800764e:	f040 8127 	bne.w	80078a0 <_dtoa_r+0x688>
 8007652:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007656:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800765a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800765c:	2b00      	cmp	r3, #0
 800765e:	f2c0 8163 	blt.w	8007928 <_dtoa_r+0x710>
 8007662:	2f0e      	cmp	r7, #14
 8007664:	f300 8160 	bgt.w	8007928 <_dtoa_r+0x710>
 8007668:	4b33      	ldr	r3, [pc, #204]	@ (8007738 <_dtoa_r+0x520>)
 800766a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800766e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007672:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007676:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007678:	2b00      	cmp	r3, #0
 800767a:	da03      	bge.n	8007684 <_dtoa_r+0x46c>
 800767c:	9b07      	ldr	r3, [sp, #28]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f340 8100 	ble.w	8007884 <_dtoa_r+0x66c>
 8007684:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007688:	4656      	mov	r6, sl
 800768a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800768e:	4620      	mov	r0, r4
 8007690:	4629      	mov	r1, r5
 8007692:	f7f9 f84b 	bl	800072c <__aeabi_ddiv>
 8007696:	f7f9 f9cf 	bl	8000a38 <__aeabi_d2iz>
 800769a:	4680      	mov	r8, r0
 800769c:	f7f8 feb2 	bl	8000404 <__aeabi_i2d>
 80076a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076a4:	f7f8 ff18 	bl	80004d8 <__aeabi_dmul>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4620      	mov	r0, r4
 80076ae:	4629      	mov	r1, r5
 80076b0:	f7f8 fd5a 	bl	8000168 <__aeabi_dsub>
 80076b4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076b8:	9d07      	ldr	r5, [sp, #28]
 80076ba:	f806 4b01 	strb.w	r4, [r6], #1
 80076be:	eba6 040a 	sub.w	r4, r6, sl
 80076c2:	42a5      	cmp	r5, r4
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	f040 8116 	bne.w	80078f8 <_dtoa_r+0x6e0>
 80076cc:	f7f8 fd4e 	bl	800016c <__adddf3>
 80076d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d4:	4604      	mov	r4, r0
 80076d6:	460d      	mov	r5, r1
 80076d8:	f7f9 f98e 	bl	80009f8 <__aeabi_dcmpgt>
 80076dc:	2800      	cmp	r0, #0
 80076de:	f040 80f8 	bne.w	80078d2 <_dtoa_r+0x6ba>
 80076e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076e6:	4620      	mov	r0, r4
 80076e8:	4629      	mov	r1, r5
 80076ea:	f7f9 f95d 	bl	80009a8 <__aeabi_dcmpeq>
 80076ee:	b118      	cbz	r0, 80076f8 <_dtoa_r+0x4e0>
 80076f0:	f018 0f01 	tst.w	r8, #1
 80076f4:	f040 80ed 	bne.w	80078d2 <_dtoa_r+0x6ba>
 80076f8:	4649      	mov	r1, r9
 80076fa:	4658      	mov	r0, fp
 80076fc:	f000 fc92 	bl	8008024 <_Bfree>
 8007700:	2300      	movs	r3, #0
 8007702:	7033      	strb	r3, [r6, #0]
 8007704:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007706:	3701      	adds	r7, #1
 8007708:	601f      	str	r7, [r3, #0]
 800770a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 8320 	beq.w	8007d52 <_dtoa_r+0xb3a>
 8007712:	601e      	str	r6, [r3, #0]
 8007714:	e31d      	b.n	8007d52 <_dtoa_r+0xb3a>
 8007716:	07e2      	lsls	r2, r4, #31
 8007718:	d505      	bpl.n	8007726 <_dtoa_r+0x50e>
 800771a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800771e:	f7f8 fedb 	bl	80004d8 <__aeabi_dmul>
 8007722:	2301      	movs	r3, #1
 8007724:	3601      	adds	r6, #1
 8007726:	1064      	asrs	r4, r4, #1
 8007728:	3508      	adds	r5, #8
 800772a:	e73f      	b.n	80075ac <_dtoa_r+0x394>
 800772c:	2602      	movs	r6, #2
 800772e:	e742      	b.n	80075b6 <_dtoa_r+0x39e>
 8007730:	9c07      	ldr	r4, [sp, #28]
 8007732:	9704      	str	r7, [sp, #16]
 8007734:	e761      	b.n	80075fa <_dtoa_r+0x3e2>
 8007736:	bf00      	nop
 8007738:	0800b8a0 	.word	0x0800b8a0
 800773c:	0800b878 	.word	0x0800b878
 8007740:	3ff00000 	.word	0x3ff00000
 8007744:	40240000 	.word	0x40240000
 8007748:	401c0000 	.word	0x401c0000
 800774c:	40140000 	.word	0x40140000
 8007750:	4b70      	ldr	r3, [pc, #448]	@ (8007914 <_dtoa_r+0x6fc>)
 8007752:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007754:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007758:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800775c:	4454      	add	r4, sl
 800775e:	2900      	cmp	r1, #0
 8007760:	d045      	beq.n	80077ee <_dtoa_r+0x5d6>
 8007762:	2000      	movs	r0, #0
 8007764:	496c      	ldr	r1, [pc, #432]	@ (8007918 <_dtoa_r+0x700>)
 8007766:	f7f8 ffe1 	bl	800072c <__aeabi_ddiv>
 800776a:	4633      	mov	r3, r6
 800776c:	462a      	mov	r2, r5
 800776e:	f7f8 fcfb 	bl	8000168 <__aeabi_dsub>
 8007772:	4656      	mov	r6, sl
 8007774:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800777c:	f7f9 f95c 	bl	8000a38 <__aeabi_d2iz>
 8007780:	4605      	mov	r5, r0
 8007782:	f7f8 fe3f 	bl	8000404 <__aeabi_i2d>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800778e:	f7f8 fceb 	bl	8000168 <__aeabi_dsub>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	3530      	adds	r5, #48	@ 0x30
 8007798:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800779c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077a0:	f806 5b01 	strb.w	r5, [r6], #1
 80077a4:	f7f9 f90a 	bl	80009bc <__aeabi_dcmplt>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d163      	bne.n	8007874 <_dtoa_r+0x65c>
 80077ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077b0:	2000      	movs	r0, #0
 80077b2:	495a      	ldr	r1, [pc, #360]	@ (800791c <_dtoa_r+0x704>)
 80077b4:	f7f8 fcd8 	bl	8000168 <__aeabi_dsub>
 80077b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077bc:	f7f9 f8fe 	bl	80009bc <__aeabi_dcmplt>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	f040 8087 	bne.w	80078d4 <_dtoa_r+0x6bc>
 80077c6:	42a6      	cmp	r6, r4
 80077c8:	f43f af43 	beq.w	8007652 <_dtoa_r+0x43a>
 80077cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077d0:	2200      	movs	r2, #0
 80077d2:	4b53      	ldr	r3, [pc, #332]	@ (8007920 <_dtoa_r+0x708>)
 80077d4:	f7f8 fe80 	bl	80004d8 <__aeabi_dmul>
 80077d8:	2200      	movs	r2, #0
 80077da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e2:	4b4f      	ldr	r3, [pc, #316]	@ (8007920 <_dtoa_r+0x708>)
 80077e4:	f7f8 fe78 	bl	80004d8 <__aeabi_dmul>
 80077e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ec:	e7c4      	b.n	8007778 <_dtoa_r+0x560>
 80077ee:	4631      	mov	r1, r6
 80077f0:	4628      	mov	r0, r5
 80077f2:	f7f8 fe71 	bl	80004d8 <__aeabi_dmul>
 80077f6:	4656      	mov	r6, sl
 80077f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077fc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80077fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007802:	f7f9 f919 	bl	8000a38 <__aeabi_d2iz>
 8007806:	4605      	mov	r5, r0
 8007808:	f7f8 fdfc 	bl	8000404 <__aeabi_i2d>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007814:	f7f8 fca8 	bl	8000168 <__aeabi_dsub>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	3530      	adds	r5, #48	@ 0x30
 800781e:	f806 5b01 	strb.w	r5, [r6], #1
 8007822:	42a6      	cmp	r6, r4
 8007824:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	d124      	bne.n	8007878 <_dtoa_r+0x660>
 800782e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007832:	4b39      	ldr	r3, [pc, #228]	@ (8007918 <_dtoa_r+0x700>)
 8007834:	f7f8 fc9a 	bl	800016c <__adddf3>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007840:	f7f9 f8da 	bl	80009f8 <__aeabi_dcmpgt>
 8007844:	2800      	cmp	r0, #0
 8007846:	d145      	bne.n	80078d4 <_dtoa_r+0x6bc>
 8007848:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800784c:	2000      	movs	r0, #0
 800784e:	4932      	ldr	r1, [pc, #200]	@ (8007918 <_dtoa_r+0x700>)
 8007850:	f7f8 fc8a 	bl	8000168 <__aeabi_dsub>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800785c:	f7f9 f8ae 	bl	80009bc <__aeabi_dcmplt>
 8007860:	2800      	cmp	r0, #0
 8007862:	f43f aef6 	beq.w	8007652 <_dtoa_r+0x43a>
 8007866:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007868:	1e73      	subs	r3, r6, #1
 800786a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800786c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007870:	2b30      	cmp	r3, #48	@ 0x30
 8007872:	d0f8      	beq.n	8007866 <_dtoa_r+0x64e>
 8007874:	9f04      	ldr	r7, [sp, #16]
 8007876:	e73f      	b.n	80076f8 <_dtoa_r+0x4e0>
 8007878:	4b29      	ldr	r3, [pc, #164]	@ (8007920 <_dtoa_r+0x708>)
 800787a:	f7f8 fe2d 	bl	80004d8 <__aeabi_dmul>
 800787e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007882:	e7bc      	b.n	80077fe <_dtoa_r+0x5e6>
 8007884:	d10c      	bne.n	80078a0 <_dtoa_r+0x688>
 8007886:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800788a:	2200      	movs	r2, #0
 800788c:	4b25      	ldr	r3, [pc, #148]	@ (8007924 <_dtoa_r+0x70c>)
 800788e:	f7f8 fe23 	bl	80004d8 <__aeabi_dmul>
 8007892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007896:	f7f9 f8a5 	bl	80009e4 <__aeabi_dcmpge>
 800789a:	2800      	cmp	r0, #0
 800789c:	f000 815b 	beq.w	8007b56 <_dtoa_r+0x93e>
 80078a0:	2400      	movs	r4, #0
 80078a2:	4625      	mov	r5, r4
 80078a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078a6:	4656      	mov	r6, sl
 80078a8:	43db      	mvns	r3, r3
 80078aa:	9304      	str	r3, [sp, #16]
 80078ac:	2700      	movs	r7, #0
 80078ae:	4621      	mov	r1, r4
 80078b0:	4658      	mov	r0, fp
 80078b2:	f000 fbb7 	bl	8008024 <_Bfree>
 80078b6:	2d00      	cmp	r5, #0
 80078b8:	d0dc      	beq.n	8007874 <_dtoa_r+0x65c>
 80078ba:	b12f      	cbz	r7, 80078c8 <_dtoa_r+0x6b0>
 80078bc:	42af      	cmp	r7, r5
 80078be:	d003      	beq.n	80078c8 <_dtoa_r+0x6b0>
 80078c0:	4639      	mov	r1, r7
 80078c2:	4658      	mov	r0, fp
 80078c4:	f000 fbae 	bl	8008024 <_Bfree>
 80078c8:	4629      	mov	r1, r5
 80078ca:	4658      	mov	r0, fp
 80078cc:	f000 fbaa 	bl	8008024 <_Bfree>
 80078d0:	e7d0      	b.n	8007874 <_dtoa_r+0x65c>
 80078d2:	9704      	str	r7, [sp, #16]
 80078d4:	4633      	mov	r3, r6
 80078d6:	461e      	mov	r6, r3
 80078d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078dc:	2a39      	cmp	r2, #57	@ 0x39
 80078de:	d107      	bne.n	80078f0 <_dtoa_r+0x6d8>
 80078e0:	459a      	cmp	sl, r3
 80078e2:	d1f8      	bne.n	80078d6 <_dtoa_r+0x6be>
 80078e4:	9a04      	ldr	r2, [sp, #16]
 80078e6:	3201      	adds	r2, #1
 80078e8:	9204      	str	r2, [sp, #16]
 80078ea:	2230      	movs	r2, #48	@ 0x30
 80078ec:	f88a 2000 	strb.w	r2, [sl]
 80078f0:	781a      	ldrb	r2, [r3, #0]
 80078f2:	3201      	adds	r2, #1
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	e7bd      	b.n	8007874 <_dtoa_r+0x65c>
 80078f8:	2200      	movs	r2, #0
 80078fa:	4b09      	ldr	r3, [pc, #36]	@ (8007920 <_dtoa_r+0x708>)
 80078fc:	f7f8 fdec 	bl	80004d8 <__aeabi_dmul>
 8007900:	2200      	movs	r2, #0
 8007902:	2300      	movs	r3, #0
 8007904:	4604      	mov	r4, r0
 8007906:	460d      	mov	r5, r1
 8007908:	f7f9 f84e 	bl	80009a8 <__aeabi_dcmpeq>
 800790c:	2800      	cmp	r0, #0
 800790e:	f43f aebc 	beq.w	800768a <_dtoa_r+0x472>
 8007912:	e6f1      	b.n	80076f8 <_dtoa_r+0x4e0>
 8007914:	0800b8a0 	.word	0x0800b8a0
 8007918:	3fe00000 	.word	0x3fe00000
 800791c:	3ff00000 	.word	0x3ff00000
 8007920:	40240000 	.word	0x40240000
 8007924:	40140000 	.word	0x40140000
 8007928:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800792a:	2a00      	cmp	r2, #0
 800792c:	f000 80db 	beq.w	8007ae6 <_dtoa_r+0x8ce>
 8007930:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007932:	2a01      	cmp	r2, #1
 8007934:	f300 80bf 	bgt.w	8007ab6 <_dtoa_r+0x89e>
 8007938:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800793a:	2a00      	cmp	r2, #0
 800793c:	f000 80b7 	beq.w	8007aae <_dtoa_r+0x896>
 8007940:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007944:	4646      	mov	r6, r8
 8007946:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007948:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800794a:	2101      	movs	r1, #1
 800794c:	441a      	add	r2, r3
 800794e:	4658      	mov	r0, fp
 8007950:	4498      	add	r8, r3
 8007952:	9209      	str	r2, [sp, #36]	@ 0x24
 8007954:	f000 fc64 	bl	8008220 <__i2b>
 8007958:	4605      	mov	r5, r0
 800795a:	b15e      	cbz	r6, 8007974 <_dtoa_r+0x75c>
 800795c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800795e:	2b00      	cmp	r3, #0
 8007960:	dd08      	ble.n	8007974 <_dtoa_r+0x75c>
 8007962:	42b3      	cmp	r3, r6
 8007964:	bfa8      	it	ge
 8007966:	4633      	movge	r3, r6
 8007968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800796a:	eba8 0803 	sub.w	r8, r8, r3
 800796e:	1af6      	subs	r6, r6, r3
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	9309      	str	r3, [sp, #36]	@ 0x24
 8007974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007976:	b1f3      	cbz	r3, 80079b6 <_dtoa_r+0x79e>
 8007978:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 80b7 	beq.w	8007aee <_dtoa_r+0x8d6>
 8007980:	b18c      	cbz	r4, 80079a6 <_dtoa_r+0x78e>
 8007982:	4629      	mov	r1, r5
 8007984:	4622      	mov	r2, r4
 8007986:	4658      	mov	r0, fp
 8007988:	f000 fd08 	bl	800839c <__pow5mult>
 800798c:	464a      	mov	r2, r9
 800798e:	4601      	mov	r1, r0
 8007990:	4605      	mov	r5, r0
 8007992:	4658      	mov	r0, fp
 8007994:	f000 fc5a 	bl	800824c <__multiply>
 8007998:	4649      	mov	r1, r9
 800799a:	9004      	str	r0, [sp, #16]
 800799c:	4658      	mov	r0, fp
 800799e:	f000 fb41 	bl	8008024 <_Bfree>
 80079a2:	9b04      	ldr	r3, [sp, #16]
 80079a4:	4699      	mov	r9, r3
 80079a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079a8:	1b1a      	subs	r2, r3, r4
 80079aa:	d004      	beq.n	80079b6 <_dtoa_r+0x79e>
 80079ac:	4649      	mov	r1, r9
 80079ae:	4658      	mov	r0, fp
 80079b0:	f000 fcf4 	bl	800839c <__pow5mult>
 80079b4:	4681      	mov	r9, r0
 80079b6:	2101      	movs	r1, #1
 80079b8:	4658      	mov	r0, fp
 80079ba:	f000 fc31 	bl	8008220 <__i2b>
 80079be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079c0:	4604      	mov	r4, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 81c9 	beq.w	8007d5a <_dtoa_r+0xb42>
 80079c8:	461a      	mov	r2, r3
 80079ca:	4601      	mov	r1, r0
 80079cc:	4658      	mov	r0, fp
 80079ce:	f000 fce5 	bl	800839c <__pow5mult>
 80079d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80079d4:	4604      	mov	r4, r0
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	f300 808f 	bgt.w	8007afa <_dtoa_r+0x8e2>
 80079dc:	9b02      	ldr	r3, [sp, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f040 8087 	bne.w	8007af2 <_dtoa_r+0x8da>
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f040 8083 	bne.w	8007af6 <_dtoa_r+0x8de>
 80079f0:	9b03      	ldr	r3, [sp, #12]
 80079f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079f6:	0d1b      	lsrs	r3, r3, #20
 80079f8:	051b      	lsls	r3, r3, #20
 80079fa:	b12b      	cbz	r3, 8007a08 <_dtoa_r+0x7f0>
 80079fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079fe:	f108 0801 	add.w	r8, r8, #1
 8007a02:	3301      	adds	r3, #1
 8007a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a06:	2301      	movs	r3, #1
 8007a08:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 81aa 	beq.w	8007d66 <_dtoa_r+0xb4e>
 8007a12:	6923      	ldr	r3, [r4, #16]
 8007a14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a18:	6918      	ldr	r0, [r3, #16]
 8007a1a:	f000 fbb5 	bl	8008188 <__hi0bits>
 8007a1e:	f1c0 0020 	rsb	r0, r0, #32
 8007a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a24:	4418      	add	r0, r3
 8007a26:	f010 001f 	ands.w	r0, r0, #31
 8007a2a:	d071      	beq.n	8007b10 <_dtoa_r+0x8f8>
 8007a2c:	f1c0 0320 	rsb	r3, r0, #32
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	dd65      	ble.n	8007b00 <_dtoa_r+0x8e8>
 8007a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a36:	f1c0 001c 	rsb	r0, r0, #28
 8007a3a:	4403      	add	r3, r0
 8007a3c:	4480      	add	r8, r0
 8007a3e:	4406      	add	r6, r0
 8007a40:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a42:	f1b8 0f00 	cmp.w	r8, #0
 8007a46:	dd05      	ble.n	8007a54 <_dtoa_r+0x83c>
 8007a48:	4649      	mov	r1, r9
 8007a4a:	4642      	mov	r2, r8
 8007a4c:	4658      	mov	r0, fp
 8007a4e:	f000 fcff 	bl	8008450 <__lshift>
 8007a52:	4681      	mov	r9, r0
 8007a54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	dd05      	ble.n	8007a66 <_dtoa_r+0x84e>
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	4658      	mov	r0, fp
 8007a60:	f000 fcf6 	bl	8008450 <__lshift>
 8007a64:	4604      	mov	r4, r0
 8007a66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d053      	beq.n	8007b14 <_dtoa_r+0x8fc>
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	4648      	mov	r0, r9
 8007a70:	f000 fd5a 	bl	8008528 <__mcmp>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	da4d      	bge.n	8007b14 <_dtoa_r+0x8fc>
 8007a78:	1e7b      	subs	r3, r7, #1
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	220a      	movs	r2, #10
 8007a80:	2300      	movs	r3, #0
 8007a82:	4658      	mov	r0, fp
 8007a84:	f000 faf0 	bl	8008068 <__multadd>
 8007a88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a8a:	4681      	mov	r9, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 816c 	beq.w	8007d6a <_dtoa_r+0xb52>
 8007a92:	2300      	movs	r3, #0
 8007a94:	4629      	mov	r1, r5
 8007a96:	220a      	movs	r2, #10
 8007a98:	4658      	mov	r0, fp
 8007a9a:	f000 fae5 	bl	8008068 <__multadd>
 8007a9e:	9b08      	ldr	r3, [sp, #32]
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	dc61      	bgt.n	8007b6a <_dtoa_r+0x952>
 8007aa6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	dc3b      	bgt.n	8007b24 <_dtoa_r+0x90c>
 8007aac:	e05d      	b.n	8007b6a <_dtoa_r+0x952>
 8007aae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ab0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ab4:	e746      	b.n	8007944 <_dtoa_r+0x72c>
 8007ab6:	9b07      	ldr	r3, [sp, #28]
 8007ab8:	1e5c      	subs	r4, r3, #1
 8007aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007abc:	42a3      	cmp	r3, r4
 8007abe:	bfbf      	itttt	lt
 8007ac0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ac2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007ac4:	1ae3      	sublt	r3, r4, r3
 8007ac6:	18d2      	addlt	r2, r2, r3
 8007ac8:	bfa8      	it	ge
 8007aca:	1b1c      	subge	r4, r3, r4
 8007acc:	9b07      	ldr	r3, [sp, #28]
 8007ace:	bfbe      	ittt	lt
 8007ad0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007ad2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007ad4:	2400      	movlt	r4, #0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bfb5      	itete	lt
 8007ada:	eba8 0603 	sublt.w	r6, r8, r3
 8007ade:	4646      	movge	r6, r8
 8007ae0:	2300      	movlt	r3, #0
 8007ae2:	9b07      	ldrge	r3, [sp, #28]
 8007ae4:	e730      	b.n	8007948 <_dtoa_r+0x730>
 8007ae6:	4646      	mov	r6, r8
 8007ae8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007aea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007aec:	e735      	b.n	800795a <_dtoa_r+0x742>
 8007aee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007af0:	e75c      	b.n	80079ac <_dtoa_r+0x794>
 8007af2:	2300      	movs	r3, #0
 8007af4:	e788      	b.n	8007a08 <_dtoa_r+0x7f0>
 8007af6:	9b02      	ldr	r3, [sp, #8]
 8007af8:	e786      	b.n	8007a08 <_dtoa_r+0x7f0>
 8007afa:	2300      	movs	r3, #0
 8007afc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007afe:	e788      	b.n	8007a12 <_dtoa_r+0x7fa>
 8007b00:	d09f      	beq.n	8007a42 <_dtoa_r+0x82a>
 8007b02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b04:	331c      	adds	r3, #28
 8007b06:	441a      	add	r2, r3
 8007b08:	4498      	add	r8, r3
 8007b0a:	441e      	add	r6, r3
 8007b0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b0e:	e798      	b.n	8007a42 <_dtoa_r+0x82a>
 8007b10:	4603      	mov	r3, r0
 8007b12:	e7f6      	b.n	8007b02 <_dtoa_r+0x8ea>
 8007b14:	9b07      	ldr	r3, [sp, #28]
 8007b16:	9704      	str	r7, [sp, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	dc20      	bgt.n	8007b5e <_dtoa_r+0x946>
 8007b1c:	9308      	str	r3, [sp, #32]
 8007b1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	dd1e      	ble.n	8007b62 <_dtoa_r+0x94a>
 8007b24:	9b08      	ldr	r3, [sp, #32]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f47f aebc 	bne.w	80078a4 <_dtoa_r+0x68c>
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	2205      	movs	r2, #5
 8007b30:	4658      	mov	r0, fp
 8007b32:	f000 fa99 	bl	8008068 <__multadd>
 8007b36:	4601      	mov	r1, r0
 8007b38:	4604      	mov	r4, r0
 8007b3a:	4648      	mov	r0, r9
 8007b3c:	f000 fcf4 	bl	8008528 <__mcmp>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	f77f aeaf 	ble.w	80078a4 <_dtoa_r+0x68c>
 8007b46:	2331      	movs	r3, #49	@ 0x31
 8007b48:	4656      	mov	r6, sl
 8007b4a:	f806 3b01 	strb.w	r3, [r6], #1
 8007b4e:	9b04      	ldr	r3, [sp, #16]
 8007b50:	3301      	adds	r3, #1
 8007b52:	9304      	str	r3, [sp, #16]
 8007b54:	e6aa      	b.n	80078ac <_dtoa_r+0x694>
 8007b56:	9c07      	ldr	r4, [sp, #28]
 8007b58:	9704      	str	r7, [sp, #16]
 8007b5a:	4625      	mov	r5, r4
 8007b5c:	e7f3      	b.n	8007b46 <_dtoa_r+0x92e>
 8007b5e:	9b07      	ldr	r3, [sp, #28]
 8007b60:	9308      	str	r3, [sp, #32]
 8007b62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8104 	beq.w	8007d72 <_dtoa_r+0xb5a>
 8007b6a:	2e00      	cmp	r6, #0
 8007b6c:	dd05      	ble.n	8007b7a <_dtoa_r+0x962>
 8007b6e:	4629      	mov	r1, r5
 8007b70:	4632      	mov	r2, r6
 8007b72:	4658      	mov	r0, fp
 8007b74:	f000 fc6c 	bl	8008450 <__lshift>
 8007b78:	4605      	mov	r5, r0
 8007b7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d05a      	beq.n	8007c36 <_dtoa_r+0xa1e>
 8007b80:	4658      	mov	r0, fp
 8007b82:	6869      	ldr	r1, [r5, #4]
 8007b84:	f000 fa0e 	bl	8007fa4 <_Balloc>
 8007b88:	4606      	mov	r6, r0
 8007b8a:	b928      	cbnz	r0, 8007b98 <_dtoa_r+0x980>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b92:	4b83      	ldr	r3, [pc, #524]	@ (8007da0 <_dtoa_r+0xb88>)
 8007b94:	f7ff bb54 	b.w	8007240 <_dtoa_r+0x28>
 8007b98:	692a      	ldr	r2, [r5, #16]
 8007b9a:	f105 010c 	add.w	r1, r5, #12
 8007b9e:	3202      	adds	r2, #2
 8007ba0:	0092      	lsls	r2, r2, #2
 8007ba2:	300c      	adds	r0, #12
 8007ba4:	f7ff fa9b 	bl	80070de <memcpy>
 8007ba8:	2201      	movs	r2, #1
 8007baa:	4631      	mov	r1, r6
 8007bac:	4658      	mov	r0, fp
 8007bae:	f000 fc4f 	bl	8008450 <__lshift>
 8007bb2:	462f      	mov	r7, r5
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	f10a 0301 	add.w	r3, sl, #1
 8007bba:	9307      	str	r3, [sp, #28]
 8007bbc:	9b08      	ldr	r3, [sp, #32]
 8007bbe:	4453      	add	r3, sl
 8007bc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bc2:	9b02      	ldr	r3, [sp, #8]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bca:	9b07      	ldr	r3, [sp, #28]
 8007bcc:	4621      	mov	r1, r4
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	4648      	mov	r0, r9
 8007bd2:	9302      	str	r3, [sp, #8]
 8007bd4:	f7ff fa96 	bl	8007104 <quorem>
 8007bd8:	4639      	mov	r1, r7
 8007bda:	9008      	str	r0, [sp, #32]
 8007bdc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007be0:	4648      	mov	r0, r9
 8007be2:	f000 fca1 	bl	8008528 <__mcmp>
 8007be6:	462a      	mov	r2, r5
 8007be8:	9009      	str	r0, [sp, #36]	@ 0x24
 8007bea:	4621      	mov	r1, r4
 8007bec:	4658      	mov	r0, fp
 8007bee:	f000 fcb7 	bl	8008560 <__mdiff>
 8007bf2:	68c2      	ldr	r2, [r0, #12]
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	bb02      	cbnz	r2, 8007c3a <_dtoa_r+0xa22>
 8007bf8:	4601      	mov	r1, r0
 8007bfa:	4648      	mov	r0, r9
 8007bfc:	f000 fc94 	bl	8008528 <__mcmp>
 8007c00:	4602      	mov	r2, r0
 8007c02:	4631      	mov	r1, r6
 8007c04:	4658      	mov	r0, fp
 8007c06:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c08:	f000 fa0c 	bl	8008024 <_Bfree>
 8007c0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c10:	9e07      	ldr	r6, [sp, #28]
 8007c12:	ea43 0102 	orr.w	r1, r3, r2
 8007c16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c18:	4319      	orrs	r1, r3
 8007c1a:	d110      	bne.n	8007c3e <_dtoa_r+0xa26>
 8007c1c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c20:	d029      	beq.n	8007c76 <_dtoa_r+0xa5e>
 8007c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	dd02      	ble.n	8007c2e <_dtoa_r+0xa16>
 8007c28:	9b08      	ldr	r3, [sp, #32]
 8007c2a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c2e:	9b02      	ldr	r3, [sp, #8]
 8007c30:	f883 8000 	strb.w	r8, [r3]
 8007c34:	e63b      	b.n	80078ae <_dtoa_r+0x696>
 8007c36:	4628      	mov	r0, r5
 8007c38:	e7bb      	b.n	8007bb2 <_dtoa_r+0x99a>
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	e7e1      	b.n	8007c02 <_dtoa_r+0x9ea>
 8007c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	db04      	blt.n	8007c4e <_dtoa_r+0xa36>
 8007c44:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007c46:	430b      	orrs	r3, r1
 8007c48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	d120      	bne.n	8007c90 <_dtoa_r+0xa78>
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	dded      	ble.n	8007c2e <_dtoa_r+0xa16>
 8007c52:	4649      	mov	r1, r9
 8007c54:	2201      	movs	r2, #1
 8007c56:	4658      	mov	r0, fp
 8007c58:	f000 fbfa 	bl	8008450 <__lshift>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4681      	mov	r9, r0
 8007c60:	f000 fc62 	bl	8008528 <__mcmp>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	dc03      	bgt.n	8007c70 <_dtoa_r+0xa58>
 8007c68:	d1e1      	bne.n	8007c2e <_dtoa_r+0xa16>
 8007c6a:	f018 0f01 	tst.w	r8, #1
 8007c6e:	d0de      	beq.n	8007c2e <_dtoa_r+0xa16>
 8007c70:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c74:	d1d8      	bne.n	8007c28 <_dtoa_r+0xa10>
 8007c76:	2339      	movs	r3, #57	@ 0x39
 8007c78:	9a02      	ldr	r2, [sp, #8]
 8007c7a:	7013      	strb	r3, [r2, #0]
 8007c7c:	4633      	mov	r3, r6
 8007c7e:	461e      	mov	r6, r3
 8007c80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	2a39      	cmp	r2, #57	@ 0x39
 8007c88:	d052      	beq.n	8007d30 <_dtoa_r+0xb18>
 8007c8a:	3201      	adds	r2, #1
 8007c8c:	701a      	strb	r2, [r3, #0]
 8007c8e:	e60e      	b.n	80078ae <_dtoa_r+0x696>
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	dd07      	ble.n	8007ca4 <_dtoa_r+0xa8c>
 8007c94:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c98:	d0ed      	beq.n	8007c76 <_dtoa_r+0xa5e>
 8007c9a:	9a02      	ldr	r2, [sp, #8]
 8007c9c:	f108 0301 	add.w	r3, r8, #1
 8007ca0:	7013      	strb	r3, [r2, #0]
 8007ca2:	e604      	b.n	80078ae <_dtoa_r+0x696>
 8007ca4:	9b07      	ldr	r3, [sp, #28]
 8007ca6:	9a07      	ldr	r2, [sp, #28]
 8007ca8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007cac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d028      	beq.n	8007d04 <_dtoa_r+0xaec>
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	220a      	movs	r2, #10
 8007cb8:	4658      	mov	r0, fp
 8007cba:	f000 f9d5 	bl	8008068 <__multadd>
 8007cbe:	42af      	cmp	r7, r5
 8007cc0:	4681      	mov	r9, r0
 8007cc2:	f04f 0300 	mov.w	r3, #0
 8007cc6:	f04f 020a 	mov.w	r2, #10
 8007cca:	4639      	mov	r1, r7
 8007ccc:	4658      	mov	r0, fp
 8007cce:	d107      	bne.n	8007ce0 <_dtoa_r+0xac8>
 8007cd0:	f000 f9ca 	bl	8008068 <__multadd>
 8007cd4:	4607      	mov	r7, r0
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	9b07      	ldr	r3, [sp, #28]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	9307      	str	r3, [sp, #28]
 8007cde:	e774      	b.n	8007bca <_dtoa_r+0x9b2>
 8007ce0:	f000 f9c2 	bl	8008068 <__multadd>
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	4607      	mov	r7, r0
 8007ce8:	2300      	movs	r3, #0
 8007cea:	220a      	movs	r2, #10
 8007cec:	4658      	mov	r0, fp
 8007cee:	f000 f9bb 	bl	8008068 <__multadd>
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	e7f0      	b.n	8007cd8 <_dtoa_r+0xac0>
 8007cf6:	9b08      	ldr	r3, [sp, #32]
 8007cf8:	2700      	movs	r7, #0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	bfcc      	ite	gt
 8007cfe:	461e      	movgt	r6, r3
 8007d00:	2601      	movle	r6, #1
 8007d02:	4456      	add	r6, sl
 8007d04:	4649      	mov	r1, r9
 8007d06:	2201      	movs	r2, #1
 8007d08:	4658      	mov	r0, fp
 8007d0a:	f000 fba1 	bl	8008450 <__lshift>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4681      	mov	r9, r0
 8007d12:	f000 fc09 	bl	8008528 <__mcmp>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	dcb0      	bgt.n	8007c7c <_dtoa_r+0xa64>
 8007d1a:	d102      	bne.n	8007d22 <_dtoa_r+0xb0a>
 8007d1c:	f018 0f01 	tst.w	r8, #1
 8007d20:	d1ac      	bne.n	8007c7c <_dtoa_r+0xa64>
 8007d22:	4633      	mov	r3, r6
 8007d24:	461e      	mov	r6, r3
 8007d26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d2a:	2a30      	cmp	r2, #48	@ 0x30
 8007d2c:	d0fa      	beq.n	8007d24 <_dtoa_r+0xb0c>
 8007d2e:	e5be      	b.n	80078ae <_dtoa_r+0x696>
 8007d30:	459a      	cmp	sl, r3
 8007d32:	d1a4      	bne.n	8007c7e <_dtoa_r+0xa66>
 8007d34:	9b04      	ldr	r3, [sp, #16]
 8007d36:	3301      	adds	r3, #1
 8007d38:	9304      	str	r3, [sp, #16]
 8007d3a:	2331      	movs	r3, #49	@ 0x31
 8007d3c:	f88a 3000 	strb.w	r3, [sl]
 8007d40:	e5b5      	b.n	80078ae <_dtoa_r+0x696>
 8007d42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d44:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007da4 <_dtoa_r+0xb8c>
 8007d48:	b11b      	cbz	r3, 8007d52 <_dtoa_r+0xb3a>
 8007d4a:	f10a 0308 	add.w	r3, sl, #8
 8007d4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	4650      	mov	r0, sl
 8007d54:	b017      	add	sp, #92	@ 0x5c
 8007d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	f77f ae3d 	ble.w	80079dc <_dtoa_r+0x7c4>
 8007d62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d64:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d66:	2001      	movs	r0, #1
 8007d68:	e65b      	b.n	8007a22 <_dtoa_r+0x80a>
 8007d6a:	9b08      	ldr	r3, [sp, #32]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f77f aed6 	ble.w	8007b1e <_dtoa_r+0x906>
 8007d72:	4656      	mov	r6, sl
 8007d74:	4621      	mov	r1, r4
 8007d76:	4648      	mov	r0, r9
 8007d78:	f7ff f9c4 	bl	8007104 <quorem>
 8007d7c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d80:	9b08      	ldr	r3, [sp, #32]
 8007d82:	f806 8b01 	strb.w	r8, [r6], #1
 8007d86:	eba6 020a 	sub.w	r2, r6, sl
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	ddb3      	ble.n	8007cf6 <_dtoa_r+0xade>
 8007d8e:	4649      	mov	r1, r9
 8007d90:	2300      	movs	r3, #0
 8007d92:	220a      	movs	r2, #10
 8007d94:	4658      	mov	r0, fp
 8007d96:	f000 f967 	bl	8008068 <__multadd>
 8007d9a:	4681      	mov	r9, r0
 8007d9c:	e7ea      	b.n	8007d74 <_dtoa_r+0xb5c>
 8007d9e:	bf00      	nop
 8007da0:	0800b7ff 	.word	0x0800b7ff
 8007da4:	0800b783 	.word	0x0800b783

08007da8 <_free_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4605      	mov	r5, r0
 8007dac:	2900      	cmp	r1, #0
 8007dae:	d040      	beq.n	8007e32 <_free_r+0x8a>
 8007db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007db4:	1f0c      	subs	r4, r1, #4
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	bfb8      	it	lt
 8007dba:	18e4      	addlt	r4, r4, r3
 8007dbc:	f000 f8e6 	bl	8007f8c <__malloc_lock>
 8007dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8007e34 <_free_r+0x8c>)
 8007dc2:	6813      	ldr	r3, [r2, #0]
 8007dc4:	b933      	cbnz	r3, 8007dd4 <_free_r+0x2c>
 8007dc6:	6063      	str	r3, [r4, #4]
 8007dc8:	6014      	str	r4, [r2, #0]
 8007dca:	4628      	mov	r0, r5
 8007dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dd0:	f000 b8e2 	b.w	8007f98 <__malloc_unlock>
 8007dd4:	42a3      	cmp	r3, r4
 8007dd6:	d908      	bls.n	8007dea <_free_r+0x42>
 8007dd8:	6820      	ldr	r0, [r4, #0]
 8007dda:	1821      	adds	r1, r4, r0
 8007ddc:	428b      	cmp	r3, r1
 8007dde:	bf01      	itttt	eq
 8007de0:	6819      	ldreq	r1, [r3, #0]
 8007de2:	685b      	ldreq	r3, [r3, #4]
 8007de4:	1809      	addeq	r1, r1, r0
 8007de6:	6021      	streq	r1, [r4, #0]
 8007de8:	e7ed      	b.n	8007dc6 <_free_r+0x1e>
 8007dea:	461a      	mov	r2, r3
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	b10b      	cbz	r3, 8007df4 <_free_r+0x4c>
 8007df0:	42a3      	cmp	r3, r4
 8007df2:	d9fa      	bls.n	8007dea <_free_r+0x42>
 8007df4:	6811      	ldr	r1, [r2, #0]
 8007df6:	1850      	adds	r0, r2, r1
 8007df8:	42a0      	cmp	r0, r4
 8007dfa:	d10b      	bne.n	8007e14 <_free_r+0x6c>
 8007dfc:	6820      	ldr	r0, [r4, #0]
 8007dfe:	4401      	add	r1, r0
 8007e00:	1850      	adds	r0, r2, r1
 8007e02:	4283      	cmp	r3, r0
 8007e04:	6011      	str	r1, [r2, #0]
 8007e06:	d1e0      	bne.n	8007dca <_free_r+0x22>
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	4408      	add	r0, r1
 8007e0e:	6010      	str	r0, [r2, #0]
 8007e10:	6053      	str	r3, [r2, #4]
 8007e12:	e7da      	b.n	8007dca <_free_r+0x22>
 8007e14:	d902      	bls.n	8007e1c <_free_r+0x74>
 8007e16:	230c      	movs	r3, #12
 8007e18:	602b      	str	r3, [r5, #0]
 8007e1a:	e7d6      	b.n	8007dca <_free_r+0x22>
 8007e1c:	6820      	ldr	r0, [r4, #0]
 8007e1e:	1821      	adds	r1, r4, r0
 8007e20:	428b      	cmp	r3, r1
 8007e22:	bf01      	itttt	eq
 8007e24:	6819      	ldreq	r1, [r3, #0]
 8007e26:	685b      	ldreq	r3, [r3, #4]
 8007e28:	1809      	addeq	r1, r1, r0
 8007e2a:	6021      	streq	r1, [r4, #0]
 8007e2c:	6063      	str	r3, [r4, #4]
 8007e2e:	6054      	str	r4, [r2, #4]
 8007e30:	e7cb      	b.n	8007dca <_free_r+0x22>
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	20000a3c 	.word	0x20000a3c

08007e38 <malloc>:
 8007e38:	4b02      	ldr	r3, [pc, #8]	@ (8007e44 <malloc+0xc>)
 8007e3a:	4601      	mov	r1, r0
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	f000 b825 	b.w	8007e8c <_malloc_r>
 8007e42:	bf00      	nop
 8007e44:	20000028 	.word	0x20000028

08007e48 <sbrk_aligned>:
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	4e0f      	ldr	r6, [pc, #60]	@ (8007e88 <sbrk_aligned+0x40>)
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	6831      	ldr	r1, [r6, #0]
 8007e50:	4605      	mov	r5, r0
 8007e52:	b911      	cbnz	r1, 8007e5a <sbrk_aligned+0x12>
 8007e54:	f001 fdf6 	bl	8009a44 <_sbrk_r>
 8007e58:	6030      	str	r0, [r6, #0]
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f001 fdf1 	bl	8009a44 <_sbrk_r>
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	d103      	bne.n	8007e6e <sbrk_aligned+0x26>
 8007e66:	f04f 34ff 	mov.w	r4, #4294967295
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	bd70      	pop	{r4, r5, r6, pc}
 8007e6e:	1cc4      	adds	r4, r0, #3
 8007e70:	f024 0403 	bic.w	r4, r4, #3
 8007e74:	42a0      	cmp	r0, r4
 8007e76:	d0f8      	beq.n	8007e6a <sbrk_aligned+0x22>
 8007e78:	1a21      	subs	r1, r4, r0
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	f001 fde2 	bl	8009a44 <_sbrk_r>
 8007e80:	3001      	adds	r0, #1
 8007e82:	d1f2      	bne.n	8007e6a <sbrk_aligned+0x22>
 8007e84:	e7ef      	b.n	8007e66 <sbrk_aligned+0x1e>
 8007e86:	bf00      	nop
 8007e88:	20000a38 	.word	0x20000a38

08007e8c <_malloc_r>:
 8007e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e90:	1ccd      	adds	r5, r1, #3
 8007e92:	f025 0503 	bic.w	r5, r5, #3
 8007e96:	3508      	adds	r5, #8
 8007e98:	2d0c      	cmp	r5, #12
 8007e9a:	bf38      	it	cc
 8007e9c:	250c      	movcc	r5, #12
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	4606      	mov	r6, r0
 8007ea2:	db01      	blt.n	8007ea8 <_malloc_r+0x1c>
 8007ea4:	42a9      	cmp	r1, r5
 8007ea6:	d904      	bls.n	8007eb2 <_malloc_r+0x26>
 8007ea8:	230c      	movs	r3, #12
 8007eaa:	6033      	str	r3, [r6, #0]
 8007eac:	2000      	movs	r0, #0
 8007eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f88 <_malloc_r+0xfc>
 8007eb6:	f000 f869 	bl	8007f8c <__malloc_lock>
 8007eba:	f8d8 3000 	ldr.w	r3, [r8]
 8007ebe:	461c      	mov	r4, r3
 8007ec0:	bb44      	cbnz	r4, 8007f14 <_malloc_r+0x88>
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f7ff ffbf 	bl	8007e48 <sbrk_aligned>
 8007eca:	1c43      	adds	r3, r0, #1
 8007ecc:	4604      	mov	r4, r0
 8007ece:	d158      	bne.n	8007f82 <_malloc_r+0xf6>
 8007ed0:	f8d8 4000 	ldr.w	r4, [r8]
 8007ed4:	4627      	mov	r7, r4
 8007ed6:	2f00      	cmp	r7, #0
 8007ed8:	d143      	bne.n	8007f62 <_malloc_r+0xd6>
 8007eda:	2c00      	cmp	r4, #0
 8007edc:	d04b      	beq.n	8007f76 <_malloc_r+0xea>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	eb04 0903 	add.w	r9, r4, r3
 8007ee8:	f001 fdac 	bl	8009a44 <_sbrk_r>
 8007eec:	4581      	cmp	r9, r0
 8007eee:	d142      	bne.n	8007f76 <_malloc_r+0xea>
 8007ef0:	6821      	ldr	r1, [r4, #0]
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	1a6d      	subs	r5, r5, r1
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	f7ff ffa6 	bl	8007e48 <sbrk_aligned>
 8007efc:	3001      	adds	r0, #1
 8007efe:	d03a      	beq.n	8007f76 <_malloc_r+0xea>
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	442b      	add	r3, r5
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	f8d8 3000 	ldr.w	r3, [r8]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	bb62      	cbnz	r2, 8007f68 <_malloc_r+0xdc>
 8007f0e:	f8c8 7000 	str.w	r7, [r8]
 8007f12:	e00f      	b.n	8007f34 <_malloc_r+0xa8>
 8007f14:	6822      	ldr	r2, [r4, #0]
 8007f16:	1b52      	subs	r2, r2, r5
 8007f18:	d420      	bmi.n	8007f5c <_malloc_r+0xd0>
 8007f1a:	2a0b      	cmp	r2, #11
 8007f1c:	d917      	bls.n	8007f4e <_malloc_r+0xc2>
 8007f1e:	1961      	adds	r1, r4, r5
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	6025      	str	r5, [r4, #0]
 8007f24:	bf18      	it	ne
 8007f26:	6059      	strne	r1, [r3, #4]
 8007f28:	6863      	ldr	r3, [r4, #4]
 8007f2a:	bf08      	it	eq
 8007f2c:	f8c8 1000 	streq.w	r1, [r8]
 8007f30:	5162      	str	r2, [r4, r5]
 8007f32:	604b      	str	r3, [r1, #4]
 8007f34:	4630      	mov	r0, r6
 8007f36:	f000 f82f 	bl	8007f98 <__malloc_unlock>
 8007f3a:	f104 000b 	add.w	r0, r4, #11
 8007f3e:	1d23      	adds	r3, r4, #4
 8007f40:	f020 0007 	bic.w	r0, r0, #7
 8007f44:	1ac2      	subs	r2, r0, r3
 8007f46:	bf1c      	itt	ne
 8007f48:	1a1b      	subne	r3, r3, r0
 8007f4a:	50a3      	strne	r3, [r4, r2]
 8007f4c:	e7af      	b.n	8007eae <_malloc_r+0x22>
 8007f4e:	6862      	ldr	r2, [r4, #4]
 8007f50:	42a3      	cmp	r3, r4
 8007f52:	bf0c      	ite	eq
 8007f54:	f8c8 2000 	streq.w	r2, [r8]
 8007f58:	605a      	strne	r2, [r3, #4]
 8007f5a:	e7eb      	b.n	8007f34 <_malloc_r+0xa8>
 8007f5c:	4623      	mov	r3, r4
 8007f5e:	6864      	ldr	r4, [r4, #4]
 8007f60:	e7ae      	b.n	8007ec0 <_malloc_r+0x34>
 8007f62:	463c      	mov	r4, r7
 8007f64:	687f      	ldr	r7, [r7, #4]
 8007f66:	e7b6      	b.n	8007ed6 <_malloc_r+0x4a>
 8007f68:	461a      	mov	r2, r3
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	42a3      	cmp	r3, r4
 8007f6e:	d1fb      	bne.n	8007f68 <_malloc_r+0xdc>
 8007f70:	2300      	movs	r3, #0
 8007f72:	6053      	str	r3, [r2, #4]
 8007f74:	e7de      	b.n	8007f34 <_malloc_r+0xa8>
 8007f76:	230c      	movs	r3, #12
 8007f78:	4630      	mov	r0, r6
 8007f7a:	6033      	str	r3, [r6, #0]
 8007f7c:	f000 f80c 	bl	8007f98 <__malloc_unlock>
 8007f80:	e794      	b.n	8007eac <_malloc_r+0x20>
 8007f82:	6005      	str	r5, [r0, #0]
 8007f84:	e7d6      	b.n	8007f34 <_malloc_r+0xa8>
 8007f86:	bf00      	nop
 8007f88:	20000a3c 	.word	0x20000a3c

08007f8c <__malloc_lock>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	@ (8007f94 <__malloc_lock+0x8>)
 8007f8e:	f7ff b896 	b.w	80070be <__retarget_lock_acquire_recursive>
 8007f92:	bf00      	nop
 8007f94:	20000a34 	.word	0x20000a34

08007f98 <__malloc_unlock>:
 8007f98:	4801      	ldr	r0, [pc, #4]	@ (8007fa0 <__malloc_unlock+0x8>)
 8007f9a:	f7ff b891 	b.w	80070c0 <__retarget_lock_release_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	20000a34 	.word	0x20000a34

08007fa4 <_Balloc>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	69c6      	ldr	r6, [r0, #28]
 8007fa8:	4604      	mov	r4, r0
 8007faa:	460d      	mov	r5, r1
 8007fac:	b976      	cbnz	r6, 8007fcc <_Balloc+0x28>
 8007fae:	2010      	movs	r0, #16
 8007fb0:	f7ff ff42 	bl	8007e38 <malloc>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	61e0      	str	r0, [r4, #28]
 8007fb8:	b920      	cbnz	r0, 8007fc4 <_Balloc+0x20>
 8007fba:	216b      	movs	r1, #107	@ 0x6b
 8007fbc:	4b17      	ldr	r3, [pc, #92]	@ (800801c <_Balloc+0x78>)
 8007fbe:	4818      	ldr	r0, [pc, #96]	@ (8008020 <_Balloc+0x7c>)
 8007fc0:	f001 fd56 	bl	8009a70 <__assert_func>
 8007fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fc8:	6006      	str	r6, [r0, #0]
 8007fca:	60c6      	str	r6, [r0, #12]
 8007fcc:	69e6      	ldr	r6, [r4, #28]
 8007fce:	68f3      	ldr	r3, [r6, #12]
 8007fd0:	b183      	cbz	r3, 8007ff4 <_Balloc+0x50>
 8007fd2:	69e3      	ldr	r3, [r4, #28]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fda:	b9b8      	cbnz	r0, 800800c <_Balloc+0x68>
 8007fdc:	2101      	movs	r1, #1
 8007fde:	fa01 f605 	lsl.w	r6, r1, r5
 8007fe2:	1d72      	adds	r2, r6, #5
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	0092      	lsls	r2, r2, #2
 8007fe8:	f001 fd60 	bl	8009aac <_calloc_r>
 8007fec:	b160      	cbz	r0, 8008008 <_Balloc+0x64>
 8007fee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ff2:	e00e      	b.n	8008012 <_Balloc+0x6e>
 8007ff4:	2221      	movs	r2, #33	@ 0x21
 8007ff6:	2104      	movs	r1, #4
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f001 fd57 	bl	8009aac <_calloc_r>
 8007ffe:	69e3      	ldr	r3, [r4, #28]
 8008000:	60f0      	str	r0, [r6, #12]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e4      	bne.n	8007fd2 <_Balloc+0x2e>
 8008008:	2000      	movs	r0, #0
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	6802      	ldr	r2, [r0, #0]
 800800e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008012:	2300      	movs	r3, #0
 8008014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008018:	e7f7      	b.n	800800a <_Balloc+0x66>
 800801a:	bf00      	nop
 800801c:	0800b790 	.word	0x0800b790
 8008020:	0800b810 	.word	0x0800b810

08008024 <_Bfree>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	69c6      	ldr	r6, [r0, #28]
 8008028:	4605      	mov	r5, r0
 800802a:	460c      	mov	r4, r1
 800802c:	b976      	cbnz	r6, 800804c <_Bfree+0x28>
 800802e:	2010      	movs	r0, #16
 8008030:	f7ff ff02 	bl	8007e38 <malloc>
 8008034:	4602      	mov	r2, r0
 8008036:	61e8      	str	r0, [r5, #28]
 8008038:	b920      	cbnz	r0, 8008044 <_Bfree+0x20>
 800803a:	218f      	movs	r1, #143	@ 0x8f
 800803c:	4b08      	ldr	r3, [pc, #32]	@ (8008060 <_Bfree+0x3c>)
 800803e:	4809      	ldr	r0, [pc, #36]	@ (8008064 <_Bfree+0x40>)
 8008040:	f001 fd16 	bl	8009a70 <__assert_func>
 8008044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008048:	6006      	str	r6, [r0, #0]
 800804a:	60c6      	str	r6, [r0, #12]
 800804c:	b13c      	cbz	r4, 800805e <_Bfree+0x3a>
 800804e:	69eb      	ldr	r3, [r5, #28]
 8008050:	6862      	ldr	r2, [r4, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008058:	6021      	str	r1, [r4, #0]
 800805a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	0800b790 	.word	0x0800b790
 8008064:	0800b810 	.word	0x0800b810

08008068 <__multadd>:
 8008068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806c:	4607      	mov	r7, r0
 800806e:	460c      	mov	r4, r1
 8008070:	461e      	mov	r6, r3
 8008072:	2000      	movs	r0, #0
 8008074:	690d      	ldr	r5, [r1, #16]
 8008076:	f101 0c14 	add.w	ip, r1, #20
 800807a:	f8dc 3000 	ldr.w	r3, [ip]
 800807e:	3001      	adds	r0, #1
 8008080:	b299      	uxth	r1, r3
 8008082:	fb02 6101 	mla	r1, r2, r1, r6
 8008086:	0c1e      	lsrs	r6, r3, #16
 8008088:	0c0b      	lsrs	r3, r1, #16
 800808a:	fb02 3306 	mla	r3, r2, r6, r3
 800808e:	b289      	uxth	r1, r1
 8008090:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008094:	4285      	cmp	r5, r0
 8008096:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800809a:	f84c 1b04 	str.w	r1, [ip], #4
 800809e:	dcec      	bgt.n	800807a <__multadd+0x12>
 80080a0:	b30e      	cbz	r6, 80080e6 <__multadd+0x7e>
 80080a2:	68a3      	ldr	r3, [r4, #8]
 80080a4:	42ab      	cmp	r3, r5
 80080a6:	dc19      	bgt.n	80080dc <__multadd+0x74>
 80080a8:	6861      	ldr	r1, [r4, #4]
 80080aa:	4638      	mov	r0, r7
 80080ac:	3101      	adds	r1, #1
 80080ae:	f7ff ff79 	bl	8007fa4 <_Balloc>
 80080b2:	4680      	mov	r8, r0
 80080b4:	b928      	cbnz	r0, 80080c2 <__multadd+0x5a>
 80080b6:	4602      	mov	r2, r0
 80080b8:	21ba      	movs	r1, #186	@ 0xba
 80080ba:	4b0c      	ldr	r3, [pc, #48]	@ (80080ec <__multadd+0x84>)
 80080bc:	480c      	ldr	r0, [pc, #48]	@ (80080f0 <__multadd+0x88>)
 80080be:	f001 fcd7 	bl	8009a70 <__assert_func>
 80080c2:	6922      	ldr	r2, [r4, #16]
 80080c4:	f104 010c 	add.w	r1, r4, #12
 80080c8:	3202      	adds	r2, #2
 80080ca:	0092      	lsls	r2, r2, #2
 80080cc:	300c      	adds	r0, #12
 80080ce:	f7ff f806 	bl	80070de <memcpy>
 80080d2:	4621      	mov	r1, r4
 80080d4:	4638      	mov	r0, r7
 80080d6:	f7ff ffa5 	bl	8008024 <_Bfree>
 80080da:	4644      	mov	r4, r8
 80080dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080e0:	3501      	adds	r5, #1
 80080e2:	615e      	str	r6, [r3, #20]
 80080e4:	6125      	str	r5, [r4, #16]
 80080e6:	4620      	mov	r0, r4
 80080e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ec:	0800b7ff 	.word	0x0800b7ff
 80080f0:	0800b810 	.word	0x0800b810

080080f4 <__s2b>:
 80080f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f8:	4615      	mov	r5, r2
 80080fa:	2209      	movs	r2, #9
 80080fc:	461f      	mov	r7, r3
 80080fe:	3308      	adds	r3, #8
 8008100:	460c      	mov	r4, r1
 8008102:	fb93 f3f2 	sdiv	r3, r3, r2
 8008106:	4606      	mov	r6, r0
 8008108:	2201      	movs	r2, #1
 800810a:	2100      	movs	r1, #0
 800810c:	429a      	cmp	r2, r3
 800810e:	db09      	blt.n	8008124 <__s2b+0x30>
 8008110:	4630      	mov	r0, r6
 8008112:	f7ff ff47 	bl	8007fa4 <_Balloc>
 8008116:	b940      	cbnz	r0, 800812a <__s2b+0x36>
 8008118:	4602      	mov	r2, r0
 800811a:	21d3      	movs	r1, #211	@ 0xd3
 800811c:	4b18      	ldr	r3, [pc, #96]	@ (8008180 <__s2b+0x8c>)
 800811e:	4819      	ldr	r0, [pc, #100]	@ (8008184 <__s2b+0x90>)
 8008120:	f001 fca6 	bl	8009a70 <__assert_func>
 8008124:	0052      	lsls	r2, r2, #1
 8008126:	3101      	adds	r1, #1
 8008128:	e7f0      	b.n	800810c <__s2b+0x18>
 800812a:	9b08      	ldr	r3, [sp, #32]
 800812c:	2d09      	cmp	r5, #9
 800812e:	6143      	str	r3, [r0, #20]
 8008130:	f04f 0301 	mov.w	r3, #1
 8008134:	6103      	str	r3, [r0, #16]
 8008136:	dd16      	ble.n	8008166 <__s2b+0x72>
 8008138:	f104 0909 	add.w	r9, r4, #9
 800813c:	46c8      	mov	r8, r9
 800813e:	442c      	add	r4, r5
 8008140:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008144:	4601      	mov	r1, r0
 8008146:	220a      	movs	r2, #10
 8008148:	4630      	mov	r0, r6
 800814a:	3b30      	subs	r3, #48	@ 0x30
 800814c:	f7ff ff8c 	bl	8008068 <__multadd>
 8008150:	45a0      	cmp	r8, r4
 8008152:	d1f5      	bne.n	8008140 <__s2b+0x4c>
 8008154:	f1a5 0408 	sub.w	r4, r5, #8
 8008158:	444c      	add	r4, r9
 800815a:	1b2d      	subs	r5, r5, r4
 800815c:	1963      	adds	r3, r4, r5
 800815e:	42bb      	cmp	r3, r7
 8008160:	db04      	blt.n	800816c <__s2b+0x78>
 8008162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008166:	2509      	movs	r5, #9
 8008168:	340a      	adds	r4, #10
 800816a:	e7f6      	b.n	800815a <__s2b+0x66>
 800816c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008170:	4601      	mov	r1, r0
 8008172:	220a      	movs	r2, #10
 8008174:	4630      	mov	r0, r6
 8008176:	3b30      	subs	r3, #48	@ 0x30
 8008178:	f7ff ff76 	bl	8008068 <__multadd>
 800817c:	e7ee      	b.n	800815c <__s2b+0x68>
 800817e:	bf00      	nop
 8008180:	0800b7ff 	.word	0x0800b7ff
 8008184:	0800b810 	.word	0x0800b810

08008188 <__hi0bits>:
 8008188:	4603      	mov	r3, r0
 800818a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800818e:	bf3a      	itte	cc
 8008190:	0403      	lslcc	r3, r0, #16
 8008192:	2010      	movcc	r0, #16
 8008194:	2000      	movcs	r0, #0
 8008196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800819a:	bf3c      	itt	cc
 800819c:	021b      	lslcc	r3, r3, #8
 800819e:	3008      	addcc	r0, #8
 80081a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081a4:	bf3c      	itt	cc
 80081a6:	011b      	lslcc	r3, r3, #4
 80081a8:	3004      	addcc	r0, #4
 80081aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081ae:	bf3c      	itt	cc
 80081b0:	009b      	lslcc	r3, r3, #2
 80081b2:	3002      	addcc	r0, #2
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	db05      	blt.n	80081c4 <__hi0bits+0x3c>
 80081b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80081bc:	f100 0001 	add.w	r0, r0, #1
 80081c0:	bf08      	it	eq
 80081c2:	2020      	moveq	r0, #32
 80081c4:	4770      	bx	lr

080081c6 <__lo0bits>:
 80081c6:	6803      	ldr	r3, [r0, #0]
 80081c8:	4602      	mov	r2, r0
 80081ca:	f013 0007 	ands.w	r0, r3, #7
 80081ce:	d00b      	beq.n	80081e8 <__lo0bits+0x22>
 80081d0:	07d9      	lsls	r1, r3, #31
 80081d2:	d421      	bmi.n	8008218 <__lo0bits+0x52>
 80081d4:	0798      	lsls	r0, r3, #30
 80081d6:	bf49      	itett	mi
 80081d8:	085b      	lsrmi	r3, r3, #1
 80081da:	089b      	lsrpl	r3, r3, #2
 80081dc:	2001      	movmi	r0, #1
 80081de:	6013      	strmi	r3, [r2, #0]
 80081e0:	bf5c      	itt	pl
 80081e2:	2002      	movpl	r0, #2
 80081e4:	6013      	strpl	r3, [r2, #0]
 80081e6:	4770      	bx	lr
 80081e8:	b299      	uxth	r1, r3
 80081ea:	b909      	cbnz	r1, 80081f0 <__lo0bits+0x2a>
 80081ec:	2010      	movs	r0, #16
 80081ee:	0c1b      	lsrs	r3, r3, #16
 80081f0:	b2d9      	uxtb	r1, r3
 80081f2:	b909      	cbnz	r1, 80081f8 <__lo0bits+0x32>
 80081f4:	3008      	adds	r0, #8
 80081f6:	0a1b      	lsrs	r3, r3, #8
 80081f8:	0719      	lsls	r1, r3, #28
 80081fa:	bf04      	itt	eq
 80081fc:	091b      	lsreq	r3, r3, #4
 80081fe:	3004      	addeq	r0, #4
 8008200:	0799      	lsls	r1, r3, #30
 8008202:	bf04      	itt	eq
 8008204:	089b      	lsreq	r3, r3, #2
 8008206:	3002      	addeq	r0, #2
 8008208:	07d9      	lsls	r1, r3, #31
 800820a:	d403      	bmi.n	8008214 <__lo0bits+0x4e>
 800820c:	085b      	lsrs	r3, r3, #1
 800820e:	f100 0001 	add.w	r0, r0, #1
 8008212:	d003      	beq.n	800821c <__lo0bits+0x56>
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	4770      	bx	lr
 8008218:	2000      	movs	r0, #0
 800821a:	4770      	bx	lr
 800821c:	2020      	movs	r0, #32
 800821e:	4770      	bx	lr

08008220 <__i2b>:
 8008220:	b510      	push	{r4, lr}
 8008222:	460c      	mov	r4, r1
 8008224:	2101      	movs	r1, #1
 8008226:	f7ff febd 	bl	8007fa4 <_Balloc>
 800822a:	4602      	mov	r2, r0
 800822c:	b928      	cbnz	r0, 800823a <__i2b+0x1a>
 800822e:	f240 1145 	movw	r1, #325	@ 0x145
 8008232:	4b04      	ldr	r3, [pc, #16]	@ (8008244 <__i2b+0x24>)
 8008234:	4804      	ldr	r0, [pc, #16]	@ (8008248 <__i2b+0x28>)
 8008236:	f001 fc1b 	bl	8009a70 <__assert_func>
 800823a:	2301      	movs	r3, #1
 800823c:	6144      	str	r4, [r0, #20]
 800823e:	6103      	str	r3, [r0, #16]
 8008240:	bd10      	pop	{r4, pc}
 8008242:	bf00      	nop
 8008244:	0800b7ff 	.word	0x0800b7ff
 8008248:	0800b810 	.word	0x0800b810

0800824c <__multiply>:
 800824c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008250:	4614      	mov	r4, r2
 8008252:	690a      	ldr	r2, [r1, #16]
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	460f      	mov	r7, r1
 8008258:	429a      	cmp	r2, r3
 800825a:	bfa2      	ittt	ge
 800825c:	4623      	movge	r3, r4
 800825e:	460c      	movge	r4, r1
 8008260:	461f      	movge	r7, r3
 8008262:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008266:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800826a:	68a3      	ldr	r3, [r4, #8]
 800826c:	6861      	ldr	r1, [r4, #4]
 800826e:	eb0a 0609 	add.w	r6, sl, r9
 8008272:	42b3      	cmp	r3, r6
 8008274:	b085      	sub	sp, #20
 8008276:	bfb8      	it	lt
 8008278:	3101      	addlt	r1, #1
 800827a:	f7ff fe93 	bl	8007fa4 <_Balloc>
 800827e:	b930      	cbnz	r0, 800828e <__multiply+0x42>
 8008280:	4602      	mov	r2, r0
 8008282:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008286:	4b43      	ldr	r3, [pc, #268]	@ (8008394 <__multiply+0x148>)
 8008288:	4843      	ldr	r0, [pc, #268]	@ (8008398 <__multiply+0x14c>)
 800828a:	f001 fbf1 	bl	8009a70 <__assert_func>
 800828e:	f100 0514 	add.w	r5, r0, #20
 8008292:	462b      	mov	r3, r5
 8008294:	2200      	movs	r2, #0
 8008296:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800829a:	4543      	cmp	r3, r8
 800829c:	d321      	bcc.n	80082e2 <__multiply+0x96>
 800829e:	f107 0114 	add.w	r1, r7, #20
 80082a2:	f104 0214 	add.w	r2, r4, #20
 80082a6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80082aa:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80082ae:	9302      	str	r3, [sp, #8]
 80082b0:	1b13      	subs	r3, r2, r4
 80082b2:	3b15      	subs	r3, #21
 80082b4:	f023 0303 	bic.w	r3, r3, #3
 80082b8:	3304      	adds	r3, #4
 80082ba:	f104 0715 	add.w	r7, r4, #21
 80082be:	42ba      	cmp	r2, r7
 80082c0:	bf38      	it	cc
 80082c2:	2304      	movcc	r3, #4
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	9b02      	ldr	r3, [sp, #8]
 80082c8:	9103      	str	r1, [sp, #12]
 80082ca:	428b      	cmp	r3, r1
 80082cc:	d80c      	bhi.n	80082e8 <__multiply+0x9c>
 80082ce:	2e00      	cmp	r6, #0
 80082d0:	dd03      	ble.n	80082da <__multiply+0x8e>
 80082d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d05a      	beq.n	8008390 <__multiply+0x144>
 80082da:	6106      	str	r6, [r0, #16]
 80082dc:	b005      	add	sp, #20
 80082de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e2:	f843 2b04 	str.w	r2, [r3], #4
 80082e6:	e7d8      	b.n	800829a <__multiply+0x4e>
 80082e8:	f8b1 a000 	ldrh.w	sl, [r1]
 80082ec:	f1ba 0f00 	cmp.w	sl, #0
 80082f0:	d023      	beq.n	800833a <__multiply+0xee>
 80082f2:	46a9      	mov	r9, r5
 80082f4:	f04f 0c00 	mov.w	ip, #0
 80082f8:	f104 0e14 	add.w	lr, r4, #20
 80082fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008300:	f8d9 3000 	ldr.w	r3, [r9]
 8008304:	fa1f fb87 	uxth.w	fp, r7
 8008308:	b29b      	uxth	r3, r3
 800830a:	fb0a 330b 	mla	r3, sl, fp, r3
 800830e:	4463      	add	r3, ip
 8008310:	f8d9 c000 	ldr.w	ip, [r9]
 8008314:	0c3f      	lsrs	r7, r7, #16
 8008316:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800831a:	fb0a c707 	mla	r7, sl, r7, ip
 800831e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008322:	b29b      	uxth	r3, r3
 8008324:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008328:	4572      	cmp	r2, lr
 800832a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800832e:	f849 3b04 	str.w	r3, [r9], #4
 8008332:	d8e3      	bhi.n	80082fc <__multiply+0xb0>
 8008334:	9b01      	ldr	r3, [sp, #4]
 8008336:	f845 c003 	str.w	ip, [r5, r3]
 800833a:	9b03      	ldr	r3, [sp, #12]
 800833c:	3104      	adds	r1, #4
 800833e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008342:	f1b9 0f00 	cmp.w	r9, #0
 8008346:	d021      	beq.n	800838c <__multiply+0x140>
 8008348:	46ae      	mov	lr, r5
 800834a:	f04f 0a00 	mov.w	sl, #0
 800834e:	682b      	ldr	r3, [r5, #0]
 8008350:	f104 0c14 	add.w	ip, r4, #20
 8008354:	f8bc b000 	ldrh.w	fp, [ip]
 8008358:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800835c:	b29b      	uxth	r3, r3
 800835e:	fb09 770b 	mla	r7, r9, fp, r7
 8008362:	4457      	add	r7, sl
 8008364:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008368:	f84e 3b04 	str.w	r3, [lr], #4
 800836c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008370:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008374:	f8be 3000 	ldrh.w	r3, [lr]
 8008378:	4562      	cmp	r2, ip
 800837a:	fb09 330a 	mla	r3, r9, sl, r3
 800837e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008382:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008386:	d8e5      	bhi.n	8008354 <__multiply+0x108>
 8008388:	9f01      	ldr	r7, [sp, #4]
 800838a:	51eb      	str	r3, [r5, r7]
 800838c:	3504      	adds	r5, #4
 800838e:	e79a      	b.n	80082c6 <__multiply+0x7a>
 8008390:	3e01      	subs	r6, #1
 8008392:	e79c      	b.n	80082ce <__multiply+0x82>
 8008394:	0800b7ff 	.word	0x0800b7ff
 8008398:	0800b810 	.word	0x0800b810

0800839c <__pow5mult>:
 800839c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a0:	4615      	mov	r5, r2
 80083a2:	f012 0203 	ands.w	r2, r2, #3
 80083a6:	4607      	mov	r7, r0
 80083a8:	460e      	mov	r6, r1
 80083aa:	d007      	beq.n	80083bc <__pow5mult+0x20>
 80083ac:	4c25      	ldr	r4, [pc, #148]	@ (8008444 <__pow5mult+0xa8>)
 80083ae:	3a01      	subs	r2, #1
 80083b0:	2300      	movs	r3, #0
 80083b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083b6:	f7ff fe57 	bl	8008068 <__multadd>
 80083ba:	4606      	mov	r6, r0
 80083bc:	10ad      	asrs	r5, r5, #2
 80083be:	d03d      	beq.n	800843c <__pow5mult+0xa0>
 80083c0:	69fc      	ldr	r4, [r7, #28]
 80083c2:	b97c      	cbnz	r4, 80083e4 <__pow5mult+0x48>
 80083c4:	2010      	movs	r0, #16
 80083c6:	f7ff fd37 	bl	8007e38 <malloc>
 80083ca:	4602      	mov	r2, r0
 80083cc:	61f8      	str	r0, [r7, #28]
 80083ce:	b928      	cbnz	r0, 80083dc <__pow5mult+0x40>
 80083d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80083d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008448 <__pow5mult+0xac>)
 80083d6:	481d      	ldr	r0, [pc, #116]	@ (800844c <__pow5mult+0xb0>)
 80083d8:	f001 fb4a 	bl	8009a70 <__assert_func>
 80083dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083e0:	6004      	str	r4, [r0, #0]
 80083e2:	60c4      	str	r4, [r0, #12]
 80083e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80083e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083ec:	b94c      	cbnz	r4, 8008402 <__pow5mult+0x66>
 80083ee:	f240 2171 	movw	r1, #625	@ 0x271
 80083f2:	4638      	mov	r0, r7
 80083f4:	f7ff ff14 	bl	8008220 <__i2b>
 80083f8:	2300      	movs	r3, #0
 80083fa:	4604      	mov	r4, r0
 80083fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8008400:	6003      	str	r3, [r0, #0]
 8008402:	f04f 0900 	mov.w	r9, #0
 8008406:	07eb      	lsls	r3, r5, #31
 8008408:	d50a      	bpl.n	8008420 <__pow5mult+0x84>
 800840a:	4631      	mov	r1, r6
 800840c:	4622      	mov	r2, r4
 800840e:	4638      	mov	r0, r7
 8008410:	f7ff ff1c 	bl	800824c <__multiply>
 8008414:	4680      	mov	r8, r0
 8008416:	4631      	mov	r1, r6
 8008418:	4638      	mov	r0, r7
 800841a:	f7ff fe03 	bl	8008024 <_Bfree>
 800841e:	4646      	mov	r6, r8
 8008420:	106d      	asrs	r5, r5, #1
 8008422:	d00b      	beq.n	800843c <__pow5mult+0xa0>
 8008424:	6820      	ldr	r0, [r4, #0]
 8008426:	b938      	cbnz	r0, 8008438 <__pow5mult+0x9c>
 8008428:	4622      	mov	r2, r4
 800842a:	4621      	mov	r1, r4
 800842c:	4638      	mov	r0, r7
 800842e:	f7ff ff0d 	bl	800824c <__multiply>
 8008432:	6020      	str	r0, [r4, #0]
 8008434:	f8c0 9000 	str.w	r9, [r0]
 8008438:	4604      	mov	r4, r0
 800843a:	e7e4      	b.n	8008406 <__pow5mult+0x6a>
 800843c:	4630      	mov	r0, r6
 800843e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008442:	bf00      	nop
 8008444:	0800b86c 	.word	0x0800b86c
 8008448:	0800b790 	.word	0x0800b790
 800844c:	0800b810 	.word	0x0800b810

08008450 <__lshift>:
 8008450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	460c      	mov	r4, r1
 8008456:	4607      	mov	r7, r0
 8008458:	4691      	mov	r9, r2
 800845a:	6923      	ldr	r3, [r4, #16]
 800845c:	6849      	ldr	r1, [r1, #4]
 800845e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008462:	68a3      	ldr	r3, [r4, #8]
 8008464:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008468:	f108 0601 	add.w	r6, r8, #1
 800846c:	42b3      	cmp	r3, r6
 800846e:	db0b      	blt.n	8008488 <__lshift+0x38>
 8008470:	4638      	mov	r0, r7
 8008472:	f7ff fd97 	bl	8007fa4 <_Balloc>
 8008476:	4605      	mov	r5, r0
 8008478:	b948      	cbnz	r0, 800848e <__lshift+0x3e>
 800847a:	4602      	mov	r2, r0
 800847c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008480:	4b27      	ldr	r3, [pc, #156]	@ (8008520 <__lshift+0xd0>)
 8008482:	4828      	ldr	r0, [pc, #160]	@ (8008524 <__lshift+0xd4>)
 8008484:	f001 faf4 	bl	8009a70 <__assert_func>
 8008488:	3101      	adds	r1, #1
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	e7ee      	b.n	800846c <__lshift+0x1c>
 800848e:	2300      	movs	r3, #0
 8008490:	f100 0114 	add.w	r1, r0, #20
 8008494:	f100 0210 	add.w	r2, r0, #16
 8008498:	4618      	mov	r0, r3
 800849a:	4553      	cmp	r3, sl
 800849c:	db33      	blt.n	8008506 <__lshift+0xb6>
 800849e:	6920      	ldr	r0, [r4, #16]
 80084a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084a4:	f104 0314 	add.w	r3, r4, #20
 80084a8:	f019 091f 	ands.w	r9, r9, #31
 80084ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084b4:	d02b      	beq.n	800850e <__lshift+0xbe>
 80084b6:	468a      	mov	sl, r1
 80084b8:	2200      	movs	r2, #0
 80084ba:	f1c9 0e20 	rsb	lr, r9, #32
 80084be:	6818      	ldr	r0, [r3, #0]
 80084c0:	fa00 f009 	lsl.w	r0, r0, r9
 80084c4:	4310      	orrs	r0, r2
 80084c6:	f84a 0b04 	str.w	r0, [sl], #4
 80084ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ce:	459c      	cmp	ip, r3
 80084d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80084d4:	d8f3      	bhi.n	80084be <__lshift+0x6e>
 80084d6:	ebac 0304 	sub.w	r3, ip, r4
 80084da:	3b15      	subs	r3, #21
 80084dc:	f023 0303 	bic.w	r3, r3, #3
 80084e0:	3304      	adds	r3, #4
 80084e2:	f104 0015 	add.w	r0, r4, #21
 80084e6:	4584      	cmp	ip, r0
 80084e8:	bf38      	it	cc
 80084ea:	2304      	movcc	r3, #4
 80084ec:	50ca      	str	r2, [r1, r3]
 80084ee:	b10a      	cbz	r2, 80084f4 <__lshift+0xa4>
 80084f0:	f108 0602 	add.w	r6, r8, #2
 80084f4:	3e01      	subs	r6, #1
 80084f6:	4638      	mov	r0, r7
 80084f8:	4621      	mov	r1, r4
 80084fa:	612e      	str	r6, [r5, #16]
 80084fc:	f7ff fd92 	bl	8008024 <_Bfree>
 8008500:	4628      	mov	r0, r5
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	f842 0f04 	str.w	r0, [r2, #4]!
 800850a:	3301      	adds	r3, #1
 800850c:	e7c5      	b.n	800849a <__lshift+0x4a>
 800850e:	3904      	subs	r1, #4
 8008510:	f853 2b04 	ldr.w	r2, [r3], #4
 8008514:	459c      	cmp	ip, r3
 8008516:	f841 2f04 	str.w	r2, [r1, #4]!
 800851a:	d8f9      	bhi.n	8008510 <__lshift+0xc0>
 800851c:	e7ea      	b.n	80084f4 <__lshift+0xa4>
 800851e:	bf00      	nop
 8008520:	0800b7ff 	.word	0x0800b7ff
 8008524:	0800b810 	.word	0x0800b810

08008528 <__mcmp>:
 8008528:	4603      	mov	r3, r0
 800852a:	690a      	ldr	r2, [r1, #16]
 800852c:	6900      	ldr	r0, [r0, #16]
 800852e:	b530      	push	{r4, r5, lr}
 8008530:	1a80      	subs	r0, r0, r2
 8008532:	d10e      	bne.n	8008552 <__mcmp+0x2a>
 8008534:	3314      	adds	r3, #20
 8008536:	3114      	adds	r1, #20
 8008538:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800853c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008540:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008544:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008548:	4295      	cmp	r5, r2
 800854a:	d003      	beq.n	8008554 <__mcmp+0x2c>
 800854c:	d205      	bcs.n	800855a <__mcmp+0x32>
 800854e:	f04f 30ff 	mov.w	r0, #4294967295
 8008552:	bd30      	pop	{r4, r5, pc}
 8008554:	42a3      	cmp	r3, r4
 8008556:	d3f3      	bcc.n	8008540 <__mcmp+0x18>
 8008558:	e7fb      	b.n	8008552 <__mcmp+0x2a>
 800855a:	2001      	movs	r0, #1
 800855c:	e7f9      	b.n	8008552 <__mcmp+0x2a>
	...

08008560 <__mdiff>:
 8008560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	4689      	mov	r9, r1
 8008566:	4606      	mov	r6, r0
 8008568:	4611      	mov	r1, r2
 800856a:	4648      	mov	r0, r9
 800856c:	4614      	mov	r4, r2
 800856e:	f7ff ffdb 	bl	8008528 <__mcmp>
 8008572:	1e05      	subs	r5, r0, #0
 8008574:	d112      	bne.n	800859c <__mdiff+0x3c>
 8008576:	4629      	mov	r1, r5
 8008578:	4630      	mov	r0, r6
 800857a:	f7ff fd13 	bl	8007fa4 <_Balloc>
 800857e:	4602      	mov	r2, r0
 8008580:	b928      	cbnz	r0, 800858e <__mdiff+0x2e>
 8008582:	f240 2137 	movw	r1, #567	@ 0x237
 8008586:	4b3e      	ldr	r3, [pc, #248]	@ (8008680 <__mdiff+0x120>)
 8008588:	483e      	ldr	r0, [pc, #248]	@ (8008684 <__mdiff+0x124>)
 800858a:	f001 fa71 	bl	8009a70 <__assert_func>
 800858e:	2301      	movs	r3, #1
 8008590:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008594:	4610      	mov	r0, r2
 8008596:	b003      	add	sp, #12
 8008598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859c:	bfbc      	itt	lt
 800859e:	464b      	movlt	r3, r9
 80085a0:	46a1      	movlt	r9, r4
 80085a2:	4630      	mov	r0, r6
 80085a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085a8:	bfba      	itte	lt
 80085aa:	461c      	movlt	r4, r3
 80085ac:	2501      	movlt	r5, #1
 80085ae:	2500      	movge	r5, #0
 80085b0:	f7ff fcf8 	bl	8007fa4 <_Balloc>
 80085b4:	4602      	mov	r2, r0
 80085b6:	b918      	cbnz	r0, 80085c0 <__mdiff+0x60>
 80085b8:	f240 2145 	movw	r1, #581	@ 0x245
 80085bc:	4b30      	ldr	r3, [pc, #192]	@ (8008680 <__mdiff+0x120>)
 80085be:	e7e3      	b.n	8008588 <__mdiff+0x28>
 80085c0:	f100 0b14 	add.w	fp, r0, #20
 80085c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085c8:	f109 0310 	add.w	r3, r9, #16
 80085cc:	60c5      	str	r5, [r0, #12]
 80085ce:	f04f 0c00 	mov.w	ip, #0
 80085d2:	f109 0514 	add.w	r5, r9, #20
 80085d6:	46d9      	mov	r9, fp
 80085d8:	6926      	ldr	r6, [r4, #16]
 80085da:	f104 0e14 	add.w	lr, r4, #20
 80085de:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80085e2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	9b01      	ldr	r3, [sp, #4]
 80085ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80085ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80085f2:	b281      	uxth	r1, r0
 80085f4:	9301      	str	r3, [sp, #4]
 80085f6:	fa1f f38a 	uxth.w	r3, sl
 80085fa:	1a5b      	subs	r3, r3, r1
 80085fc:	0c00      	lsrs	r0, r0, #16
 80085fe:	4463      	add	r3, ip
 8008600:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008604:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008608:	b29b      	uxth	r3, r3
 800860a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800860e:	4576      	cmp	r6, lr
 8008610:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008614:	f849 3b04 	str.w	r3, [r9], #4
 8008618:	d8e6      	bhi.n	80085e8 <__mdiff+0x88>
 800861a:	1b33      	subs	r3, r6, r4
 800861c:	3b15      	subs	r3, #21
 800861e:	f023 0303 	bic.w	r3, r3, #3
 8008622:	3415      	adds	r4, #21
 8008624:	3304      	adds	r3, #4
 8008626:	42a6      	cmp	r6, r4
 8008628:	bf38      	it	cc
 800862a:	2304      	movcc	r3, #4
 800862c:	441d      	add	r5, r3
 800862e:	445b      	add	r3, fp
 8008630:	461e      	mov	r6, r3
 8008632:	462c      	mov	r4, r5
 8008634:	4544      	cmp	r4, r8
 8008636:	d30e      	bcc.n	8008656 <__mdiff+0xf6>
 8008638:	f108 0103 	add.w	r1, r8, #3
 800863c:	1b49      	subs	r1, r1, r5
 800863e:	f021 0103 	bic.w	r1, r1, #3
 8008642:	3d03      	subs	r5, #3
 8008644:	45a8      	cmp	r8, r5
 8008646:	bf38      	it	cc
 8008648:	2100      	movcc	r1, #0
 800864a:	440b      	add	r3, r1
 800864c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008650:	b199      	cbz	r1, 800867a <__mdiff+0x11a>
 8008652:	6117      	str	r7, [r2, #16]
 8008654:	e79e      	b.n	8008594 <__mdiff+0x34>
 8008656:	46e6      	mov	lr, ip
 8008658:	f854 1b04 	ldr.w	r1, [r4], #4
 800865c:	fa1f fc81 	uxth.w	ip, r1
 8008660:	44f4      	add	ip, lr
 8008662:	0c08      	lsrs	r0, r1, #16
 8008664:	4471      	add	r1, lr
 8008666:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800866a:	b289      	uxth	r1, r1
 800866c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008670:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008674:	f846 1b04 	str.w	r1, [r6], #4
 8008678:	e7dc      	b.n	8008634 <__mdiff+0xd4>
 800867a:	3f01      	subs	r7, #1
 800867c:	e7e6      	b.n	800864c <__mdiff+0xec>
 800867e:	bf00      	nop
 8008680:	0800b7ff 	.word	0x0800b7ff
 8008684:	0800b810 	.word	0x0800b810

08008688 <__ulp>:
 8008688:	4b0e      	ldr	r3, [pc, #56]	@ (80086c4 <__ulp+0x3c>)
 800868a:	400b      	ands	r3, r1
 800868c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008690:	2b00      	cmp	r3, #0
 8008692:	dc08      	bgt.n	80086a6 <__ulp+0x1e>
 8008694:	425b      	negs	r3, r3
 8008696:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800869a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800869e:	da04      	bge.n	80086aa <__ulp+0x22>
 80086a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80086a4:	4113      	asrs	r3, r2
 80086a6:	2200      	movs	r2, #0
 80086a8:	e008      	b.n	80086bc <__ulp+0x34>
 80086aa:	f1a2 0314 	sub.w	r3, r2, #20
 80086ae:	2b1e      	cmp	r3, #30
 80086b0:	bfd6      	itet	le
 80086b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80086b6:	2201      	movgt	r2, #1
 80086b8:	40da      	lsrle	r2, r3
 80086ba:	2300      	movs	r3, #0
 80086bc:	4619      	mov	r1, r3
 80086be:	4610      	mov	r0, r2
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	7ff00000 	.word	0x7ff00000

080086c8 <__b2d>:
 80086c8:	6902      	ldr	r2, [r0, #16]
 80086ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086cc:	f100 0614 	add.w	r6, r0, #20
 80086d0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80086d4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80086d8:	4f1e      	ldr	r7, [pc, #120]	@ (8008754 <__b2d+0x8c>)
 80086da:	4620      	mov	r0, r4
 80086dc:	f7ff fd54 	bl	8008188 <__hi0bits>
 80086e0:	4603      	mov	r3, r0
 80086e2:	f1c0 0020 	rsb	r0, r0, #32
 80086e6:	2b0a      	cmp	r3, #10
 80086e8:	f1a2 0504 	sub.w	r5, r2, #4
 80086ec:	6008      	str	r0, [r1, #0]
 80086ee:	dc12      	bgt.n	8008716 <__b2d+0x4e>
 80086f0:	42ae      	cmp	r6, r5
 80086f2:	bf2c      	ite	cs
 80086f4:	2200      	movcs	r2, #0
 80086f6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80086fa:	f1c3 0c0b 	rsb	ip, r3, #11
 80086fe:	3315      	adds	r3, #21
 8008700:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008704:	fa04 f303 	lsl.w	r3, r4, r3
 8008708:	fa22 f20c 	lsr.w	r2, r2, ip
 800870c:	ea4e 0107 	orr.w	r1, lr, r7
 8008710:	431a      	orrs	r2, r3
 8008712:	4610      	mov	r0, r2
 8008714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008716:	42ae      	cmp	r6, r5
 8008718:	bf36      	itet	cc
 800871a:	f1a2 0508 	subcc.w	r5, r2, #8
 800871e:	2200      	movcs	r2, #0
 8008720:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008724:	3b0b      	subs	r3, #11
 8008726:	d012      	beq.n	800874e <__b2d+0x86>
 8008728:	f1c3 0720 	rsb	r7, r3, #32
 800872c:	fa22 f107 	lsr.w	r1, r2, r7
 8008730:	409c      	lsls	r4, r3
 8008732:	430c      	orrs	r4, r1
 8008734:	42b5      	cmp	r5, r6
 8008736:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800873a:	bf94      	ite	ls
 800873c:	2400      	movls	r4, #0
 800873e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008742:	409a      	lsls	r2, r3
 8008744:	40fc      	lsrs	r4, r7
 8008746:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800874a:	4322      	orrs	r2, r4
 800874c:	e7e1      	b.n	8008712 <__b2d+0x4a>
 800874e:	ea44 0107 	orr.w	r1, r4, r7
 8008752:	e7de      	b.n	8008712 <__b2d+0x4a>
 8008754:	3ff00000 	.word	0x3ff00000

08008758 <__d2b>:
 8008758:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800875c:	2101      	movs	r1, #1
 800875e:	4690      	mov	r8, r2
 8008760:	4699      	mov	r9, r3
 8008762:	9e08      	ldr	r6, [sp, #32]
 8008764:	f7ff fc1e 	bl	8007fa4 <_Balloc>
 8008768:	4604      	mov	r4, r0
 800876a:	b930      	cbnz	r0, 800877a <__d2b+0x22>
 800876c:	4602      	mov	r2, r0
 800876e:	f240 310f 	movw	r1, #783	@ 0x30f
 8008772:	4b23      	ldr	r3, [pc, #140]	@ (8008800 <__d2b+0xa8>)
 8008774:	4823      	ldr	r0, [pc, #140]	@ (8008804 <__d2b+0xac>)
 8008776:	f001 f97b 	bl	8009a70 <__assert_func>
 800877a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800877e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008782:	b10d      	cbz	r5, 8008788 <__d2b+0x30>
 8008784:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	f1b8 0300 	subs.w	r3, r8, #0
 800878e:	d024      	beq.n	80087da <__d2b+0x82>
 8008790:	4668      	mov	r0, sp
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	f7ff fd17 	bl	80081c6 <__lo0bits>
 8008798:	e9dd 1200 	ldrd	r1, r2, [sp]
 800879c:	b1d8      	cbz	r0, 80087d6 <__d2b+0x7e>
 800879e:	f1c0 0320 	rsb	r3, r0, #32
 80087a2:	fa02 f303 	lsl.w	r3, r2, r3
 80087a6:	430b      	orrs	r3, r1
 80087a8:	40c2      	lsrs	r2, r0
 80087aa:	6163      	str	r3, [r4, #20]
 80087ac:	9201      	str	r2, [sp, #4]
 80087ae:	9b01      	ldr	r3, [sp, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	bf0c      	ite	eq
 80087b4:	2201      	moveq	r2, #1
 80087b6:	2202      	movne	r2, #2
 80087b8:	61a3      	str	r3, [r4, #24]
 80087ba:	6122      	str	r2, [r4, #16]
 80087bc:	b1ad      	cbz	r5, 80087ea <__d2b+0x92>
 80087be:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80087c2:	4405      	add	r5, r0
 80087c4:	6035      	str	r5, [r6, #0]
 80087c6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80087ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087cc:	6018      	str	r0, [r3, #0]
 80087ce:	4620      	mov	r0, r4
 80087d0:	b002      	add	sp, #8
 80087d2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80087d6:	6161      	str	r1, [r4, #20]
 80087d8:	e7e9      	b.n	80087ae <__d2b+0x56>
 80087da:	a801      	add	r0, sp, #4
 80087dc:	f7ff fcf3 	bl	80081c6 <__lo0bits>
 80087e0:	9b01      	ldr	r3, [sp, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	6163      	str	r3, [r4, #20]
 80087e6:	3020      	adds	r0, #32
 80087e8:	e7e7      	b.n	80087ba <__d2b+0x62>
 80087ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80087ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087f2:	6030      	str	r0, [r6, #0]
 80087f4:	6918      	ldr	r0, [r3, #16]
 80087f6:	f7ff fcc7 	bl	8008188 <__hi0bits>
 80087fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087fe:	e7e4      	b.n	80087ca <__d2b+0x72>
 8008800:	0800b7ff 	.word	0x0800b7ff
 8008804:	0800b810 	.word	0x0800b810

08008808 <__ratio>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	b085      	sub	sp, #20
 800880e:	e9cd 1000 	strd	r1, r0, [sp]
 8008812:	a902      	add	r1, sp, #8
 8008814:	f7ff ff58 	bl	80086c8 <__b2d>
 8008818:	468b      	mov	fp, r1
 800881a:	4606      	mov	r6, r0
 800881c:	460f      	mov	r7, r1
 800881e:	9800      	ldr	r0, [sp, #0]
 8008820:	a903      	add	r1, sp, #12
 8008822:	f7ff ff51 	bl	80086c8 <__b2d>
 8008826:	460d      	mov	r5, r1
 8008828:	9b01      	ldr	r3, [sp, #4]
 800882a:	4689      	mov	r9, r1
 800882c:	6919      	ldr	r1, [r3, #16]
 800882e:	9b00      	ldr	r3, [sp, #0]
 8008830:	4604      	mov	r4, r0
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	4630      	mov	r0, r6
 8008836:	1ac9      	subs	r1, r1, r3
 8008838:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008842:	2b00      	cmp	r3, #0
 8008844:	bfcd      	iteet	gt
 8008846:	463a      	movgt	r2, r7
 8008848:	462a      	movle	r2, r5
 800884a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800884e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008852:	bfd8      	it	le
 8008854:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008858:	464b      	mov	r3, r9
 800885a:	4622      	mov	r2, r4
 800885c:	4659      	mov	r1, fp
 800885e:	f7f7 ff65 	bl	800072c <__aeabi_ddiv>
 8008862:	b005      	add	sp, #20
 8008864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008868 <__copybits>:
 8008868:	3901      	subs	r1, #1
 800886a:	b570      	push	{r4, r5, r6, lr}
 800886c:	1149      	asrs	r1, r1, #5
 800886e:	6914      	ldr	r4, [r2, #16]
 8008870:	3101      	adds	r1, #1
 8008872:	f102 0314 	add.w	r3, r2, #20
 8008876:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800887a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800887e:	1f05      	subs	r5, r0, #4
 8008880:	42a3      	cmp	r3, r4
 8008882:	d30c      	bcc.n	800889e <__copybits+0x36>
 8008884:	1aa3      	subs	r3, r4, r2
 8008886:	3b11      	subs	r3, #17
 8008888:	f023 0303 	bic.w	r3, r3, #3
 800888c:	3211      	adds	r2, #17
 800888e:	42a2      	cmp	r2, r4
 8008890:	bf88      	it	hi
 8008892:	2300      	movhi	r3, #0
 8008894:	4418      	add	r0, r3
 8008896:	2300      	movs	r3, #0
 8008898:	4288      	cmp	r0, r1
 800889a:	d305      	bcc.n	80088a8 <__copybits+0x40>
 800889c:	bd70      	pop	{r4, r5, r6, pc}
 800889e:	f853 6b04 	ldr.w	r6, [r3], #4
 80088a2:	f845 6f04 	str.w	r6, [r5, #4]!
 80088a6:	e7eb      	b.n	8008880 <__copybits+0x18>
 80088a8:	f840 3b04 	str.w	r3, [r0], #4
 80088ac:	e7f4      	b.n	8008898 <__copybits+0x30>

080088ae <__any_on>:
 80088ae:	f100 0214 	add.w	r2, r0, #20
 80088b2:	6900      	ldr	r0, [r0, #16]
 80088b4:	114b      	asrs	r3, r1, #5
 80088b6:	4298      	cmp	r0, r3
 80088b8:	b510      	push	{r4, lr}
 80088ba:	db11      	blt.n	80088e0 <__any_on+0x32>
 80088bc:	dd0a      	ble.n	80088d4 <__any_on+0x26>
 80088be:	f011 011f 	ands.w	r1, r1, #31
 80088c2:	d007      	beq.n	80088d4 <__any_on+0x26>
 80088c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80088c8:	fa24 f001 	lsr.w	r0, r4, r1
 80088cc:	fa00 f101 	lsl.w	r1, r0, r1
 80088d0:	428c      	cmp	r4, r1
 80088d2:	d10b      	bne.n	80088ec <__any_on+0x3e>
 80088d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088d8:	4293      	cmp	r3, r2
 80088da:	d803      	bhi.n	80088e4 <__any_on+0x36>
 80088dc:	2000      	movs	r0, #0
 80088de:	bd10      	pop	{r4, pc}
 80088e0:	4603      	mov	r3, r0
 80088e2:	e7f7      	b.n	80088d4 <__any_on+0x26>
 80088e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088e8:	2900      	cmp	r1, #0
 80088ea:	d0f5      	beq.n	80088d8 <__any_on+0x2a>
 80088ec:	2001      	movs	r0, #1
 80088ee:	e7f6      	b.n	80088de <__any_on+0x30>

080088f0 <sulp>:
 80088f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f4:	460f      	mov	r7, r1
 80088f6:	4690      	mov	r8, r2
 80088f8:	f7ff fec6 	bl	8008688 <__ulp>
 80088fc:	4604      	mov	r4, r0
 80088fe:	460d      	mov	r5, r1
 8008900:	f1b8 0f00 	cmp.w	r8, #0
 8008904:	d011      	beq.n	800892a <sulp+0x3a>
 8008906:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800890a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800890e:	2b00      	cmp	r3, #0
 8008910:	dd0b      	ble.n	800892a <sulp+0x3a>
 8008912:	2400      	movs	r4, #0
 8008914:	051b      	lsls	r3, r3, #20
 8008916:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800891a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800891e:	4622      	mov	r2, r4
 8008920:	462b      	mov	r3, r5
 8008922:	f7f7 fdd9 	bl	80004d8 <__aeabi_dmul>
 8008926:	4604      	mov	r4, r0
 8008928:	460d      	mov	r5, r1
 800892a:	4620      	mov	r0, r4
 800892c:	4629      	mov	r1, r5
 800892e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008932:	0000      	movs	r0, r0
 8008934:	0000      	movs	r0, r0
	...

08008938 <_strtod_l>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	b09f      	sub	sp, #124	@ 0x7c
 800893e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008940:	2200      	movs	r2, #0
 8008942:	460c      	mov	r4, r1
 8008944:	921a      	str	r2, [sp, #104]	@ 0x68
 8008946:	f04f 0a00 	mov.w	sl, #0
 800894a:	f04f 0b00 	mov.w	fp, #0
 800894e:	460a      	mov	r2, r1
 8008950:	9005      	str	r0, [sp, #20]
 8008952:	9219      	str	r2, [sp, #100]	@ 0x64
 8008954:	7811      	ldrb	r1, [r2, #0]
 8008956:	292b      	cmp	r1, #43	@ 0x2b
 8008958:	d048      	beq.n	80089ec <_strtod_l+0xb4>
 800895a:	d836      	bhi.n	80089ca <_strtod_l+0x92>
 800895c:	290d      	cmp	r1, #13
 800895e:	d830      	bhi.n	80089c2 <_strtod_l+0x8a>
 8008960:	2908      	cmp	r1, #8
 8008962:	d830      	bhi.n	80089c6 <_strtod_l+0x8e>
 8008964:	2900      	cmp	r1, #0
 8008966:	d039      	beq.n	80089dc <_strtod_l+0xa4>
 8008968:	2200      	movs	r2, #0
 800896a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800896c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800896e:	782a      	ldrb	r2, [r5, #0]
 8008970:	2a30      	cmp	r2, #48	@ 0x30
 8008972:	f040 80b1 	bne.w	8008ad8 <_strtod_l+0x1a0>
 8008976:	786a      	ldrb	r2, [r5, #1]
 8008978:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800897c:	2a58      	cmp	r2, #88	@ 0x58
 800897e:	d16c      	bne.n	8008a5a <_strtod_l+0x122>
 8008980:	9302      	str	r3, [sp, #8]
 8008982:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008984:	4a8e      	ldr	r2, [pc, #568]	@ (8008bc0 <_strtod_l+0x288>)
 8008986:	9301      	str	r3, [sp, #4]
 8008988:	ab1a      	add	r3, sp, #104	@ 0x68
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	9805      	ldr	r0, [sp, #20]
 800898e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008990:	a919      	add	r1, sp, #100	@ 0x64
 8008992:	f001 f907 	bl	8009ba4 <__gethex>
 8008996:	f010 060f 	ands.w	r6, r0, #15
 800899a:	4604      	mov	r4, r0
 800899c:	d005      	beq.n	80089aa <_strtod_l+0x72>
 800899e:	2e06      	cmp	r6, #6
 80089a0:	d126      	bne.n	80089f0 <_strtod_l+0xb8>
 80089a2:	2300      	movs	r3, #0
 80089a4:	3501      	adds	r5, #1
 80089a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80089a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f040 8584 	bne.w	80094ba <_strtod_l+0xb82>
 80089b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089b4:	b1bb      	cbz	r3, 80089e6 <_strtod_l+0xae>
 80089b6:	4650      	mov	r0, sl
 80089b8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80089bc:	b01f      	add	sp, #124	@ 0x7c
 80089be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c2:	2920      	cmp	r1, #32
 80089c4:	d1d0      	bne.n	8008968 <_strtod_l+0x30>
 80089c6:	3201      	adds	r2, #1
 80089c8:	e7c3      	b.n	8008952 <_strtod_l+0x1a>
 80089ca:	292d      	cmp	r1, #45	@ 0x2d
 80089cc:	d1cc      	bne.n	8008968 <_strtod_l+0x30>
 80089ce:	2101      	movs	r1, #1
 80089d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80089d2:	1c51      	adds	r1, r2, #1
 80089d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80089d6:	7852      	ldrb	r2, [r2, #1]
 80089d8:	2a00      	cmp	r2, #0
 80089da:	d1c7      	bne.n	800896c <_strtod_l+0x34>
 80089dc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089de:	9419      	str	r4, [sp, #100]	@ 0x64
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f040 8568 	bne.w	80094b6 <_strtod_l+0xb7e>
 80089e6:	4650      	mov	r0, sl
 80089e8:	4659      	mov	r1, fp
 80089ea:	e7e7      	b.n	80089bc <_strtod_l+0x84>
 80089ec:	2100      	movs	r1, #0
 80089ee:	e7ef      	b.n	80089d0 <_strtod_l+0x98>
 80089f0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80089f2:	b13a      	cbz	r2, 8008a04 <_strtod_l+0xcc>
 80089f4:	2135      	movs	r1, #53	@ 0x35
 80089f6:	a81c      	add	r0, sp, #112	@ 0x70
 80089f8:	f7ff ff36 	bl	8008868 <__copybits>
 80089fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089fe:	9805      	ldr	r0, [sp, #20]
 8008a00:	f7ff fb10 	bl	8008024 <_Bfree>
 8008a04:	3e01      	subs	r6, #1
 8008a06:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008a08:	2e04      	cmp	r6, #4
 8008a0a:	d806      	bhi.n	8008a1a <_strtod_l+0xe2>
 8008a0c:	e8df f006 	tbb	[pc, r6]
 8008a10:	201d0314 	.word	0x201d0314
 8008a14:	14          	.byte	0x14
 8008a15:	00          	.byte	0x00
 8008a16:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008a1a:	05e1      	lsls	r1, r4, #23
 8008a1c:	bf48      	it	mi
 8008a1e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008a22:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a26:	0d1b      	lsrs	r3, r3, #20
 8008a28:	051b      	lsls	r3, r3, #20
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1bd      	bne.n	80089aa <_strtod_l+0x72>
 8008a2e:	f7fe fb1b 	bl	8007068 <__errno>
 8008a32:	2322      	movs	r3, #34	@ 0x22
 8008a34:	6003      	str	r3, [r0, #0]
 8008a36:	e7b8      	b.n	80089aa <_strtod_l+0x72>
 8008a38:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008a3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008a40:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008a44:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a48:	e7e7      	b.n	8008a1a <_strtod_l+0xe2>
 8008a4a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008bc4 <_strtod_l+0x28c>
 8008a4e:	e7e4      	b.n	8008a1a <_strtod_l+0xe2>
 8008a50:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008a54:	f04f 3aff 	mov.w	sl, #4294967295
 8008a58:	e7df      	b.n	8008a1a <_strtod_l+0xe2>
 8008a5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a60:	785b      	ldrb	r3, [r3, #1]
 8008a62:	2b30      	cmp	r3, #48	@ 0x30
 8008a64:	d0f9      	beq.n	8008a5a <_strtod_l+0x122>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d09f      	beq.n	80089aa <_strtod_l+0x72>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a70:	220a      	movs	r2, #10
 8008a72:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a74:	2300      	movs	r3, #0
 8008a76:	461f      	mov	r7, r3
 8008a78:	9308      	str	r3, [sp, #32]
 8008a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a7c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008a7e:	7805      	ldrb	r5, [r0, #0]
 8008a80:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008a84:	b2d9      	uxtb	r1, r3
 8008a86:	2909      	cmp	r1, #9
 8008a88:	d928      	bls.n	8008adc <_strtod_l+0x1a4>
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	494e      	ldr	r1, [pc, #312]	@ (8008bc8 <_strtod_l+0x290>)
 8008a8e:	f000 ffc7 	bl	8009a20 <strncmp>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d032      	beq.n	8008afc <_strtod_l+0x1c4>
 8008a96:	2000      	movs	r0, #0
 8008a98:	462a      	mov	r2, r5
 8008a9a:	4681      	mov	r9, r0
 8008a9c:	463d      	mov	r5, r7
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2a65      	cmp	r2, #101	@ 0x65
 8008aa2:	d001      	beq.n	8008aa8 <_strtod_l+0x170>
 8008aa4:	2a45      	cmp	r2, #69	@ 0x45
 8008aa6:	d114      	bne.n	8008ad2 <_strtod_l+0x19a>
 8008aa8:	b91d      	cbnz	r5, 8008ab2 <_strtod_l+0x17a>
 8008aaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008aac:	4302      	orrs	r2, r0
 8008aae:	d095      	beq.n	80089dc <_strtod_l+0xa4>
 8008ab0:	2500      	movs	r5, #0
 8008ab2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008ab4:	1c62      	adds	r2, r4, #1
 8008ab6:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ab8:	7862      	ldrb	r2, [r4, #1]
 8008aba:	2a2b      	cmp	r2, #43	@ 0x2b
 8008abc:	d077      	beq.n	8008bae <_strtod_l+0x276>
 8008abe:	2a2d      	cmp	r2, #45	@ 0x2d
 8008ac0:	d07b      	beq.n	8008bba <_strtod_l+0x282>
 8008ac2:	f04f 0c00 	mov.w	ip, #0
 8008ac6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008aca:	2909      	cmp	r1, #9
 8008acc:	f240 8082 	bls.w	8008bd4 <_strtod_l+0x29c>
 8008ad0:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ad2:	f04f 0800 	mov.w	r8, #0
 8008ad6:	e0a2      	b.n	8008c1e <_strtod_l+0x2e6>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	e7c7      	b.n	8008a6c <_strtod_l+0x134>
 8008adc:	2f08      	cmp	r7, #8
 8008ade:	bfd5      	itete	le
 8008ae0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008ae2:	9908      	ldrgt	r1, [sp, #32]
 8008ae4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ae8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008aec:	f100 0001 	add.w	r0, r0, #1
 8008af0:	bfd4      	ite	le
 8008af2:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008af4:	9308      	strgt	r3, [sp, #32]
 8008af6:	3701      	adds	r7, #1
 8008af8:	9019      	str	r0, [sp, #100]	@ 0x64
 8008afa:	e7bf      	b.n	8008a7c <_strtod_l+0x144>
 8008afc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008afe:	1c5a      	adds	r2, r3, #1
 8008b00:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b02:	785a      	ldrb	r2, [r3, #1]
 8008b04:	b37f      	cbz	r7, 8008b66 <_strtod_l+0x22e>
 8008b06:	4681      	mov	r9, r0
 8008b08:	463d      	mov	r5, r7
 8008b0a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008b0e:	2b09      	cmp	r3, #9
 8008b10:	d912      	bls.n	8008b38 <_strtod_l+0x200>
 8008b12:	2301      	movs	r3, #1
 8008b14:	e7c4      	b.n	8008aa0 <_strtod_l+0x168>
 8008b16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b18:	3001      	adds	r0, #1
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b1e:	785a      	ldrb	r2, [r3, #1]
 8008b20:	2a30      	cmp	r2, #48	@ 0x30
 8008b22:	d0f8      	beq.n	8008b16 <_strtod_l+0x1de>
 8008b24:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	f200 84cb 	bhi.w	80094c4 <_strtod_l+0xb8c>
 8008b2e:	4681      	mov	r9, r0
 8008b30:	2000      	movs	r0, #0
 8008b32:	4605      	mov	r5, r0
 8008b34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b36:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b38:	3a30      	subs	r2, #48	@ 0x30
 8008b3a:	f100 0301 	add.w	r3, r0, #1
 8008b3e:	d02a      	beq.n	8008b96 <_strtod_l+0x25e>
 8008b40:	4499      	add	r9, r3
 8008b42:	210a      	movs	r1, #10
 8008b44:	462b      	mov	r3, r5
 8008b46:	eb00 0c05 	add.w	ip, r0, r5
 8008b4a:	4563      	cmp	r3, ip
 8008b4c:	d10d      	bne.n	8008b6a <_strtod_l+0x232>
 8008b4e:	1c69      	adds	r1, r5, #1
 8008b50:	4401      	add	r1, r0
 8008b52:	4428      	add	r0, r5
 8008b54:	2808      	cmp	r0, #8
 8008b56:	dc16      	bgt.n	8008b86 <_strtod_l+0x24e>
 8008b58:	230a      	movs	r3, #10
 8008b5a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b5c:	fb03 2300 	mla	r3, r3, r0, r2
 8008b60:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b62:	2300      	movs	r3, #0
 8008b64:	e018      	b.n	8008b98 <_strtod_l+0x260>
 8008b66:	4638      	mov	r0, r7
 8008b68:	e7da      	b.n	8008b20 <_strtod_l+0x1e8>
 8008b6a:	2b08      	cmp	r3, #8
 8008b6c:	f103 0301 	add.w	r3, r3, #1
 8008b70:	dc03      	bgt.n	8008b7a <_strtod_l+0x242>
 8008b72:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008b74:	434e      	muls	r6, r1
 8008b76:	960a      	str	r6, [sp, #40]	@ 0x28
 8008b78:	e7e7      	b.n	8008b4a <_strtod_l+0x212>
 8008b7a:	2b10      	cmp	r3, #16
 8008b7c:	bfde      	ittt	le
 8008b7e:	9e08      	ldrle	r6, [sp, #32]
 8008b80:	434e      	mulle	r6, r1
 8008b82:	9608      	strle	r6, [sp, #32]
 8008b84:	e7e1      	b.n	8008b4a <_strtod_l+0x212>
 8008b86:	280f      	cmp	r0, #15
 8008b88:	dceb      	bgt.n	8008b62 <_strtod_l+0x22a>
 8008b8a:	230a      	movs	r3, #10
 8008b8c:	9808      	ldr	r0, [sp, #32]
 8008b8e:	fb03 2300 	mla	r3, r3, r0, r2
 8008b92:	9308      	str	r3, [sp, #32]
 8008b94:	e7e5      	b.n	8008b62 <_strtod_l+0x22a>
 8008b96:	4629      	mov	r1, r5
 8008b98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b9a:	460d      	mov	r5, r1
 8008b9c:	1c50      	adds	r0, r2, #1
 8008b9e:	9019      	str	r0, [sp, #100]	@ 0x64
 8008ba0:	7852      	ldrb	r2, [r2, #1]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	e7b1      	b.n	8008b0a <_strtod_l+0x1d2>
 8008ba6:	f04f 0900 	mov.w	r9, #0
 8008baa:	2301      	movs	r3, #1
 8008bac:	e77d      	b.n	8008aaa <_strtod_l+0x172>
 8008bae:	f04f 0c00 	mov.w	ip, #0
 8008bb2:	1ca2      	adds	r2, r4, #2
 8008bb4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bb6:	78a2      	ldrb	r2, [r4, #2]
 8008bb8:	e785      	b.n	8008ac6 <_strtod_l+0x18e>
 8008bba:	f04f 0c01 	mov.w	ip, #1
 8008bbe:	e7f8      	b.n	8008bb2 <_strtod_l+0x27a>
 8008bc0:	0800b980 	.word	0x0800b980
 8008bc4:	7ff00000 	.word	0x7ff00000
 8008bc8:	0800b968 	.word	0x0800b968
 8008bcc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bce:	1c51      	adds	r1, r2, #1
 8008bd0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008bd2:	7852      	ldrb	r2, [r2, #1]
 8008bd4:	2a30      	cmp	r2, #48	@ 0x30
 8008bd6:	d0f9      	beq.n	8008bcc <_strtod_l+0x294>
 8008bd8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008bdc:	2908      	cmp	r1, #8
 8008bde:	f63f af78 	bhi.w	8008ad2 <_strtod_l+0x19a>
 8008be2:	f04f 080a 	mov.w	r8, #10
 8008be6:	3a30      	subs	r2, #48	@ 0x30
 8008be8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bec:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008bee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bf0:	1c56      	adds	r6, r2, #1
 8008bf2:	9619      	str	r6, [sp, #100]	@ 0x64
 8008bf4:	7852      	ldrb	r2, [r2, #1]
 8008bf6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008bfa:	f1be 0f09 	cmp.w	lr, #9
 8008bfe:	d939      	bls.n	8008c74 <_strtod_l+0x33c>
 8008c00:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008c02:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008c06:	1a76      	subs	r6, r6, r1
 8008c08:	2e08      	cmp	r6, #8
 8008c0a:	dc03      	bgt.n	8008c14 <_strtod_l+0x2dc>
 8008c0c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008c0e:	4588      	cmp	r8, r1
 8008c10:	bfa8      	it	ge
 8008c12:	4688      	movge	r8, r1
 8008c14:	f1bc 0f00 	cmp.w	ip, #0
 8008c18:	d001      	beq.n	8008c1e <_strtod_l+0x2e6>
 8008c1a:	f1c8 0800 	rsb	r8, r8, #0
 8008c1e:	2d00      	cmp	r5, #0
 8008c20:	d14e      	bne.n	8008cc0 <_strtod_l+0x388>
 8008c22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c24:	4308      	orrs	r0, r1
 8008c26:	f47f aec0 	bne.w	80089aa <_strtod_l+0x72>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f47f aed6 	bne.w	80089dc <_strtod_l+0xa4>
 8008c30:	2a69      	cmp	r2, #105	@ 0x69
 8008c32:	d028      	beq.n	8008c86 <_strtod_l+0x34e>
 8008c34:	dc25      	bgt.n	8008c82 <_strtod_l+0x34a>
 8008c36:	2a49      	cmp	r2, #73	@ 0x49
 8008c38:	d025      	beq.n	8008c86 <_strtod_l+0x34e>
 8008c3a:	2a4e      	cmp	r2, #78	@ 0x4e
 8008c3c:	f47f aece 	bne.w	80089dc <_strtod_l+0xa4>
 8008c40:	499a      	ldr	r1, [pc, #616]	@ (8008eac <_strtod_l+0x574>)
 8008c42:	a819      	add	r0, sp, #100	@ 0x64
 8008c44:	f001 f9d0 	bl	8009fe8 <__match>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	f43f aec7 	beq.w	80089dc <_strtod_l+0xa4>
 8008c4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b28      	cmp	r3, #40	@ 0x28
 8008c54:	d12e      	bne.n	8008cb4 <_strtod_l+0x37c>
 8008c56:	4996      	ldr	r1, [pc, #600]	@ (8008eb0 <_strtod_l+0x578>)
 8008c58:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c5a:	a819      	add	r0, sp, #100	@ 0x64
 8008c5c:	f001 f9d8 	bl	800a010 <__hexnan>
 8008c60:	2805      	cmp	r0, #5
 8008c62:	d127      	bne.n	8008cb4 <_strtod_l+0x37c>
 8008c64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008c66:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008c6a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008c6e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008c72:	e69a      	b.n	80089aa <_strtod_l+0x72>
 8008c74:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008c76:	fb08 2101 	mla	r1, r8, r1, r2
 8008c7a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008c7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c80:	e7b5      	b.n	8008bee <_strtod_l+0x2b6>
 8008c82:	2a6e      	cmp	r2, #110	@ 0x6e
 8008c84:	e7da      	b.n	8008c3c <_strtod_l+0x304>
 8008c86:	498b      	ldr	r1, [pc, #556]	@ (8008eb4 <_strtod_l+0x57c>)
 8008c88:	a819      	add	r0, sp, #100	@ 0x64
 8008c8a:	f001 f9ad 	bl	8009fe8 <__match>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	f43f aea4 	beq.w	80089dc <_strtod_l+0xa4>
 8008c94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c96:	4988      	ldr	r1, [pc, #544]	@ (8008eb8 <_strtod_l+0x580>)
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	a819      	add	r0, sp, #100	@ 0x64
 8008c9c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c9e:	f001 f9a3 	bl	8009fe8 <__match>
 8008ca2:	b910      	cbnz	r0, 8008caa <_strtod_l+0x372>
 8008ca4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	9319      	str	r3, [sp, #100]	@ 0x64
 8008caa:	f04f 0a00 	mov.w	sl, #0
 8008cae:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008ebc <_strtod_l+0x584>
 8008cb2:	e67a      	b.n	80089aa <_strtod_l+0x72>
 8008cb4:	4882      	ldr	r0, [pc, #520]	@ (8008ec0 <_strtod_l+0x588>)
 8008cb6:	f000 fed5 	bl	8009a64 <nan>
 8008cba:	4682      	mov	sl, r0
 8008cbc:	468b      	mov	fp, r1
 8008cbe:	e674      	b.n	80089aa <_strtod_l+0x72>
 8008cc0:	eba8 0309 	sub.w	r3, r8, r9
 8008cc4:	2f00      	cmp	r7, #0
 8008cc6:	bf08      	it	eq
 8008cc8:	462f      	moveq	r7, r5
 8008cca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ccc:	2d10      	cmp	r5, #16
 8008cce:	462c      	mov	r4, r5
 8008cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cd2:	bfa8      	it	ge
 8008cd4:	2410      	movge	r4, #16
 8008cd6:	f7f7 fb85 	bl	80003e4 <__aeabi_ui2d>
 8008cda:	2d09      	cmp	r5, #9
 8008cdc:	4682      	mov	sl, r0
 8008cde:	468b      	mov	fp, r1
 8008ce0:	dc11      	bgt.n	8008d06 <_strtod_l+0x3ce>
 8008ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f43f ae60 	beq.w	80089aa <_strtod_l+0x72>
 8008cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cec:	dd76      	ble.n	8008ddc <_strtod_l+0x4a4>
 8008cee:	2b16      	cmp	r3, #22
 8008cf0:	dc5d      	bgt.n	8008dae <_strtod_l+0x476>
 8008cf2:	4974      	ldr	r1, [pc, #464]	@ (8008ec4 <_strtod_l+0x58c>)
 8008cf4:	4652      	mov	r2, sl
 8008cf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cfa:	465b      	mov	r3, fp
 8008cfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d00:	f7f7 fbea 	bl	80004d8 <__aeabi_dmul>
 8008d04:	e7d9      	b.n	8008cba <_strtod_l+0x382>
 8008d06:	4b6f      	ldr	r3, [pc, #444]	@ (8008ec4 <_strtod_l+0x58c>)
 8008d08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008d10:	f7f7 fbe2 	bl	80004d8 <__aeabi_dmul>
 8008d14:	4682      	mov	sl, r0
 8008d16:	9808      	ldr	r0, [sp, #32]
 8008d18:	468b      	mov	fp, r1
 8008d1a:	f7f7 fb63 	bl	80003e4 <__aeabi_ui2d>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4650      	mov	r0, sl
 8008d24:	4659      	mov	r1, fp
 8008d26:	f7f7 fa21 	bl	800016c <__adddf3>
 8008d2a:	2d0f      	cmp	r5, #15
 8008d2c:	4682      	mov	sl, r0
 8008d2e:	468b      	mov	fp, r1
 8008d30:	ddd7      	ble.n	8008ce2 <_strtod_l+0x3aa>
 8008d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d34:	1b2c      	subs	r4, r5, r4
 8008d36:	441c      	add	r4, r3
 8008d38:	2c00      	cmp	r4, #0
 8008d3a:	f340 8096 	ble.w	8008e6a <_strtod_l+0x532>
 8008d3e:	f014 030f 	ands.w	r3, r4, #15
 8008d42:	d00a      	beq.n	8008d5a <_strtod_l+0x422>
 8008d44:	495f      	ldr	r1, [pc, #380]	@ (8008ec4 <_strtod_l+0x58c>)
 8008d46:	4652      	mov	r2, sl
 8008d48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d50:	465b      	mov	r3, fp
 8008d52:	f7f7 fbc1 	bl	80004d8 <__aeabi_dmul>
 8008d56:	4682      	mov	sl, r0
 8008d58:	468b      	mov	fp, r1
 8008d5a:	f034 040f 	bics.w	r4, r4, #15
 8008d5e:	d073      	beq.n	8008e48 <_strtod_l+0x510>
 8008d60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008d64:	dd48      	ble.n	8008df8 <_strtod_l+0x4c0>
 8008d66:	2400      	movs	r4, #0
 8008d68:	46a0      	mov	r8, r4
 8008d6a:	46a1      	mov	r9, r4
 8008d6c:	940a      	str	r4, [sp, #40]	@ 0x28
 8008d6e:	2322      	movs	r3, #34	@ 0x22
 8008d70:	f04f 0a00 	mov.w	sl, #0
 8008d74:	9a05      	ldr	r2, [sp, #20]
 8008d76:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008ebc <_strtod_l+0x584>
 8008d7a:	6013      	str	r3, [r2, #0]
 8008d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f43f ae13 	beq.w	80089aa <_strtod_l+0x72>
 8008d84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d86:	9805      	ldr	r0, [sp, #20]
 8008d88:	f7ff f94c 	bl	8008024 <_Bfree>
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	9805      	ldr	r0, [sp, #20]
 8008d90:	f7ff f948 	bl	8008024 <_Bfree>
 8008d94:	4641      	mov	r1, r8
 8008d96:	9805      	ldr	r0, [sp, #20]
 8008d98:	f7ff f944 	bl	8008024 <_Bfree>
 8008d9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d9e:	9805      	ldr	r0, [sp, #20]
 8008da0:	f7ff f940 	bl	8008024 <_Bfree>
 8008da4:	4621      	mov	r1, r4
 8008da6:	9805      	ldr	r0, [sp, #20]
 8008da8:	f7ff f93c 	bl	8008024 <_Bfree>
 8008dac:	e5fd      	b.n	80089aa <_strtod_l+0x72>
 8008dae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008db0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008db4:	4293      	cmp	r3, r2
 8008db6:	dbbc      	blt.n	8008d32 <_strtod_l+0x3fa>
 8008db8:	4c42      	ldr	r4, [pc, #264]	@ (8008ec4 <_strtod_l+0x58c>)
 8008dba:	f1c5 050f 	rsb	r5, r5, #15
 8008dbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008dc2:	4652      	mov	r2, sl
 8008dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dc8:	465b      	mov	r3, fp
 8008dca:	f7f7 fb85 	bl	80004d8 <__aeabi_dmul>
 8008dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd0:	1b5d      	subs	r5, r3, r5
 8008dd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008dd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008dda:	e791      	b.n	8008d00 <_strtod_l+0x3c8>
 8008ddc:	3316      	adds	r3, #22
 8008dde:	dba8      	blt.n	8008d32 <_strtod_l+0x3fa>
 8008de0:	4b38      	ldr	r3, [pc, #224]	@ (8008ec4 <_strtod_l+0x58c>)
 8008de2:	eba9 0808 	sub.w	r8, r9, r8
 8008de6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008dea:	4650      	mov	r0, sl
 8008dec:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008df0:	4659      	mov	r1, fp
 8008df2:	f7f7 fc9b 	bl	800072c <__aeabi_ddiv>
 8008df6:	e760      	b.n	8008cba <_strtod_l+0x382>
 8008df8:	4b33      	ldr	r3, [pc, #204]	@ (8008ec8 <_strtod_l+0x590>)
 8008dfa:	4650      	mov	r0, sl
 8008dfc:	9308      	str	r3, [sp, #32]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	4659      	mov	r1, fp
 8008e02:	461e      	mov	r6, r3
 8008e04:	1124      	asrs	r4, r4, #4
 8008e06:	2c01      	cmp	r4, #1
 8008e08:	dc21      	bgt.n	8008e4e <_strtod_l+0x516>
 8008e0a:	b10b      	cbz	r3, 8008e10 <_strtod_l+0x4d8>
 8008e0c:	4682      	mov	sl, r0
 8008e0e:	468b      	mov	fp, r1
 8008e10:	492d      	ldr	r1, [pc, #180]	@ (8008ec8 <_strtod_l+0x590>)
 8008e12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008e16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008e1a:	4652      	mov	r2, sl
 8008e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e20:	465b      	mov	r3, fp
 8008e22:	f7f7 fb59 	bl	80004d8 <__aeabi_dmul>
 8008e26:	4b25      	ldr	r3, [pc, #148]	@ (8008ebc <_strtod_l+0x584>)
 8008e28:	460a      	mov	r2, r1
 8008e2a:	400b      	ands	r3, r1
 8008e2c:	4927      	ldr	r1, [pc, #156]	@ (8008ecc <_strtod_l+0x594>)
 8008e2e:	4682      	mov	sl, r0
 8008e30:	428b      	cmp	r3, r1
 8008e32:	d898      	bhi.n	8008d66 <_strtod_l+0x42e>
 8008e34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	bf86      	itte	hi
 8008e3c:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e40:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008ed0 <_strtod_l+0x598>
 8008e44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008e48:	2300      	movs	r3, #0
 8008e4a:	9308      	str	r3, [sp, #32]
 8008e4c:	e07a      	b.n	8008f44 <_strtod_l+0x60c>
 8008e4e:	07e2      	lsls	r2, r4, #31
 8008e50:	d505      	bpl.n	8008e5e <_strtod_l+0x526>
 8008e52:	9b08      	ldr	r3, [sp, #32]
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f7f7 fb3e 	bl	80004d8 <__aeabi_dmul>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	9a08      	ldr	r2, [sp, #32]
 8008e60:	3601      	adds	r6, #1
 8008e62:	3208      	adds	r2, #8
 8008e64:	1064      	asrs	r4, r4, #1
 8008e66:	9208      	str	r2, [sp, #32]
 8008e68:	e7cd      	b.n	8008e06 <_strtod_l+0x4ce>
 8008e6a:	d0ed      	beq.n	8008e48 <_strtod_l+0x510>
 8008e6c:	4264      	negs	r4, r4
 8008e6e:	f014 020f 	ands.w	r2, r4, #15
 8008e72:	d00a      	beq.n	8008e8a <_strtod_l+0x552>
 8008e74:	4b13      	ldr	r3, [pc, #76]	@ (8008ec4 <_strtod_l+0x58c>)
 8008e76:	4650      	mov	r0, sl
 8008e78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e7c:	4659      	mov	r1, fp
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f7f7 fc53 	bl	800072c <__aeabi_ddiv>
 8008e86:	4682      	mov	sl, r0
 8008e88:	468b      	mov	fp, r1
 8008e8a:	1124      	asrs	r4, r4, #4
 8008e8c:	d0dc      	beq.n	8008e48 <_strtod_l+0x510>
 8008e8e:	2c1f      	cmp	r4, #31
 8008e90:	dd20      	ble.n	8008ed4 <_strtod_l+0x59c>
 8008e92:	2400      	movs	r4, #0
 8008e94:	46a0      	mov	r8, r4
 8008e96:	46a1      	mov	r9, r4
 8008e98:	940a      	str	r4, [sp, #40]	@ 0x28
 8008e9a:	2322      	movs	r3, #34	@ 0x22
 8008e9c:	9a05      	ldr	r2, [sp, #20]
 8008e9e:	f04f 0a00 	mov.w	sl, #0
 8008ea2:	f04f 0b00 	mov.w	fp, #0
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	e768      	b.n	8008d7c <_strtod_l+0x444>
 8008eaa:	bf00      	nop
 8008eac:	0800b757 	.word	0x0800b757
 8008eb0:	0800b96c 	.word	0x0800b96c
 8008eb4:	0800b74f 	.word	0x0800b74f
 8008eb8:	0800b786 	.word	0x0800b786
 8008ebc:	7ff00000 	.word	0x7ff00000
 8008ec0:	0800bb15 	.word	0x0800bb15
 8008ec4:	0800b8a0 	.word	0x0800b8a0
 8008ec8:	0800b878 	.word	0x0800b878
 8008ecc:	7ca00000 	.word	0x7ca00000
 8008ed0:	7fefffff 	.word	0x7fefffff
 8008ed4:	f014 0310 	ands.w	r3, r4, #16
 8008ed8:	bf18      	it	ne
 8008eda:	236a      	movne	r3, #106	@ 0x6a
 8008edc:	4650      	mov	r0, sl
 8008ede:	9308      	str	r3, [sp, #32]
 8008ee0:	4659      	mov	r1, fp
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	4ea9      	ldr	r6, [pc, #676]	@ (800918c <_strtod_l+0x854>)
 8008ee6:	07e2      	lsls	r2, r4, #31
 8008ee8:	d504      	bpl.n	8008ef4 <_strtod_l+0x5bc>
 8008eea:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008eee:	f7f7 faf3 	bl	80004d8 <__aeabi_dmul>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	1064      	asrs	r4, r4, #1
 8008ef6:	f106 0608 	add.w	r6, r6, #8
 8008efa:	d1f4      	bne.n	8008ee6 <_strtod_l+0x5ae>
 8008efc:	b10b      	cbz	r3, 8008f02 <_strtod_l+0x5ca>
 8008efe:	4682      	mov	sl, r0
 8008f00:	468b      	mov	fp, r1
 8008f02:	9b08      	ldr	r3, [sp, #32]
 8008f04:	b1b3      	cbz	r3, 8008f34 <_strtod_l+0x5fc>
 8008f06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008f0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	4659      	mov	r1, fp
 8008f12:	dd0f      	ble.n	8008f34 <_strtod_l+0x5fc>
 8008f14:	2b1f      	cmp	r3, #31
 8008f16:	dd57      	ble.n	8008fc8 <_strtod_l+0x690>
 8008f18:	2b34      	cmp	r3, #52	@ 0x34
 8008f1a:	bfd8      	it	le
 8008f1c:	f04f 33ff 	movle.w	r3, #4294967295
 8008f20:	f04f 0a00 	mov.w	sl, #0
 8008f24:	bfcf      	iteee	gt
 8008f26:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008f2a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008f2e:	4093      	lslle	r3, r2
 8008f30:	ea03 0b01 	andle.w	fp, r3, r1
 8008f34:	2200      	movs	r2, #0
 8008f36:	2300      	movs	r3, #0
 8008f38:	4650      	mov	r0, sl
 8008f3a:	4659      	mov	r1, fp
 8008f3c:	f7f7 fd34 	bl	80009a8 <__aeabi_dcmpeq>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d1a6      	bne.n	8008e92 <_strtod_l+0x55a>
 8008f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f46:	463a      	mov	r2, r7
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008f4c:	462b      	mov	r3, r5
 8008f4e:	9805      	ldr	r0, [sp, #20]
 8008f50:	f7ff f8d0 	bl	80080f4 <__s2b>
 8008f54:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f56:	2800      	cmp	r0, #0
 8008f58:	f43f af05 	beq.w	8008d66 <_strtod_l+0x42e>
 8008f5c:	2400      	movs	r4, #0
 8008f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f60:	eba9 0308 	sub.w	r3, r9, r8
 8008f64:	2a00      	cmp	r2, #0
 8008f66:	bfa8      	it	ge
 8008f68:	2300      	movge	r3, #0
 8008f6a:	46a0      	mov	r8, r4
 8008f6c:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f72:	9316      	str	r3, [sp, #88]	@ 0x58
 8008f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f76:	9805      	ldr	r0, [sp, #20]
 8008f78:	6859      	ldr	r1, [r3, #4]
 8008f7a:	f7ff f813 	bl	8007fa4 <_Balloc>
 8008f7e:	4681      	mov	r9, r0
 8008f80:	2800      	cmp	r0, #0
 8008f82:	f43f aef4 	beq.w	8008d6e <_strtod_l+0x436>
 8008f86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f88:	300c      	adds	r0, #12
 8008f8a:	691a      	ldr	r2, [r3, #16]
 8008f8c:	f103 010c 	add.w	r1, r3, #12
 8008f90:	3202      	adds	r2, #2
 8008f92:	0092      	lsls	r2, r2, #2
 8008f94:	f7fe f8a3 	bl	80070de <memcpy>
 8008f98:	ab1c      	add	r3, sp, #112	@ 0x70
 8008f9a:	9301      	str	r3, [sp, #4]
 8008f9c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	4652      	mov	r2, sl
 8008fa2:	465b      	mov	r3, fp
 8008fa4:	9805      	ldr	r0, [sp, #20]
 8008fa6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008faa:	f7ff fbd5 	bl	8008758 <__d2b>
 8008fae:	901a      	str	r0, [sp, #104]	@ 0x68
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	f43f aedc 	beq.w	8008d6e <_strtod_l+0x436>
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	9805      	ldr	r0, [sp, #20]
 8008fba:	f7ff f931 	bl	8008220 <__i2b>
 8008fbe:	4680      	mov	r8, r0
 8008fc0:	b948      	cbnz	r0, 8008fd6 <_strtod_l+0x69e>
 8008fc2:	f04f 0800 	mov.w	r8, #0
 8008fc6:	e6d2      	b.n	8008d6e <_strtod_l+0x436>
 8008fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd0:	ea03 0a0a 	and.w	sl, r3, sl
 8008fd4:	e7ae      	b.n	8008f34 <_strtod_l+0x5fc>
 8008fd6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008fd8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008fda:	2d00      	cmp	r5, #0
 8008fdc:	bfab      	itete	ge
 8008fde:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008fe0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008fe2:	18ef      	addge	r7, r5, r3
 8008fe4:	1b5e      	sublt	r6, r3, r5
 8008fe6:	9b08      	ldr	r3, [sp, #32]
 8008fe8:	bfa8      	it	ge
 8008fea:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008fec:	eba5 0503 	sub.w	r5, r5, r3
 8008ff0:	4415      	add	r5, r2
 8008ff2:	4b67      	ldr	r3, [pc, #412]	@ (8009190 <_strtod_l+0x858>)
 8008ff4:	f105 35ff 	add.w	r5, r5, #4294967295
 8008ff8:	bfb8      	it	lt
 8008ffa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008ffc:	429d      	cmp	r5, r3
 8008ffe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009002:	da50      	bge.n	80090a6 <_strtod_l+0x76e>
 8009004:	1b5b      	subs	r3, r3, r5
 8009006:	2b1f      	cmp	r3, #31
 8009008:	f04f 0101 	mov.w	r1, #1
 800900c:	eba2 0203 	sub.w	r2, r2, r3
 8009010:	dc3d      	bgt.n	800908e <_strtod_l+0x756>
 8009012:	fa01 f303 	lsl.w	r3, r1, r3
 8009016:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009018:	2300      	movs	r3, #0
 800901a:	9310      	str	r3, [sp, #64]	@ 0x40
 800901c:	18bd      	adds	r5, r7, r2
 800901e:	9b08      	ldr	r3, [sp, #32]
 8009020:	42af      	cmp	r7, r5
 8009022:	4416      	add	r6, r2
 8009024:	441e      	add	r6, r3
 8009026:	463b      	mov	r3, r7
 8009028:	bfa8      	it	ge
 800902a:	462b      	movge	r3, r5
 800902c:	42b3      	cmp	r3, r6
 800902e:	bfa8      	it	ge
 8009030:	4633      	movge	r3, r6
 8009032:	2b00      	cmp	r3, #0
 8009034:	bfc2      	ittt	gt
 8009036:	1aed      	subgt	r5, r5, r3
 8009038:	1af6      	subgt	r6, r6, r3
 800903a:	1aff      	subgt	r7, r7, r3
 800903c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800903e:	2b00      	cmp	r3, #0
 8009040:	dd16      	ble.n	8009070 <_strtod_l+0x738>
 8009042:	4641      	mov	r1, r8
 8009044:	461a      	mov	r2, r3
 8009046:	9805      	ldr	r0, [sp, #20]
 8009048:	f7ff f9a8 	bl	800839c <__pow5mult>
 800904c:	4680      	mov	r8, r0
 800904e:	2800      	cmp	r0, #0
 8009050:	d0b7      	beq.n	8008fc2 <_strtod_l+0x68a>
 8009052:	4601      	mov	r1, r0
 8009054:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009056:	9805      	ldr	r0, [sp, #20]
 8009058:	f7ff f8f8 	bl	800824c <__multiply>
 800905c:	900e      	str	r0, [sp, #56]	@ 0x38
 800905e:	2800      	cmp	r0, #0
 8009060:	f43f ae85 	beq.w	8008d6e <_strtod_l+0x436>
 8009064:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009066:	9805      	ldr	r0, [sp, #20]
 8009068:	f7fe ffdc 	bl	8008024 <_Bfree>
 800906c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800906e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009070:	2d00      	cmp	r5, #0
 8009072:	dc1d      	bgt.n	80090b0 <_strtod_l+0x778>
 8009074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009076:	2b00      	cmp	r3, #0
 8009078:	dd23      	ble.n	80090c2 <_strtod_l+0x78a>
 800907a:	4649      	mov	r1, r9
 800907c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800907e:	9805      	ldr	r0, [sp, #20]
 8009080:	f7ff f98c 	bl	800839c <__pow5mult>
 8009084:	4681      	mov	r9, r0
 8009086:	b9e0      	cbnz	r0, 80090c2 <_strtod_l+0x78a>
 8009088:	f04f 0900 	mov.w	r9, #0
 800908c:	e66f      	b.n	8008d6e <_strtod_l+0x436>
 800908e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009092:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009096:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800909a:	35e2      	adds	r5, #226	@ 0xe2
 800909c:	fa01 f305 	lsl.w	r3, r1, r5
 80090a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80090a2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80090a4:	e7ba      	b.n	800901c <_strtod_l+0x6e4>
 80090a6:	2300      	movs	r3, #0
 80090a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80090aa:	2301      	movs	r3, #1
 80090ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090ae:	e7b5      	b.n	800901c <_strtod_l+0x6e4>
 80090b0:	462a      	mov	r2, r5
 80090b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090b4:	9805      	ldr	r0, [sp, #20]
 80090b6:	f7ff f9cb 	bl	8008450 <__lshift>
 80090ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80090bc:	2800      	cmp	r0, #0
 80090be:	d1d9      	bne.n	8009074 <_strtod_l+0x73c>
 80090c0:	e655      	b.n	8008d6e <_strtod_l+0x436>
 80090c2:	2e00      	cmp	r6, #0
 80090c4:	dd07      	ble.n	80090d6 <_strtod_l+0x79e>
 80090c6:	4649      	mov	r1, r9
 80090c8:	4632      	mov	r2, r6
 80090ca:	9805      	ldr	r0, [sp, #20]
 80090cc:	f7ff f9c0 	bl	8008450 <__lshift>
 80090d0:	4681      	mov	r9, r0
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d0d8      	beq.n	8009088 <_strtod_l+0x750>
 80090d6:	2f00      	cmp	r7, #0
 80090d8:	dd08      	ble.n	80090ec <_strtod_l+0x7b4>
 80090da:	4641      	mov	r1, r8
 80090dc:	463a      	mov	r2, r7
 80090de:	9805      	ldr	r0, [sp, #20]
 80090e0:	f7ff f9b6 	bl	8008450 <__lshift>
 80090e4:	4680      	mov	r8, r0
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f43f ae41 	beq.w	8008d6e <_strtod_l+0x436>
 80090ec:	464a      	mov	r2, r9
 80090ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090f0:	9805      	ldr	r0, [sp, #20]
 80090f2:	f7ff fa35 	bl	8008560 <__mdiff>
 80090f6:	4604      	mov	r4, r0
 80090f8:	2800      	cmp	r0, #0
 80090fa:	f43f ae38 	beq.w	8008d6e <_strtod_l+0x436>
 80090fe:	68c3      	ldr	r3, [r0, #12]
 8009100:	4641      	mov	r1, r8
 8009102:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009104:	2300      	movs	r3, #0
 8009106:	60c3      	str	r3, [r0, #12]
 8009108:	f7ff fa0e 	bl	8008528 <__mcmp>
 800910c:	2800      	cmp	r0, #0
 800910e:	da45      	bge.n	800919c <_strtod_l+0x864>
 8009110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009112:	ea53 030a 	orrs.w	r3, r3, sl
 8009116:	d16b      	bne.n	80091f0 <_strtod_l+0x8b8>
 8009118:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800911c:	2b00      	cmp	r3, #0
 800911e:	d167      	bne.n	80091f0 <_strtod_l+0x8b8>
 8009120:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009124:	0d1b      	lsrs	r3, r3, #20
 8009126:	051b      	lsls	r3, r3, #20
 8009128:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800912c:	d960      	bls.n	80091f0 <_strtod_l+0x8b8>
 800912e:	6963      	ldr	r3, [r4, #20]
 8009130:	b913      	cbnz	r3, 8009138 <_strtod_l+0x800>
 8009132:	6923      	ldr	r3, [r4, #16]
 8009134:	2b01      	cmp	r3, #1
 8009136:	dd5b      	ble.n	80091f0 <_strtod_l+0x8b8>
 8009138:	4621      	mov	r1, r4
 800913a:	2201      	movs	r2, #1
 800913c:	9805      	ldr	r0, [sp, #20]
 800913e:	f7ff f987 	bl	8008450 <__lshift>
 8009142:	4641      	mov	r1, r8
 8009144:	4604      	mov	r4, r0
 8009146:	f7ff f9ef 	bl	8008528 <__mcmp>
 800914a:	2800      	cmp	r0, #0
 800914c:	dd50      	ble.n	80091f0 <_strtod_l+0x8b8>
 800914e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009152:	9a08      	ldr	r2, [sp, #32]
 8009154:	0d1b      	lsrs	r3, r3, #20
 8009156:	051b      	lsls	r3, r3, #20
 8009158:	2a00      	cmp	r2, #0
 800915a:	d06a      	beq.n	8009232 <_strtod_l+0x8fa>
 800915c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009160:	d867      	bhi.n	8009232 <_strtod_l+0x8fa>
 8009162:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009166:	f67f ae98 	bls.w	8008e9a <_strtod_l+0x562>
 800916a:	4650      	mov	r0, sl
 800916c:	4659      	mov	r1, fp
 800916e:	4b09      	ldr	r3, [pc, #36]	@ (8009194 <_strtod_l+0x85c>)
 8009170:	2200      	movs	r2, #0
 8009172:	f7f7 f9b1 	bl	80004d8 <__aeabi_dmul>
 8009176:	4b08      	ldr	r3, [pc, #32]	@ (8009198 <_strtod_l+0x860>)
 8009178:	4682      	mov	sl, r0
 800917a:	400b      	ands	r3, r1
 800917c:	468b      	mov	fp, r1
 800917e:	2b00      	cmp	r3, #0
 8009180:	f47f ae00 	bne.w	8008d84 <_strtod_l+0x44c>
 8009184:	2322      	movs	r3, #34	@ 0x22
 8009186:	9a05      	ldr	r2, [sp, #20]
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	e5fb      	b.n	8008d84 <_strtod_l+0x44c>
 800918c:	0800b998 	.word	0x0800b998
 8009190:	fffffc02 	.word	0xfffffc02
 8009194:	39500000 	.word	0x39500000
 8009198:	7ff00000 	.word	0x7ff00000
 800919c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80091a0:	d165      	bne.n	800926e <_strtod_l+0x936>
 80091a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80091a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091a8:	b35a      	cbz	r2, 8009202 <_strtod_l+0x8ca>
 80091aa:	4a99      	ldr	r2, [pc, #612]	@ (8009410 <_strtod_l+0xad8>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d12b      	bne.n	8009208 <_strtod_l+0x8d0>
 80091b0:	9b08      	ldr	r3, [sp, #32]
 80091b2:	4651      	mov	r1, sl
 80091b4:	b303      	cbz	r3, 80091f8 <_strtod_l+0x8c0>
 80091b6:	465a      	mov	r2, fp
 80091b8:	4b96      	ldr	r3, [pc, #600]	@ (8009414 <_strtod_l+0xadc>)
 80091ba:	4013      	ands	r3, r2
 80091bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80091c0:	f04f 32ff 	mov.w	r2, #4294967295
 80091c4:	d81b      	bhi.n	80091fe <_strtod_l+0x8c6>
 80091c6:	0d1b      	lsrs	r3, r3, #20
 80091c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80091cc:	fa02 f303 	lsl.w	r3, r2, r3
 80091d0:	4299      	cmp	r1, r3
 80091d2:	d119      	bne.n	8009208 <_strtod_l+0x8d0>
 80091d4:	4b90      	ldr	r3, [pc, #576]	@ (8009418 <_strtod_l+0xae0>)
 80091d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091d8:	429a      	cmp	r2, r3
 80091da:	d102      	bne.n	80091e2 <_strtod_l+0x8aa>
 80091dc:	3101      	adds	r1, #1
 80091de:	f43f adc6 	beq.w	8008d6e <_strtod_l+0x436>
 80091e2:	f04f 0a00 	mov.w	sl, #0
 80091e6:	4b8b      	ldr	r3, [pc, #556]	@ (8009414 <_strtod_l+0xadc>)
 80091e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091ea:	401a      	ands	r2, r3
 80091ec:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80091f0:	9b08      	ldr	r3, [sp, #32]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1b9      	bne.n	800916a <_strtod_l+0x832>
 80091f6:	e5c5      	b.n	8008d84 <_strtod_l+0x44c>
 80091f8:	f04f 33ff 	mov.w	r3, #4294967295
 80091fc:	e7e8      	b.n	80091d0 <_strtod_l+0x898>
 80091fe:	4613      	mov	r3, r2
 8009200:	e7e6      	b.n	80091d0 <_strtod_l+0x898>
 8009202:	ea53 030a 	orrs.w	r3, r3, sl
 8009206:	d0a2      	beq.n	800914e <_strtod_l+0x816>
 8009208:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800920a:	b1db      	cbz	r3, 8009244 <_strtod_l+0x90c>
 800920c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800920e:	4213      	tst	r3, r2
 8009210:	d0ee      	beq.n	80091f0 <_strtod_l+0x8b8>
 8009212:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009214:	4650      	mov	r0, sl
 8009216:	4659      	mov	r1, fp
 8009218:	9a08      	ldr	r2, [sp, #32]
 800921a:	b1bb      	cbz	r3, 800924c <_strtod_l+0x914>
 800921c:	f7ff fb68 	bl	80088f0 <sulp>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009228:	f7f6 ffa0 	bl	800016c <__adddf3>
 800922c:	4682      	mov	sl, r0
 800922e:	468b      	mov	fp, r1
 8009230:	e7de      	b.n	80091f0 <_strtod_l+0x8b8>
 8009232:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009236:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800923a:	f04f 3aff 	mov.w	sl, #4294967295
 800923e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009242:	e7d5      	b.n	80091f0 <_strtod_l+0x8b8>
 8009244:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009246:	ea13 0f0a 	tst.w	r3, sl
 800924a:	e7e1      	b.n	8009210 <_strtod_l+0x8d8>
 800924c:	f7ff fb50 	bl	80088f0 <sulp>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009258:	f7f6 ff86 	bl	8000168 <__aeabi_dsub>
 800925c:	2200      	movs	r2, #0
 800925e:	2300      	movs	r3, #0
 8009260:	4682      	mov	sl, r0
 8009262:	468b      	mov	fp, r1
 8009264:	f7f7 fba0 	bl	80009a8 <__aeabi_dcmpeq>
 8009268:	2800      	cmp	r0, #0
 800926a:	d0c1      	beq.n	80091f0 <_strtod_l+0x8b8>
 800926c:	e615      	b.n	8008e9a <_strtod_l+0x562>
 800926e:	4641      	mov	r1, r8
 8009270:	4620      	mov	r0, r4
 8009272:	f7ff fac9 	bl	8008808 <__ratio>
 8009276:	2200      	movs	r2, #0
 8009278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800927c:	4606      	mov	r6, r0
 800927e:	460f      	mov	r7, r1
 8009280:	f7f7 fba6 	bl	80009d0 <__aeabi_dcmple>
 8009284:	2800      	cmp	r0, #0
 8009286:	d06d      	beq.n	8009364 <_strtod_l+0xa2c>
 8009288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800928a:	2b00      	cmp	r3, #0
 800928c:	d178      	bne.n	8009380 <_strtod_l+0xa48>
 800928e:	f1ba 0f00 	cmp.w	sl, #0
 8009292:	d156      	bne.n	8009342 <_strtod_l+0xa0a>
 8009294:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800929a:	2b00      	cmp	r3, #0
 800929c:	d158      	bne.n	8009350 <_strtod_l+0xa18>
 800929e:	2200      	movs	r2, #0
 80092a0:	4630      	mov	r0, r6
 80092a2:	4639      	mov	r1, r7
 80092a4:	4b5d      	ldr	r3, [pc, #372]	@ (800941c <_strtod_l+0xae4>)
 80092a6:	f7f7 fb89 	bl	80009bc <__aeabi_dcmplt>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d157      	bne.n	800935e <_strtod_l+0xa26>
 80092ae:	4630      	mov	r0, r6
 80092b0:	4639      	mov	r1, r7
 80092b2:	2200      	movs	r2, #0
 80092b4:	4b5a      	ldr	r3, [pc, #360]	@ (8009420 <_strtod_l+0xae8>)
 80092b6:	f7f7 f90f 	bl	80004d8 <__aeabi_dmul>
 80092ba:	4606      	mov	r6, r0
 80092bc:	460f      	mov	r7, r1
 80092be:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80092c2:	9606      	str	r6, [sp, #24]
 80092c4:	9307      	str	r3, [sp, #28]
 80092c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092ca:	4d52      	ldr	r5, [pc, #328]	@ (8009414 <_strtod_l+0xadc>)
 80092cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80092d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092d2:	401d      	ands	r5, r3
 80092d4:	4b53      	ldr	r3, [pc, #332]	@ (8009424 <_strtod_l+0xaec>)
 80092d6:	429d      	cmp	r5, r3
 80092d8:	f040 80aa 	bne.w	8009430 <_strtod_l+0xaf8>
 80092dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092de:	4650      	mov	r0, sl
 80092e0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80092e4:	4659      	mov	r1, fp
 80092e6:	f7ff f9cf 	bl	8008688 <__ulp>
 80092ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092ee:	f7f7 f8f3 	bl	80004d8 <__aeabi_dmul>
 80092f2:	4652      	mov	r2, sl
 80092f4:	465b      	mov	r3, fp
 80092f6:	f7f6 ff39 	bl	800016c <__adddf3>
 80092fa:	460b      	mov	r3, r1
 80092fc:	4945      	ldr	r1, [pc, #276]	@ (8009414 <_strtod_l+0xadc>)
 80092fe:	4a4a      	ldr	r2, [pc, #296]	@ (8009428 <_strtod_l+0xaf0>)
 8009300:	4019      	ands	r1, r3
 8009302:	4291      	cmp	r1, r2
 8009304:	4682      	mov	sl, r0
 8009306:	d942      	bls.n	800938e <_strtod_l+0xa56>
 8009308:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800930a:	4b43      	ldr	r3, [pc, #268]	@ (8009418 <_strtod_l+0xae0>)
 800930c:	429a      	cmp	r2, r3
 800930e:	d103      	bne.n	8009318 <_strtod_l+0x9e0>
 8009310:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009312:	3301      	adds	r3, #1
 8009314:	f43f ad2b 	beq.w	8008d6e <_strtod_l+0x436>
 8009318:	f04f 3aff 	mov.w	sl, #4294967295
 800931c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009418 <_strtod_l+0xae0>
 8009320:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009322:	9805      	ldr	r0, [sp, #20]
 8009324:	f7fe fe7e 	bl	8008024 <_Bfree>
 8009328:	4649      	mov	r1, r9
 800932a:	9805      	ldr	r0, [sp, #20]
 800932c:	f7fe fe7a 	bl	8008024 <_Bfree>
 8009330:	4641      	mov	r1, r8
 8009332:	9805      	ldr	r0, [sp, #20]
 8009334:	f7fe fe76 	bl	8008024 <_Bfree>
 8009338:	4621      	mov	r1, r4
 800933a:	9805      	ldr	r0, [sp, #20]
 800933c:	f7fe fe72 	bl	8008024 <_Bfree>
 8009340:	e618      	b.n	8008f74 <_strtod_l+0x63c>
 8009342:	f1ba 0f01 	cmp.w	sl, #1
 8009346:	d103      	bne.n	8009350 <_strtod_l+0xa18>
 8009348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800934a:	2b00      	cmp	r3, #0
 800934c:	f43f ada5 	beq.w	8008e9a <_strtod_l+0x562>
 8009350:	2200      	movs	r2, #0
 8009352:	4b36      	ldr	r3, [pc, #216]	@ (800942c <_strtod_l+0xaf4>)
 8009354:	2600      	movs	r6, #0
 8009356:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800935a:	4f30      	ldr	r7, [pc, #192]	@ (800941c <_strtod_l+0xae4>)
 800935c:	e7b3      	b.n	80092c6 <_strtod_l+0x98e>
 800935e:	2600      	movs	r6, #0
 8009360:	4f2f      	ldr	r7, [pc, #188]	@ (8009420 <_strtod_l+0xae8>)
 8009362:	e7ac      	b.n	80092be <_strtod_l+0x986>
 8009364:	4630      	mov	r0, r6
 8009366:	4639      	mov	r1, r7
 8009368:	4b2d      	ldr	r3, [pc, #180]	@ (8009420 <_strtod_l+0xae8>)
 800936a:	2200      	movs	r2, #0
 800936c:	f7f7 f8b4 	bl	80004d8 <__aeabi_dmul>
 8009370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009372:	4606      	mov	r6, r0
 8009374:	460f      	mov	r7, r1
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0a1      	beq.n	80092be <_strtod_l+0x986>
 800937a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800937e:	e7a2      	b.n	80092c6 <_strtod_l+0x98e>
 8009380:	2200      	movs	r2, #0
 8009382:	4b26      	ldr	r3, [pc, #152]	@ (800941c <_strtod_l+0xae4>)
 8009384:	4616      	mov	r6, r2
 8009386:	461f      	mov	r7, r3
 8009388:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800938c:	e79b      	b.n	80092c6 <_strtod_l+0x98e>
 800938e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009392:	9b08      	ldr	r3, [sp, #32]
 8009394:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1c1      	bne.n	8009320 <_strtod_l+0x9e8>
 800939c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093a0:	0d1b      	lsrs	r3, r3, #20
 80093a2:	051b      	lsls	r3, r3, #20
 80093a4:	429d      	cmp	r5, r3
 80093a6:	d1bb      	bne.n	8009320 <_strtod_l+0x9e8>
 80093a8:	4630      	mov	r0, r6
 80093aa:	4639      	mov	r1, r7
 80093ac:	f7f7 fef6 	bl	800119c <__aeabi_d2lz>
 80093b0:	f7f7 f864 	bl	800047c <__aeabi_l2d>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4630      	mov	r0, r6
 80093ba:	4639      	mov	r1, r7
 80093bc:	f7f6 fed4 	bl	8000168 <__aeabi_dsub>
 80093c0:	460b      	mov	r3, r1
 80093c2:	4602      	mov	r2, r0
 80093c4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80093c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80093cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093ce:	ea46 060a 	orr.w	r6, r6, sl
 80093d2:	431e      	orrs	r6, r3
 80093d4:	d069      	beq.n	80094aa <_strtod_l+0xb72>
 80093d6:	a30a      	add	r3, pc, #40	@ (adr r3, 8009400 <_strtod_l+0xac8>)
 80093d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093dc:	f7f7 faee 	bl	80009bc <__aeabi_dcmplt>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	f47f accf 	bne.w	8008d84 <_strtod_l+0x44c>
 80093e6:	a308      	add	r3, pc, #32	@ (adr r3, 8009408 <_strtod_l+0xad0>)
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093f0:	f7f7 fb02 	bl	80009f8 <__aeabi_dcmpgt>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d093      	beq.n	8009320 <_strtod_l+0x9e8>
 80093f8:	e4c4      	b.n	8008d84 <_strtod_l+0x44c>
 80093fa:	bf00      	nop
 80093fc:	f3af 8000 	nop.w
 8009400:	94a03595 	.word	0x94a03595
 8009404:	3fdfffff 	.word	0x3fdfffff
 8009408:	35afe535 	.word	0x35afe535
 800940c:	3fe00000 	.word	0x3fe00000
 8009410:	000fffff 	.word	0x000fffff
 8009414:	7ff00000 	.word	0x7ff00000
 8009418:	7fefffff 	.word	0x7fefffff
 800941c:	3ff00000 	.word	0x3ff00000
 8009420:	3fe00000 	.word	0x3fe00000
 8009424:	7fe00000 	.word	0x7fe00000
 8009428:	7c9fffff 	.word	0x7c9fffff
 800942c:	bff00000 	.word	0xbff00000
 8009430:	9b08      	ldr	r3, [sp, #32]
 8009432:	b323      	cbz	r3, 800947e <_strtod_l+0xb46>
 8009434:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009438:	d821      	bhi.n	800947e <_strtod_l+0xb46>
 800943a:	a327      	add	r3, pc, #156	@ (adr r3, 80094d8 <_strtod_l+0xba0>)
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	4630      	mov	r0, r6
 8009442:	4639      	mov	r1, r7
 8009444:	f7f7 fac4 	bl	80009d0 <__aeabi_dcmple>
 8009448:	b1a0      	cbz	r0, 8009474 <_strtod_l+0xb3c>
 800944a:	4639      	mov	r1, r7
 800944c:	4630      	mov	r0, r6
 800944e:	f7f7 fb1b 	bl	8000a88 <__aeabi_d2uiz>
 8009452:	2801      	cmp	r0, #1
 8009454:	bf38      	it	cc
 8009456:	2001      	movcc	r0, #1
 8009458:	f7f6 ffc4 	bl	80003e4 <__aeabi_ui2d>
 800945c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800945e:	4606      	mov	r6, r0
 8009460:	460f      	mov	r7, r1
 8009462:	b9fb      	cbnz	r3, 80094a4 <_strtod_l+0xb6c>
 8009464:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009468:	9014      	str	r0, [sp, #80]	@ 0x50
 800946a:	9315      	str	r3, [sp, #84]	@ 0x54
 800946c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009470:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009474:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009476:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800947a:	1b5b      	subs	r3, r3, r5
 800947c:	9311      	str	r3, [sp, #68]	@ 0x44
 800947e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009482:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009486:	f7ff f8ff 	bl	8008688 <__ulp>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	4650      	mov	r0, sl
 8009490:	4659      	mov	r1, fp
 8009492:	f7f7 f821 	bl	80004d8 <__aeabi_dmul>
 8009496:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800949a:	f7f6 fe67 	bl	800016c <__adddf3>
 800949e:	4682      	mov	sl, r0
 80094a0:	468b      	mov	fp, r1
 80094a2:	e776      	b.n	8009392 <_strtod_l+0xa5a>
 80094a4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80094a8:	e7e0      	b.n	800946c <_strtod_l+0xb34>
 80094aa:	a30d      	add	r3, pc, #52	@ (adr r3, 80094e0 <_strtod_l+0xba8>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	f7f7 fa84 	bl	80009bc <__aeabi_dcmplt>
 80094b4:	e79e      	b.n	80093f4 <_strtod_l+0xabc>
 80094b6:	2300      	movs	r3, #0
 80094b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094bc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80094be:	6013      	str	r3, [r2, #0]
 80094c0:	f7ff ba77 	b.w	80089b2 <_strtod_l+0x7a>
 80094c4:	2a65      	cmp	r2, #101	@ 0x65
 80094c6:	f43f ab6e 	beq.w	8008ba6 <_strtod_l+0x26e>
 80094ca:	2a45      	cmp	r2, #69	@ 0x45
 80094cc:	f43f ab6b 	beq.w	8008ba6 <_strtod_l+0x26e>
 80094d0:	2301      	movs	r3, #1
 80094d2:	f7ff bba6 	b.w	8008c22 <_strtod_l+0x2ea>
 80094d6:	bf00      	nop
 80094d8:	ffc00000 	.word	0xffc00000
 80094dc:	41dfffff 	.word	0x41dfffff
 80094e0:	94a03595 	.word	0x94a03595
 80094e4:	3fcfffff 	.word	0x3fcfffff

080094e8 <_strtod_r>:
 80094e8:	4b01      	ldr	r3, [pc, #4]	@ (80094f0 <_strtod_r+0x8>)
 80094ea:	f7ff ba25 	b.w	8008938 <_strtod_l>
 80094ee:	bf00      	nop
 80094f0:	20000078 	.word	0x20000078

080094f4 <_strtol_l.constprop.0>:
 80094f4:	2b24      	cmp	r3, #36	@ 0x24
 80094f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094fa:	4686      	mov	lr, r0
 80094fc:	4690      	mov	r8, r2
 80094fe:	d801      	bhi.n	8009504 <_strtol_l.constprop.0+0x10>
 8009500:	2b01      	cmp	r3, #1
 8009502:	d106      	bne.n	8009512 <_strtol_l.constprop.0+0x1e>
 8009504:	f7fd fdb0 	bl	8007068 <__errno>
 8009508:	2316      	movs	r3, #22
 800950a:	6003      	str	r3, [r0, #0]
 800950c:	2000      	movs	r0, #0
 800950e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009512:	460d      	mov	r5, r1
 8009514:	4833      	ldr	r0, [pc, #204]	@ (80095e4 <_strtol_l.constprop.0+0xf0>)
 8009516:	462a      	mov	r2, r5
 8009518:	f815 4b01 	ldrb.w	r4, [r5], #1
 800951c:	5d06      	ldrb	r6, [r0, r4]
 800951e:	f016 0608 	ands.w	r6, r6, #8
 8009522:	d1f8      	bne.n	8009516 <_strtol_l.constprop.0+0x22>
 8009524:	2c2d      	cmp	r4, #45	@ 0x2d
 8009526:	d12d      	bne.n	8009584 <_strtol_l.constprop.0+0x90>
 8009528:	2601      	movs	r6, #1
 800952a:	782c      	ldrb	r4, [r5, #0]
 800952c:	1c95      	adds	r5, r2, #2
 800952e:	f033 0210 	bics.w	r2, r3, #16
 8009532:	d109      	bne.n	8009548 <_strtol_l.constprop.0+0x54>
 8009534:	2c30      	cmp	r4, #48	@ 0x30
 8009536:	d12a      	bne.n	800958e <_strtol_l.constprop.0+0x9a>
 8009538:	782a      	ldrb	r2, [r5, #0]
 800953a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800953e:	2a58      	cmp	r2, #88	@ 0x58
 8009540:	d125      	bne.n	800958e <_strtol_l.constprop.0+0x9a>
 8009542:	2310      	movs	r3, #16
 8009544:	786c      	ldrb	r4, [r5, #1]
 8009546:	3502      	adds	r5, #2
 8009548:	2200      	movs	r2, #0
 800954a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800954e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009552:	fbbc f9f3 	udiv	r9, ip, r3
 8009556:	4610      	mov	r0, r2
 8009558:	fb03 ca19 	mls	sl, r3, r9, ip
 800955c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009560:	2f09      	cmp	r7, #9
 8009562:	d81b      	bhi.n	800959c <_strtol_l.constprop.0+0xa8>
 8009564:	463c      	mov	r4, r7
 8009566:	42a3      	cmp	r3, r4
 8009568:	dd27      	ble.n	80095ba <_strtol_l.constprop.0+0xc6>
 800956a:	1c57      	adds	r7, r2, #1
 800956c:	d007      	beq.n	800957e <_strtol_l.constprop.0+0x8a>
 800956e:	4581      	cmp	r9, r0
 8009570:	d320      	bcc.n	80095b4 <_strtol_l.constprop.0+0xc0>
 8009572:	d101      	bne.n	8009578 <_strtol_l.constprop.0+0x84>
 8009574:	45a2      	cmp	sl, r4
 8009576:	db1d      	blt.n	80095b4 <_strtol_l.constprop.0+0xc0>
 8009578:	2201      	movs	r2, #1
 800957a:	fb00 4003 	mla	r0, r0, r3, r4
 800957e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009582:	e7eb      	b.n	800955c <_strtol_l.constprop.0+0x68>
 8009584:	2c2b      	cmp	r4, #43	@ 0x2b
 8009586:	bf04      	itt	eq
 8009588:	782c      	ldrbeq	r4, [r5, #0]
 800958a:	1c95      	addeq	r5, r2, #2
 800958c:	e7cf      	b.n	800952e <_strtol_l.constprop.0+0x3a>
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1da      	bne.n	8009548 <_strtol_l.constprop.0+0x54>
 8009592:	2c30      	cmp	r4, #48	@ 0x30
 8009594:	bf0c      	ite	eq
 8009596:	2308      	moveq	r3, #8
 8009598:	230a      	movne	r3, #10
 800959a:	e7d5      	b.n	8009548 <_strtol_l.constprop.0+0x54>
 800959c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80095a0:	2f19      	cmp	r7, #25
 80095a2:	d801      	bhi.n	80095a8 <_strtol_l.constprop.0+0xb4>
 80095a4:	3c37      	subs	r4, #55	@ 0x37
 80095a6:	e7de      	b.n	8009566 <_strtol_l.constprop.0+0x72>
 80095a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80095ac:	2f19      	cmp	r7, #25
 80095ae:	d804      	bhi.n	80095ba <_strtol_l.constprop.0+0xc6>
 80095b0:	3c57      	subs	r4, #87	@ 0x57
 80095b2:	e7d8      	b.n	8009566 <_strtol_l.constprop.0+0x72>
 80095b4:	f04f 32ff 	mov.w	r2, #4294967295
 80095b8:	e7e1      	b.n	800957e <_strtol_l.constprop.0+0x8a>
 80095ba:	1c53      	adds	r3, r2, #1
 80095bc:	d108      	bne.n	80095d0 <_strtol_l.constprop.0+0xdc>
 80095be:	2322      	movs	r3, #34	@ 0x22
 80095c0:	4660      	mov	r0, ip
 80095c2:	f8ce 3000 	str.w	r3, [lr]
 80095c6:	f1b8 0f00 	cmp.w	r8, #0
 80095ca:	d0a0      	beq.n	800950e <_strtol_l.constprop.0+0x1a>
 80095cc:	1e69      	subs	r1, r5, #1
 80095ce:	e006      	b.n	80095de <_strtol_l.constprop.0+0xea>
 80095d0:	b106      	cbz	r6, 80095d4 <_strtol_l.constprop.0+0xe0>
 80095d2:	4240      	negs	r0, r0
 80095d4:	f1b8 0f00 	cmp.w	r8, #0
 80095d8:	d099      	beq.n	800950e <_strtol_l.constprop.0+0x1a>
 80095da:	2a00      	cmp	r2, #0
 80095dc:	d1f6      	bne.n	80095cc <_strtol_l.constprop.0+0xd8>
 80095de:	f8c8 1000 	str.w	r1, [r8]
 80095e2:	e794      	b.n	800950e <_strtol_l.constprop.0+0x1a>
 80095e4:	0800b9c1 	.word	0x0800b9c1

080095e8 <_strtol_r>:
 80095e8:	f7ff bf84 	b.w	80094f4 <_strtol_l.constprop.0>

080095ec <__ssputs_r>:
 80095ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f0:	461f      	mov	r7, r3
 80095f2:	688e      	ldr	r6, [r1, #8]
 80095f4:	4682      	mov	sl, r0
 80095f6:	42be      	cmp	r6, r7
 80095f8:	460c      	mov	r4, r1
 80095fa:	4690      	mov	r8, r2
 80095fc:	680b      	ldr	r3, [r1, #0]
 80095fe:	d82d      	bhi.n	800965c <__ssputs_r+0x70>
 8009600:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009604:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009608:	d026      	beq.n	8009658 <__ssputs_r+0x6c>
 800960a:	6965      	ldr	r5, [r4, #20]
 800960c:	6909      	ldr	r1, [r1, #16]
 800960e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009612:	eba3 0901 	sub.w	r9, r3, r1
 8009616:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800961a:	1c7b      	adds	r3, r7, #1
 800961c:	444b      	add	r3, r9
 800961e:	106d      	asrs	r5, r5, #1
 8009620:	429d      	cmp	r5, r3
 8009622:	bf38      	it	cc
 8009624:	461d      	movcc	r5, r3
 8009626:	0553      	lsls	r3, r2, #21
 8009628:	d527      	bpl.n	800967a <__ssputs_r+0x8e>
 800962a:	4629      	mov	r1, r5
 800962c:	f7fe fc2e 	bl	8007e8c <_malloc_r>
 8009630:	4606      	mov	r6, r0
 8009632:	b360      	cbz	r0, 800968e <__ssputs_r+0xa2>
 8009634:	464a      	mov	r2, r9
 8009636:	6921      	ldr	r1, [r4, #16]
 8009638:	f7fd fd51 	bl	80070de <memcpy>
 800963c:	89a3      	ldrh	r3, [r4, #12]
 800963e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009646:	81a3      	strh	r3, [r4, #12]
 8009648:	6126      	str	r6, [r4, #16]
 800964a:	444e      	add	r6, r9
 800964c:	6026      	str	r6, [r4, #0]
 800964e:	463e      	mov	r6, r7
 8009650:	6165      	str	r5, [r4, #20]
 8009652:	eba5 0509 	sub.w	r5, r5, r9
 8009656:	60a5      	str	r5, [r4, #8]
 8009658:	42be      	cmp	r6, r7
 800965a:	d900      	bls.n	800965e <__ssputs_r+0x72>
 800965c:	463e      	mov	r6, r7
 800965e:	4632      	mov	r2, r6
 8009660:	4641      	mov	r1, r8
 8009662:	6820      	ldr	r0, [r4, #0]
 8009664:	f000 f9c2 	bl	80099ec <memmove>
 8009668:	2000      	movs	r0, #0
 800966a:	68a3      	ldr	r3, [r4, #8]
 800966c:	1b9b      	subs	r3, r3, r6
 800966e:	60a3      	str	r3, [r4, #8]
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	4433      	add	r3, r6
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967a:	462a      	mov	r2, r5
 800967c:	f000 fd75 	bl	800a16a <_realloc_r>
 8009680:	4606      	mov	r6, r0
 8009682:	2800      	cmp	r0, #0
 8009684:	d1e0      	bne.n	8009648 <__ssputs_r+0x5c>
 8009686:	4650      	mov	r0, sl
 8009688:	6921      	ldr	r1, [r4, #16]
 800968a:	f7fe fb8d 	bl	8007da8 <_free_r>
 800968e:	230c      	movs	r3, #12
 8009690:	f8ca 3000 	str.w	r3, [sl]
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	f04f 30ff 	mov.w	r0, #4294967295
 800969a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800969e:	81a3      	strh	r3, [r4, #12]
 80096a0:	e7e9      	b.n	8009676 <__ssputs_r+0x8a>
	...

080096a4 <_svfiprintf_r>:
 80096a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a8:	4698      	mov	r8, r3
 80096aa:	898b      	ldrh	r3, [r1, #12]
 80096ac:	4607      	mov	r7, r0
 80096ae:	061b      	lsls	r3, r3, #24
 80096b0:	460d      	mov	r5, r1
 80096b2:	4614      	mov	r4, r2
 80096b4:	b09d      	sub	sp, #116	@ 0x74
 80096b6:	d510      	bpl.n	80096da <_svfiprintf_r+0x36>
 80096b8:	690b      	ldr	r3, [r1, #16]
 80096ba:	b973      	cbnz	r3, 80096da <_svfiprintf_r+0x36>
 80096bc:	2140      	movs	r1, #64	@ 0x40
 80096be:	f7fe fbe5 	bl	8007e8c <_malloc_r>
 80096c2:	6028      	str	r0, [r5, #0]
 80096c4:	6128      	str	r0, [r5, #16]
 80096c6:	b930      	cbnz	r0, 80096d6 <_svfiprintf_r+0x32>
 80096c8:	230c      	movs	r3, #12
 80096ca:	603b      	str	r3, [r7, #0]
 80096cc:	f04f 30ff 	mov.w	r0, #4294967295
 80096d0:	b01d      	add	sp, #116	@ 0x74
 80096d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d6:	2340      	movs	r3, #64	@ 0x40
 80096d8:	616b      	str	r3, [r5, #20]
 80096da:	2300      	movs	r3, #0
 80096dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80096de:	2320      	movs	r3, #32
 80096e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096e4:	2330      	movs	r3, #48	@ 0x30
 80096e6:	f04f 0901 	mov.w	r9, #1
 80096ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80096ee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009888 <_svfiprintf_r+0x1e4>
 80096f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096f6:	4623      	mov	r3, r4
 80096f8:	469a      	mov	sl, r3
 80096fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096fe:	b10a      	cbz	r2, 8009704 <_svfiprintf_r+0x60>
 8009700:	2a25      	cmp	r2, #37	@ 0x25
 8009702:	d1f9      	bne.n	80096f8 <_svfiprintf_r+0x54>
 8009704:	ebba 0b04 	subs.w	fp, sl, r4
 8009708:	d00b      	beq.n	8009722 <_svfiprintf_r+0x7e>
 800970a:	465b      	mov	r3, fp
 800970c:	4622      	mov	r2, r4
 800970e:	4629      	mov	r1, r5
 8009710:	4638      	mov	r0, r7
 8009712:	f7ff ff6b 	bl	80095ec <__ssputs_r>
 8009716:	3001      	adds	r0, #1
 8009718:	f000 80a7 	beq.w	800986a <_svfiprintf_r+0x1c6>
 800971c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800971e:	445a      	add	r2, fp
 8009720:	9209      	str	r2, [sp, #36]	@ 0x24
 8009722:	f89a 3000 	ldrb.w	r3, [sl]
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 809f 	beq.w	800986a <_svfiprintf_r+0x1c6>
 800972c:	2300      	movs	r3, #0
 800972e:	f04f 32ff 	mov.w	r2, #4294967295
 8009732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009736:	f10a 0a01 	add.w	sl, sl, #1
 800973a:	9304      	str	r3, [sp, #16]
 800973c:	9307      	str	r3, [sp, #28]
 800973e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009742:	931a      	str	r3, [sp, #104]	@ 0x68
 8009744:	4654      	mov	r4, sl
 8009746:	2205      	movs	r2, #5
 8009748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800974c:	484e      	ldr	r0, [pc, #312]	@ (8009888 <_svfiprintf_r+0x1e4>)
 800974e:	f7fd fcb8 	bl	80070c2 <memchr>
 8009752:	9a04      	ldr	r2, [sp, #16]
 8009754:	b9d8      	cbnz	r0, 800978e <_svfiprintf_r+0xea>
 8009756:	06d0      	lsls	r0, r2, #27
 8009758:	bf44      	itt	mi
 800975a:	2320      	movmi	r3, #32
 800975c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009760:	0711      	lsls	r1, r2, #28
 8009762:	bf44      	itt	mi
 8009764:	232b      	movmi	r3, #43	@ 0x2b
 8009766:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800976a:	f89a 3000 	ldrb.w	r3, [sl]
 800976e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009770:	d015      	beq.n	800979e <_svfiprintf_r+0xfa>
 8009772:	4654      	mov	r4, sl
 8009774:	2000      	movs	r0, #0
 8009776:	f04f 0c0a 	mov.w	ip, #10
 800977a:	9a07      	ldr	r2, [sp, #28]
 800977c:	4621      	mov	r1, r4
 800977e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009782:	3b30      	subs	r3, #48	@ 0x30
 8009784:	2b09      	cmp	r3, #9
 8009786:	d94b      	bls.n	8009820 <_svfiprintf_r+0x17c>
 8009788:	b1b0      	cbz	r0, 80097b8 <_svfiprintf_r+0x114>
 800978a:	9207      	str	r2, [sp, #28]
 800978c:	e014      	b.n	80097b8 <_svfiprintf_r+0x114>
 800978e:	eba0 0308 	sub.w	r3, r0, r8
 8009792:	fa09 f303 	lsl.w	r3, r9, r3
 8009796:	4313      	orrs	r3, r2
 8009798:	46a2      	mov	sl, r4
 800979a:	9304      	str	r3, [sp, #16]
 800979c:	e7d2      	b.n	8009744 <_svfiprintf_r+0xa0>
 800979e:	9b03      	ldr	r3, [sp, #12]
 80097a0:	1d19      	adds	r1, r3, #4
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	9103      	str	r1, [sp, #12]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	bfbb      	ittet	lt
 80097aa:	425b      	neglt	r3, r3
 80097ac:	f042 0202 	orrlt.w	r2, r2, #2
 80097b0:	9307      	strge	r3, [sp, #28]
 80097b2:	9307      	strlt	r3, [sp, #28]
 80097b4:	bfb8      	it	lt
 80097b6:	9204      	strlt	r2, [sp, #16]
 80097b8:	7823      	ldrb	r3, [r4, #0]
 80097ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80097bc:	d10a      	bne.n	80097d4 <_svfiprintf_r+0x130>
 80097be:	7863      	ldrb	r3, [r4, #1]
 80097c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80097c2:	d132      	bne.n	800982a <_svfiprintf_r+0x186>
 80097c4:	9b03      	ldr	r3, [sp, #12]
 80097c6:	3402      	adds	r4, #2
 80097c8:	1d1a      	adds	r2, r3, #4
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	9203      	str	r2, [sp, #12]
 80097ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097d2:	9305      	str	r3, [sp, #20]
 80097d4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800988c <_svfiprintf_r+0x1e8>
 80097d8:	2203      	movs	r2, #3
 80097da:	4650      	mov	r0, sl
 80097dc:	7821      	ldrb	r1, [r4, #0]
 80097de:	f7fd fc70 	bl	80070c2 <memchr>
 80097e2:	b138      	cbz	r0, 80097f4 <_svfiprintf_r+0x150>
 80097e4:	2240      	movs	r2, #64	@ 0x40
 80097e6:	9b04      	ldr	r3, [sp, #16]
 80097e8:	eba0 000a 	sub.w	r0, r0, sl
 80097ec:	4082      	lsls	r2, r0
 80097ee:	4313      	orrs	r3, r2
 80097f0:	3401      	adds	r4, #1
 80097f2:	9304      	str	r3, [sp, #16]
 80097f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f8:	2206      	movs	r2, #6
 80097fa:	4825      	ldr	r0, [pc, #148]	@ (8009890 <_svfiprintf_r+0x1ec>)
 80097fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009800:	f7fd fc5f 	bl	80070c2 <memchr>
 8009804:	2800      	cmp	r0, #0
 8009806:	d036      	beq.n	8009876 <_svfiprintf_r+0x1d2>
 8009808:	4b22      	ldr	r3, [pc, #136]	@ (8009894 <_svfiprintf_r+0x1f0>)
 800980a:	bb1b      	cbnz	r3, 8009854 <_svfiprintf_r+0x1b0>
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	3307      	adds	r3, #7
 8009810:	f023 0307 	bic.w	r3, r3, #7
 8009814:	3308      	adds	r3, #8
 8009816:	9303      	str	r3, [sp, #12]
 8009818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800981a:	4433      	add	r3, r6
 800981c:	9309      	str	r3, [sp, #36]	@ 0x24
 800981e:	e76a      	b.n	80096f6 <_svfiprintf_r+0x52>
 8009820:	460c      	mov	r4, r1
 8009822:	2001      	movs	r0, #1
 8009824:	fb0c 3202 	mla	r2, ip, r2, r3
 8009828:	e7a8      	b.n	800977c <_svfiprintf_r+0xd8>
 800982a:	2300      	movs	r3, #0
 800982c:	f04f 0c0a 	mov.w	ip, #10
 8009830:	4619      	mov	r1, r3
 8009832:	3401      	adds	r4, #1
 8009834:	9305      	str	r3, [sp, #20]
 8009836:	4620      	mov	r0, r4
 8009838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800983c:	3a30      	subs	r2, #48	@ 0x30
 800983e:	2a09      	cmp	r2, #9
 8009840:	d903      	bls.n	800984a <_svfiprintf_r+0x1a6>
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0c6      	beq.n	80097d4 <_svfiprintf_r+0x130>
 8009846:	9105      	str	r1, [sp, #20]
 8009848:	e7c4      	b.n	80097d4 <_svfiprintf_r+0x130>
 800984a:	4604      	mov	r4, r0
 800984c:	2301      	movs	r3, #1
 800984e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009852:	e7f0      	b.n	8009836 <_svfiprintf_r+0x192>
 8009854:	ab03      	add	r3, sp, #12
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	462a      	mov	r2, r5
 800985a:	4638      	mov	r0, r7
 800985c:	4b0e      	ldr	r3, [pc, #56]	@ (8009898 <_svfiprintf_r+0x1f4>)
 800985e:	a904      	add	r1, sp, #16
 8009860:	f7fc fcbc 	bl	80061dc <_printf_float>
 8009864:	1c42      	adds	r2, r0, #1
 8009866:	4606      	mov	r6, r0
 8009868:	d1d6      	bne.n	8009818 <_svfiprintf_r+0x174>
 800986a:	89ab      	ldrh	r3, [r5, #12]
 800986c:	065b      	lsls	r3, r3, #25
 800986e:	f53f af2d 	bmi.w	80096cc <_svfiprintf_r+0x28>
 8009872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009874:	e72c      	b.n	80096d0 <_svfiprintf_r+0x2c>
 8009876:	ab03      	add	r3, sp, #12
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	462a      	mov	r2, r5
 800987c:	4638      	mov	r0, r7
 800987e:	4b06      	ldr	r3, [pc, #24]	@ (8009898 <_svfiprintf_r+0x1f4>)
 8009880:	a904      	add	r1, sp, #16
 8009882:	f7fc ff49 	bl	8006718 <_printf_i>
 8009886:	e7ed      	b.n	8009864 <_svfiprintf_r+0x1c0>
 8009888:	0800bac1 	.word	0x0800bac1
 800988c:	0800bac7 	.word	0x0800bac7
 8009890:	0800bacb 	.word	0x0800bacb
 8009894:	080061dd 	.word	0x080061dd
 8009898:	080095ed 	.word	0x080095ed

0800989c <__sflush_r>:
 800989c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a2:	0716      	lsls	r6, r2, #28
 80098a4:	4605      	mov	r5, r0
 80098a6:	460c      	mov	r4, r1
 80098a8:	d454      	bmi.n	8009954 <__sflush_r+0xb8>
 80098aa:	684b      	ldr	r3, [r1, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	dc02      	bgt.n	80098b6 <__sflush_r+0x1a>
 80098b0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	dd48      	ble.n	8009948 <__sflush_r+0xac>
 80098b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098b8:	2e00      	cmp	r6, #0
 80098ba:	d045      	beq.n	8009948 <__sflush_r+0xac>
 80098bc:	2300      	movs	r3, #0
 80098be:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098c2:	682f      	ldr	r7, [r5, #0]
 80098c4:	6a21      	ldr	r1, [r4, #32]
 80098c6:	602b      	str	r3, [r5, #0]
 80098c8:	d030      	beq.n	800992c <__sflush_r+0x90>
 80098ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098cc:	89a3      	ldrh	r3, [r4, #12]
 80098ce:	0759      	lsls	r1, r3, #29
 80098d0:	d505      	bpl.n	80098de <__sflush_r+0x42>
 80098d2:	6863      	ldr	r3, [r4, #4]
 80098d4:	1ad2      	subs	r2, r2, r3
 80098d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098d8:	b10b      	cbz	r3, 80098de <__sflush_r+0x42>
 80098da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098dc:	1ad2      	subs	r2, r2, r3
 80098de:	2300      	movs	r3, #0
 80098e0:	4628      	mov	r0, r5
 80098e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098e4:	6a21      	ldr	r1, [r4, #32]
 80098e6:	47b0      	blx	r6
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	d106      	bne.n	80098fc <__sflush_r+0x60>
 80098ee:	6829      	ldr	r1, [r5, #0]
 80098f0:	291d      	cmp	r1, #29
 80098f2:	d82b      	bhi.n	800994c <__sflush_r+0xb0>
 80098f4:	4a28      	ldr	r2, [pc, #160]	@ (8009998 <__sflush_r+0xfc>)
 80098f6:	410a      	asrs	r2, r1
 80098f8:	07d6      	lsls	r6, r2, #31
 80098fa:	d427      	bmi.n	800994c <__sflush_r+0xb0>
 80098fc:	2200      	movs	r2, #0
 80098fe:	6062      	str	r2, [r4, #4]
 8009900:	6922      	ldr	r2, [r4, #16]
 8009902:	04d9      	lsls	r1, r3, #19
 8009904:	6022      	str	r2, [r4, #0]
 8009906:	d504      	bpl.n	8009912 <__sflush_r+0x76>
 8009908:	1c42      	adds	r2, r0, #1
 800990a:	d101      	bne.n	8009910 <__sflush_r+0x74>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	b903      	cbnz	r3, 8009912 <__sflush_r+0x76>
 8009910:	6560      	str	r0, [r4, #84]	@ 0x54
 8009912:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009914:	602f      	str	r7, [r5, #0]
 8009916:	b1b9      	cbz	r1, 8009948 <__sflush_r+0xac>
 8009918:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800991c:	4299      	cmp	r1, r3
 800991e:	d002      	beq.n	8009926 <__sflush_r+0x8a>
 8009920:	4628      	mov	r0, r5
 8009922:	f7fe fa41 	bl	8007da8 <_free_r>
 8009926:	2300      	movs	r3, #0
 8009928:	6363      	str	r3, [r4, #52]	@ 0x34
 800992a:	e00d      	b.n	8009948 <__sflush_r+0xac>
 800992c:	2301      	movs	r3, #1
 800992e:	4628      	mov	r0, r5
 8009930:	47b0      	blx	r6
 8009932:	4602      	mov	r2, r0
 8009934:	1c50      	adds	r0, r2, #1
 8009936:	d1c9      	bne.n	80098cc <__sflush_r+0x30>
 8009938:	682b      	ldr	r3, [r5, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0c6      	beq.n	80098cc <__sflush_r+0x30>
 800993e:	2b1d      	cmp	r3, #29
 8009940:	d001      	beq.n	8009946 <__sflush_r+0xaa>
 8009942:	2b16      	cmp	r3, #22
 8009944:	d11d      	bne.n	8009982 <__sflush_r+0xe6>
 8009946:	602f      	str	r7, [r5, #0]
 8009948:	2000      	movs	r0, #0
 800994a:	e021      	b.n	8009990 <__sflush_r+0xf4>
 800994c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009950:	b21b      	sxth	r3, r3
 8009952:	e01a      	b.n	800998a <__sflush_r+0xee>
 8009954:	690f      	ldr	r7, [r1, #16]
 8009956:	2f00      	cmp	r7, #0
 8009958:	d0f6      	beq.n	8009948 <__sflush_r+0xac>
 800995a:	0793      	lsls	r3, r2, #30
 800995c:	bf18      	it	ne
 800995e:	2300      	movne	r3, #0
 8009960:	680e      	ldr	r6, [r1, #0]
 8009962:	bf08      	it	eq
 8009964:	694b      	ldreq	r3, [r1, #20]
 8009966:	1bf6      	subs	r6, r6, r7
 8009968:	600f      	str	r7, [r1, #0]
 800996a:	608b      	str	r3, [r1, #8]
 800996c:	2e00      	cmp	r6, #0
 800996e:	ddeb      	ble.n	8009948 <__sflush_r+0xac>
 8009970:	4633      	mov	r3, r6
 8009972:	463a      	mov	r2, r7
 8009974:	4628      	mov	r0, r5
 8009976:	6a21      	ldr	r1, [r4, #32]
 8009978:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800997c:	47e0      	blx	ip
 800997e:	2800      	cmp	r0, #0
 8009980:	dc07      	bgt.n	8009992 <__sflush_r+0xf6>
 8009982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800998a:	f04f 30ff 	mov.w	r0, #4294967295
 800998e:	81a3      	strh	r3, [r4, #12]
 8009990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009992:	4407      	add	r7, r0
 8009994:	1a36      	subs	r6, r6, r0
 8009996:	e7e9      	b.n	800996c <__sflush_r+0xd0>
 8009998:	dfbffffe 	.word	0xdfbffffe

0800999c <_fflush_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	690b      	ldr	r3, [r1, #16]
 80099a0:	4605      	mov	r5, r0
 80099a2:	460c      	mov	r4, r1
 80099a4:	b913      	cbnz	r3, 80099ac <_fflush_r+0x10>
 80099a6:	2500      	movs	r5, #0
 80099a8:	4628      	mov	r0, r5
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	b118      	cbz	r0, 80099b6 <_fflush_r+0x1a>
 80099ae:	6a03      	ldr	r3, [r0, #32]
 80099b0:	b90b      	cbnz	r3, 80099b6 <_fflush_r+0x1a>
 80099b2:	f7fd fa6d 	bl	8006e90 <__sinit>
 80099b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0f3      	beq.n	80099a6 <_fflush_r+0xa>
 80099be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099c0:	07d0      	lsls	r0, r2, #31
 80099c2:	d404      	bmi.n	80099ce <_fflush_r+0x32>
 80099c4:	0599      	lsls	r1, r3, #22
 80099c6:	d402      	bmi.n	80099ce <_fflush_r+0x32>
 80099c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ca:	f7fd fb78 	bl	80070be <__retarget_lock_acquire_recursive>
 80099ce:	4628      	mov	r0, r5
 80099d0:	4621      	mov	r1, r4
 80099d2:	f7ff ff63 	bl	800989c <__sflush_r>
 80099d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099d8:	4605      	mov	r5, r0
 80099da:	07da      	lsls	r2, r3, #31
 80099dc:	d4e4      	bmi.n	80099a8 <_fflush_r+0xc>
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	059b      	lsls	r3, r3, #22
 80099e2:	d4e1      	bmi.n	80099a8 <_fflush_r+0xc>
 80099e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099e6:	f7fd fb6b 	bl	80070c0 <__retarget_lock_release_recursive>
 80099ea:	e7dd      	b.n	80099a8 <_fflush_r+0xc>

080099ec <memmove>:
 80099ec:	4288      	cmp	r0, r1
 80099ee:	b510      	push	{r4, lr}
 80099f0:	eb01 0402 	add.w	r4, r1, r2
 80099f4:	d902      	bls.n	80099fc <memmove+0x10>
 80099f6:	4284      	cmp	r4, r0
 80099f8:	4623      	mov	r3, r4
 80099fa:	d807      	bhi.n	8009a0c <memmove+0x20>
 80099fc:	1e43      	subs	r3, r0, #1
 80099fe:	42a1      	cmp	r1, r4
 8009a00:	d008      	beq.n	8009a14 <memmove+0x28>
 8009a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a0a:	e7f8      	b.n	80099fe <memmove+0x12>
 8009a0c:	4601      	mov	r1, r0
 8009a0e:	4402      	add	r2, r0
 8009a10:	428a      	cmp	r2, r1
 8009a12:	d100      	bne.n	8009a16 <memmove+0x2a>
 8009a14:	bd10      	pop	{r4, pc}
 8009a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a1e:	e7f7      	b.n	8009a10 <memmove+0x24>

08009a20 <strncmp>:
 8009a20:	b510      	push	{r4, lr}
 8009a22:	b16a      	cbz	r2, 8009a40 <strncmp+0x20>
 8009a24:	3901      	subs	r1, #1
 8009a26:	1884      	adds	r4, r0, r2
 8009a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d103      	bne.n	8009a3c <strncmp+0x1c>
 8009a34:	42a0      	cmp	r0, r4
 8009a36:	d001      	beq.n	8009a3c <strncmp+0x1c>
 8009a38:	2a00      	cmp	r2, #0
 8009a3a:	d1f5      	bne.n	8009a28 <strncmp+0x8>
 8009a3c:	1ad0      	subs	r0, r2, r3
 8009a3e:	bd10      	pop	{r4, pc}
 8009a40:	4610      	mov	r0, r2
 8009a42:	e7fc      	b.n	8009a3e <strncmp+0x1e>

08009a44 <_sbrk_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	2300      	movs	r3, #0
 8009a48:	4d05      	ldr	r5, [pc, #20]	@ (8009a60 <_sbrk_r+0x1c>)
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	602b      	str	r3, [r5, #0]
 8009a50:	f7f8 fa44 	bl	8001edc <_sbrk>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	d102      	bne.n	8009a5e <_sbrk_r+0x1a>
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	b103      	cbz	r3, 8009a5e <_sbrk_r+0x1a>
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	20000a30 	.word	0x20000a30

08009a64 <nan>:
 8009a64:	2000      	movs	r0, #0
 8009a66:	4901      	ldr	r1, [pc, #4]	@ (8009a6c <nan+0x8>)
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	7ff80000 	.word	0x7ff80000

08009a70 <__assert_func>:
 8009a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a72:	4614      	mov	r4, r2
 8009a74:	461a      	mov	r2, r3
 8009a76:	4b09      	ldr	r3, [pc, #36]	@ (8009a9c <__assert_func+0x2c>)
 8009a78:	4605      	mov	r5, r0
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68d8      	ldr	r0, [r3, #12]
 8009a7e:	b954      	cbnz	r4, 8009a96 <__assert_func+0x26>
 8009a80:	4b07      	ldr	r3, [pc, #28]	@ (8009aa0 <__assert_func+0x30>)
 8009a82:	461c      	mov	r4, r3
 8009a84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a88:	9100      	str	r1, [sp, #0]
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	4905      	ldr	r1, [pc, #20]	@ (8009aa4 <__assert_func+0x34>)
 8009a8e:	f000 fba7 	bl	800a1e0 <fiprintf>
 8009a92:	f000 fbb7 	bl	800a204 <abort>
 8009a96:	4b04      	ldr	r3, [pc, #16]	@ (8009aa8 <__assert_func+0x38>)
 8009a98:	e7f4      	b.n	8009a84 <__assert_func+0x14>
 8009a9a:	bf00      	nop
 8009a9c:	20000028 	.word	0x20000028
 8009aa0:	0800bb15 	.word	0x0800bb15
 8009aa4:	0800bae7 	.word	0x0800bae7
 8009aa8:	0800bada 	.word	0x0800bada

08009aac <_calloc_r>:
 8009aac:	b570      	push	{r4, r5, r6, lr}
 8009aae:	fba1 5402 	umull	r5, r4, r1, r2
 8009ab2:	b93c      	cbnz	r4, 8009ac4 <_calloc_r+0x18>
 8009ab4:	4629      	mov	r1, r5
 8009ab6:	f7fe f9e9 	bl	8007e8c <_malloc_r>
 8009aba:	4606      	mov	r6, r0
 8009abc:	b928      	cbnz	r0, 8009aca <_calloc_r+0x1e>
 8009abe:	2600      	movs	r6, #0
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	220c      	movs	r2, #12
 8009ac6:	6002      	str	r2, [r0, #0]
 8009ac8:	e7f9      	b.n	8009abe <_calloc_r+0x12>
 8009aca:	462a      	mov	r2, r5
 8009acc:	4621      	mov	r1, r4
 8009ace:	f7fd fa78 	bl	8006fc2 <memset>
 8009ad2:	e7f5      	b.n	8009ac0 <_calloc_r+0x14>

08009ad4 <rshift>:
 8009ad4:	6903      	ldr	r3, [r0, #16]
 8009ad6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ada:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ade:	f100 0414 	add.w	r4, r0, #20
 8009ae2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ae6:	dd46      	ble.n	8009b76 <rshift+0xa2>
 8009ae8:	f011 011f 	ands.w	r1, r1, #31
 8009aec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009af0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009af4:	d10c      	bne.n	8009b10 <rshift+0x3c>
 8009af6:	4629      	mov	r1, r5
 8009af8:	f100 0710 	add.w	r7, r0, #16
 8009afc:	42b1      	cmp	r1, r6
 8009afe:	d335      	bcc.n	8009b6c <rshift+0x98>
 8009b00:	1a9b      	subs	r3, r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	1eea      	subs	r2, r5, #3
 8009b06:	4296      	cmp	r6, r2
 8009b08:	bf38      	it	cc
 8009b0a:	2300      	movcc	r3, #0
 8009b0c:	4423      	add	r3, r4
 8009b0e:	e015      	b.n	8009b3c <rshift+0x68>
 8009b10:	46a1      	mov	r9, r4
 8009b12:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b16:	f1c1 0820 	rsb	r8, r1, #32
 8009b1a:	40cf      	lsrs	r7, r1
 8009b1c:	f105 0e04 	add.w	lr, r5, #4
 8009b20:	4576      	cmp	r6, lr
 8009b22:	46f4      	mov	ip, lr
 8009b24:	d816      	bhi.n	8009b54 <rshift+0x80>
 8009b26:	1a9a      	subs	r2, r3, r2
 8009b28:	0092      	lsls	r2, r2, #2
 8009b2a:	3a04      	subs	r2, #4
 8009b2c:	3501      	adds	r5, #1
 8009b2e:	42ae      	cmp	r6, r5
 8009b30:	bf38      	it	cc
 8009b32:	2200      	movcc	r2, #0
 8009b34:	18a3      	adds	r3, r4, r2
 8009b36:	50a7      	str	r7, [r4, r2]
 8009b38:	b107      	cbz	r7, 8009b3c <rshift+0x68>
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	42a3      	cmp	r3, r4
 8009b3e:	eba3 0204 	sub.w	r2, r3, r4
 8009b42:	bf08      	it	eq
 8009b44:	2300      	moveq	r3, #0
 8009b46:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b4a:	6102      	str	r2, [r0, #16]
 8009b4c:	bf08      	it	eq
 8009b4e:	6143      	streq	r3, [r0, #20]
 8009b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b54:	f8dc c000 	ldr.w	ip, [ip]
 8009b58:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b5c:	ea4c 0707 	orr.w	r7, ip, r7
 8009b60:	f849 7b04 	str.w	r7, [r9], #4
 8009b64:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b68:	40cf      	lsrs	r7, r1
 8009b6a:	e7d9      	b.n	8009b20 <rshift+0x4c>
 8009b6c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b70:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b74:	e7c2      	b.n	8009afc <rshift+0x28>
 8009b76:	4623      	mov	r3, r4
 8009b78:	e7e0      	b.n	8009b3c <rshift+0x68>

08009b7a <__hexdig_fun>:
 8009b7a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009b7e:	2b09      	cmp	r3, #9
 8009b80:	d802      	bhi.n	8009b88 <__hexdig_fun+0xe>
 8009b82:	3820      	subs	r0, #32
 8009b84:	b2c0      	uxtb	r0, r0
 8009b86:	4770      	bx	lr
 8009b88:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009b8c:	2b05      	cmp	r3, #5
 8009b8e:	d801      	bhi.n	8009b94 <__hexdig_fun+0x1a>
 8009b90:	3847      	subs	r0, #71	@ 0x47
 8009b92:	e7f7      	b.n	8009b84 <__hexdig_fun+0xa>
 8009b94:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009b98:	2b05      	cmp	r3, #5
 8009b9a:	d801      	bhi.n	8009ba0 <__hexdig_fun+0x26>
 8009b9c:	3827      	subs	r0, #39	@ 0x27
 8009b9e:	e7f1      	b.n	8009b84 <__hexdig_fun+0xa>
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	4770      	bx	lr

08009ba4 <__gethex>:
 8009ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba8:	468a      	mov	sl, r1
 8009baa:	4690      	mov	r8, r2
 8009bac:	b085      	sub	sp, #20
 8009bae:	9302      	str	r3, [sp, #8]
 8009bb0:	680b      	ldr	r3, [r1, #0]
 8009bb2:	9001      	str	r0, [sp, #4]
 8009bb4:	1c9c      	adds	r4, r3, #2
 8009bb6:	46a1      	mov	r9, r4
 8009bb8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009bbc:	2830      	cmp	r0, #48	@ 0x30
 8009bbe:	d0fa      	beq.n	8009bb6 <__gethex+0x12>
 8009bc0:	eba9 0303 	sub.w	r3, r9, r3
 8009bc4:	f1a3 0b02 	sub.w	fp, r3, #2
 8009bc8:	f7ff ffd7 	bl	8009b7a <__hexdig_fun>
 8009bcc:	4605      	mov	r5, r0
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d168      	bne.n	8009ca4 <__gethex+0x100>
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	4648      	mov	r0, r9
 8009bd6:	499f      	ldr	r1, [pc, #636]	@ (8009e54 <__gethex+0x2b0>)
 8009bd8:	f7ff ff22 	bl	8009a20 <strncmp>
 8009bdc:	4607      	mov	r7, r0
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d167      	bne.n	8009cb2 <__gethex+0x10e>
 8009be2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009be6:	4626      	mov	r6, r4
 8009be8:	f7ff ffc7 	bl	8009b7a <__hexdig_fun>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d062      	beq.n	8009cb6 <__gethex+0x112>
 8009bf0:	4623      	mov	r3, r4
 8009bf2:	7818      	ldrb	r0, [r3, #0]
 8009bf4:	4699      	mov	r9, r3
 8009bf6:	2830      	cmp	r0, #48	@ 0x30
 8009bf8:	f103 0301 	add.w	r3, r3, #1
 8009bfc:	d0f9      	beq.n	8009bf2 <__gethex+0x4e>
 8009bfe:	f7ff ffbc 	bl	8009b7a <__hexdig_fun>
 8009c02:	fab0 f580 	clz	r5, r0
 8009c06:	f04f 0b01 	mov.w	fp, #1
 8009c0a:	096d      	lsrs	r5, r5, #5
 8009c0c:	464a      	mov	r2, r9
 8009c0e:	4616      	mov	r6, r2
 8009c10:	7830      	ldrb	r0, [r6, #0]
 8009c12:	3201      	adds	r2, #1
 8009c14:	f7ff ffb1 	bl	8009b7a <__hexdig_fun>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d1f8      	bne.n	8009c0e <__gethex+0x6a>
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	4630      	mov	r0, r6
 8009c20:	498c      	ldr	r1, [pc, #560]	@ (8009e54 <__gethex+0x2b0>)
 8009c22:	f7ff fefd 	bl	8009a20 <strncmp>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d13f      	bne.n	8009caa <__gethex+0x106>
 8009c2a:	b944      	cbnz	r4, 8009c3e <__gethex+0x9a>
 8009c2c:	1c74      	adds	r4, r6, #1
 8009c2e:	4622      	mov	r2, r4
 8009c30:	4616      	mov	r6, r2
 8009c32:	7830      	ldrb	r0, [r6, #0]
 8009c34:	3201      	adds	r2, #1
 8009c36:	f7ff ffa0 	bl	8009b7a <__hexdig_fun>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d1f8      	bne.n	8009c30 <__gethex+0x8c>
 8009c3e:	1ba4      	subs	r4, r4, r6
 8009c40:	00a7      	lsls	r7, r4, #2
 8009c42:	7833      	ldrb	r3, [r6, #0]
 8009c44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009c48:	2b50      	cmp	r3, #80	@ 0x50
 8009c4a:	d13e      	bne.n	8009cca <__gethex+0x126>
 8009c4c:	7873      	ldrb	r3, [r6, #1]
 8009c4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009c50:	d033      	beq.n	8009cba <__gethex+0x116>
 8009c52:	2b2d      	cmp	r3, #45	@ 0x2d
 8009c54:	d034      	beq.n	8009cc0 <__gethex+0x11c>
 8009c56:	2400      	movs	r4, #0
 8009c58:	1c71      	adds	r1, r6, #1
 8009c5a:	7808      	ldrb	r0, [r1, #0]
 8009c5c:	f7ff ff8d 	bl	8009b7a <__hexdig_fun>
 8009c60:	1e43      	subs	r3, r0, #1
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b18      	cmp	r3, #24
 8009c66:	d830      	bhi.n	8009cca <__gethex+0x126>
 8009c68:	f1a0 0210 	sub.w	r2, r0, #16
 8009c6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c70:	f7ff ff83 	bl	8009b7a <__hexdig_fun>
 8009c74:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c78:	fa5f fc8c 	uxtb.w	ip, ip
 8009c7c:	f1bc 0f18 	cmp.w	ip, #24
 8009c80:	f04f 030a 	mov.w	r3, #10
 8009c84:	d91e      	bls.n	8009cc4 <__gethex+0x120>
 8009c86:	b104      	cbz	r4, 8009c8a <__gethex+0xe6>
 8009c88:	4252      	negs	r2, r2
 8009c8a:	4417      	add	r7, r2
 8009c8c:	f8ca 1000 	str.w	r1, [sl]
 8009c90:	b1ed      	cbz	r5, 8009cce <__gethex+0x12a>
 8009c92:	f1bb 0f00 	cmp.w	fp, #0
 8009c96:	bf0c      	ite	eq
 8009c98:	2506      	moveq	r5, #6
 8009c9a:	2500      	movne	r5, #0
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	b005      	add	sp, #20
 8009ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca4:	2500      	movs	r5, #0
 8009ca6:	462c      	mov	r4, r5
 8009ca8:	e7b0      	b.n	8009c0c <__gethex+0x68>
 8009caa:	2c00      	cmp	r4, #0
 8009cac:	d1c7      	bne.n	8009c3e <__gethex+0x9a>
 8009cae:	4627      	mov	r7, r4
 8009cb0:	e7c7      	b.n	8009c42 <__gethex+0x9e>
 8009cb2:	464e      	mov	r6, r9
 8009cb4:	462f      	mov	r7, r5
 8009cb6:	2501      	movs	r5, #1
 8009cb8:	e7c3      	b.n	8009c42 <__gethex+0x9e>
 8009cba:	2400      	movs	r4, #0
 8009cbc:	1cb1      	adds	r1, r6, #2
 8009cbe:	e7cc      	b.n	8009c5a <__gethex+0xb6>
 8009cc0:	2401      	movs	r4, #1
 8009cc2:	e7fb      	b.n	8009cbc <__gethex+0x118>
 8009cc4:	fb03 0002 	mla	r0, r3, r2, r0
 8009cc8:	e7ce      	b.n	8009c68 <__gethex+0xc4>
 8009cca:	4631      	mov	r1, r6
 8009ccc:	e7de      	b.n	8009c8c <__gethex+0xe8>
 8009cce:	4629      	mov	r1, r5
 8009cd0:	eba6 0309 	sub.w	r3, r6, r9
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	2b07      	cmp	r3, #7
 8009cd8:	dc0a      	bgt.n	8009cf0 <__gethex+0x14c>
 8009cda:	9801      	ldr	r0, [sp, #4]
 8009cdc:	f7fe f962 	bl	8007fa4 <_Balloc>
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	b940      	cbnz	r0, 8009cf6 <__gethex+0x152>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	21e4      	movs	r1, #228	@ 0xe4
 8009ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8009e58 <__gethex+0x2b4>)
 8009cea:	485c      	ldr	r0, [pc, #368]	@ (8009e5c <__gethex+0x2b8>)
 8009cec:	f7ff fec0 	bl	8009a70 <__assert_func>
 8009cf0:	3101      	adds	r1, #1
 8009cf2:	105b      	asrs	r3, r3, #1
 8009cf4:	e7ef      	b.n	8009cd6 <__gethex+0x132>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f100 0a14 	add.w	sl, r0, #20
 8009cfc:	4655      	mov	r5, sl
 8009cfe:	469b      	mov	fp, r3
 8009d00:	45b1      	cmp	r9, r6
 8009d02:	d337      	bcc.n	8009d74 <__gethex+0x1d0>
 8009d04:	f845 bb04 	str.w	fp, [r5], #4
 8009d08:	eba5 050a 	sub.w	r5, r5, sl
 8009d0c:	10ad      	asrs	r5, r5, #2
 8009d0e:	6125      	str	r5, [r4, #16]
 8009d10:	4658      	mov	r0, fp
 8009d12:	f7fe fa39 	bl	8008188 <__hi0bits>
 8009d16:	016d      	lsls	r5, r5, #5
 8009d18:	f8d8 6000 	ldr.w	r6, [r8]
 8009d1c:	1a2d      	subs	r5, r5, r0
 8009d1e:	42b5      	cmp	r5, r6
 8009d20:	dd54      	ble.n	8009dcc <__gethex+0x228>
 8009d22:	1bad      	subs	r5, r5, r6
 8009d24:	4629      	mov	r1, r5
 8009d26:	4620      	mov	r0, r4
 8009d28:	f7fe fdc1 	bl	80088ae <__any_on>
 8009d2c:	4681      	mov	r9, r0
 8009d2e:	b178      	cbz	r0, 8009d50 <__gethex+0x1ac>
 8009d30:	f04f 0901 	mov.w	r9, #1
 8009d34:	1e6b      	subs	r3, r5, #1
 8009d36:	1159      	asrs	r1, r3, #5
 8009d38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009d3c:	f003 021f 	and.w	r2, r3, #31
 8009d40:	fa09 f202 	lsl.w	r2, r9, r2
 8009d44:	420a      	tst	r2, r1
 8009d46:	d003      	beq.n	8009d50 <__gethex+0x1ac>
 8009d48:	454b      	cmp	r3, r9
 8009d4a:	dc36      	bgt.n	8009dba <__gethex+0x216>
 8009d4c:	f04f 0902 	mov.w	r9, #2
 8009d50:	4629      	mov	r1, r5
 8009d52:	4620      	mov	r0, r4
 8009d54:	f7ff febe 	bl	8009ad4 <rshift>
 8009d58:	442f      	add	r7, r5
 8009d5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d5e:	42bb      	cmp	r3, r7
 8009d60:	da42      	bge.n	8009de8 <__gethex+0x244>
 8009d62:	4621      	mov	r1, r4
 8009d64:	9801      	ldr	r0, [sp, #4]
 8009d66:	f7fe f95d 	bl	8008024 <_Bfree>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d6e:	25a3      	movs	r5, #163	@ 0xa3
 8009d70:	6013      	str	r3, [r2, #0]
 8009d72:	e793      	b.n	8009c9c <__gethex+0xf8>
 8009d74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009d78:	2a2e      	cmp	r2, #46	@ 0x2e
 8009d7a:	d012      	beq.n	8009da2 <__gethex+0x1fe>
 8009d7c:	2b20      	cmp	r3, #32
 8009d7e:	d104      	bne.n	8009d8a <__gethex+0x1e6>
 8009d80:	f845 bb04 	str.w	fp, [r5], #4
 8009d84:	f04f 0b00 	mov.w	fp, #0
 8009d88:	465b      	mov	r3, fp
 8009d8a:	7830      	ldrb	r0, [r6, #0]
 8009d8c:	9303      	str	r3, [sp, #12]
 8009d8e:	f7ff fef4 	bl	8009b7a <__hexdig_fun>
 8009d92:	9b03      	ldr	r3, [sp, #12]
 8009d94:	f000 000f 	and.w	r0, r0, #15
 8009d98:	4098      	lsls	r0, r3
 8009d9a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009d9e:	3304      	adds	r3, #4
 8009da0:	e7ae      	b.n	8009d00 <__gethex+0x15c>
 8009da2:	45b1      	cmp	r9, r6
 8009da4:	d8ea      	bhi.n	8009d7c <__gethex+0x1d8>
 8009da6:	2201      	movs	r2, #1
 8009da8:	4630      	mov	r0, r6
 8009daa:	492a      	ldr	r1, [pc, #168]	@ (8009e54 <__gethex+0x2b0>)
 8009dac:	9303      	str	r3, [sp, #12]
 8009dae:	f7ff fe37 	bl	8009a20 <strncmp>
 8009db2:	9b03      	ldr	r3, [sp, #12]
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d1e1      	bne.n	8009d7c <__gethex+0x1d8>
 8009db8:	e7a2      	b.n	8009d00 <__gethex+0x15c>
 8009dba:	4620      	mov	r0, r4
 8009dbc:	1ea9      	subs	r1, r5, #2
 8009dbe:	f7fe fd76 	bl	80088ae <__any_on>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	d0c2      	beq.n	8009d4c <__gethex+0x1a8>
 8009dc6:	f04f 0903 	mov.w	r9, #3
 8009dca:	e7c1      	b.n	8009d50 <__gethex+0x1ac>
 8009dcc:	da09      	bge.n	8009de2 <__gethex+0x23e>
 8009dce:	1b75      	subs	r5, r6, r5
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	462a      	mov	r2, r5
 8009dd4:	9801      	ldr	r0, [sp, #4]
 8009dd6:	f7fe fb3b 	bl	8008450 <__lshift>
 8009dda:	4604      	mov	r4, r0
 8009ddc:	1b7f      	subs	r7, r7, r5
 8009dde:	f100 0a14 	add.w	sl, r0, #20
 8009de2:	f04f 0900 	mov.w	r9, #0
 8009de6:	e7b8      	b.n	8009d5a <__gethex+0x1b6>
 8009de8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009dec:	42bd      	cmp	r5, r7
 8009dee:	dd6f      	ble.n	8009ed0 <__gethex+0x32c>
 8009df0:	1bed      	subs	r5, r5, r7
 8009df2:	42ae      	cmp	r6, r5
 8009df4:	dc34      	bgt.n	8009e60 <__gethex+0x2bc>
 8009df6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d022      	beq.n	8009e44 <__gethex+0x2a0>
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	d024      	beq.n	8009e4c <__gethex+0x2a8>
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d115      	bne.n	8009e32 <__gethex+0x28e>
 8009e06:	42ae      	cmp	r6, r5
 8009e08:	d113      	bne.n	8009e32 <__gethex+0x28e>
 8009e0a:	2e01      	cmp	r6, #1
 8009e0c:	d10b      	bne.n	8009e26 <__gethex+0x282>
 8009e0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e12:	9a02      	ldr	r2, [sp, #8]
 8009e14:	2562      	movs	r5, #98	@ 0x62
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	2301      	movs	r3, #1
 8009e1a:	6123      	str	r3, [r4, #16]
 8009e1c:	f8ca 3000 	str.w	r3, [sl]
 8009e20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e22:	601c      	str	r4, [r3, #0]
 8009e24:	e73a      	b.n	8009c9c <__gethex+0xf8>
 8009e26:	4620      	mov	r0, r4
 8009e28:	1e71      	subs	r1, r6, #1
 8009e2a:	f7fe fd40 	bl	80088ae <__any_on>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d1ed      	bne.n	8009e0e <__gethex+0x26a>
 8009e32:	4621      	mov	r1, r4
 8009e34:	9801      	ldr	r0, [sp, #4]
 8009e36:	f7fe f8f5 	bl	8008024 <_Bfree>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e3e:	2550      	movs	r5, #80	@ 0x50
 8009e40:	6013      	str	r3, [r2, #0]
 8009e42:	e72b      	b.n	8009c9c <__gethex+0xf8>
 8009e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1f3      	bne.n	8009e32 <__gethex+0x28e>
 8009e4a:	e7e0      	b.n	8009e0e <__gethex+0x26a>
 8009e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1dd      	bne.n	8009e0e <__gethex+0x26a>
 8009e52:	e7ee      	b.n	8009e32 <__gethex+0x28e>
 8009e54:	0800b968 	.word	0x0800b968
 8009e58:	0800b7ff 	.word	0x0800b7ff
 8009e5c:	0800bb16 	.word	0x0800bb16
 8009e60:	1e6f      	subs	r7, r5, #1
 8009e62:	f1b9 0f00 	cmp.w	r9, #0
 8009e66:	d130      	bne.n	8009eca <__gethex+0x326>
 8009e68:	b127      	cbz	r7, 8009e74 <__gethex+0x2d0>
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f7fe fd1e 	bl	80088ae <__any_on>
 8009e72:	4681      	mov	r9, r0
 8009e74:	2301      	movs	r3, #1
 8009e76:	4629      	mov	r1, r5
 8009e78:	1b76      	subs	r6, r6, r5
 8009e7a:	2502      	movs	r5, #2
 8009e7c:	117a      	asrs	r2, r7, #5
 8009e7e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009e82:	f007 071f 	and.w	r7, r7, #31
 8009e86:	40bb      	lsls	r3, r7
 8009e88:	4213      	tst	r3, r2
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	bf18      	it	ne
 8009e8e:	f049 0902 	orrne.w	r9, r9, #2
 8009e92:	f7ff fe1f 	bl	8009ad4 <rshift>
 8009e96:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009e9a:	f1b9 0f00 	cmp.w	r9, #0
 8009e9e:	d047      	beq.n	8009f30 <__gethex+0x38c>
 8009ea0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d015      	beq.n	8009ed4 <__gethex+0x330>
 8009ea8:	2b03      	cmp	r3, #3
 8009eaa:	d017      	beq.n	8009edc <__gethex+0x338>
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d109      	bne.n	8009ec4 <__gethex+0x320>
 8009eb0:	f019 0f02 	tst.w	r9, #2
 8009eb4:	d006      	beq.n	8009ec4 <__gethex+0x320>
 8009eb6:	f8da 3000 	ldr.w	r3, [sl]
 8009eba:	ea49 0903 	orr.w	r9, r9, r3
 8009ebe:	f019 0f01 	tst.w	r9, #1
 8009ec2:	d10e      	bne.n	8009ee2 <__gethex+0x33e>
 8009ec4:	f045 0510 	orr.w	r5, r5, #16
 8009ec8:	e032      	b.n	8009f30 <__gethex+0x38c>
 8009eca:	f04f 0901 	mov.w	r9, #1
 8009ece:	e7d1      	b.n	8009e74 <__gethex+0x2d0>
 8009ed0:	2501      	movs	r5, #1
 8009ed2:	e7e2      	b.n	8009e9a <__gethex+0x2f6>
 8009ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ed6:	f1c3 0301 	rsb	r3, r3, #1
 8009eda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009edc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0f0      	beq.n	8009ec4 <__gethex+0x320>
 8009ee2:	f04f 0c00 	mov.w	ip, #0
 8009ee6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009eea:	f104 0314 	add.w	r3, r4, #20
 8009eee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009ef2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009efc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f00:	d01b      	beq.n	8009f3a <__gethex+0x396>
 8009f02:	3201      	adds	r2, #1
 8009f04:	6002      	str	r2, [r0, #0]
 8009f06:	2d02      	cmp	r5, #2
 8009f08:	f104 0314 	add.w	r3, r4, #20
 8009f0c:	d13c      	bne.n	8009f88 <__gethex+0x3e4>
 8009f0e:	f8d8 2000 	ldr.w	r2, [r8]
 8009f12:	3a01      	subs	r2, #1
 8009f14:	42b2      	cmp	r2, r6
 8009f16:	d109      	bne.n	8009f2c <__gethex+0x388>
 8009f18:	2201      	movs	r2, #1
 8009f1a:	1171      	asrs	r1, r6, #5
 8009f1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f20:	f006 061f 	and.w	r6, r6, #31
 8009f24:	fa02 f606 	lsl.w	r6, r2, r6
 8009f28:	421e      	tst	r6, r3
 8009f2a:	d13a      	bne.n	8009fa2 <__gethex+0x3fe>
 8009f2c:	f045 0520 	orr.w	r5, r5, #32
 8009f30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f32:	601c      	str	r4, [r3, #0]
 8009f34:	9b02      	ldr	r3, [sp, #8]
 8009f36:	601f      	str	r7, [r3, #0]
 8009f38:	e6b0      	b.n	8009c9c <__gethex+0xf8>
 8009f3a:	4299      	cmp	r1, r3
 8009f3c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f40:	d8d9      	bhi.n	8009ef6 <__gethex+0x352>
 8009f42:	68a3      	ldr	r3, [r4, #8]
 8009f44:	459b      	cmp	fp, r3
 8009f46:	db17      	blt.n	8009f78 <__gethex+0x3d4>
 8009f48:	6861      	ldr	r1, [r4, #4]
 8009f4a:	9801      	ldr	r0, [sp, #4]
 8009f4c:	3101      	adds	r1, #1
 8009f4e:	f7fe f829 	bl	8007fa4 <_Balloc>
 8009f52:	4681      	mov	r9, r0
 8009f54:	b918      	cbnz	r0, 8009f5e <__gethex+0x3ba>
 8009f56:	4602      	mov	r2, r0
 8009f58:	2184      	movs	r1, #132	@ 0x84
 8009f5a:	4b19      	ldr	r3, [pc, #100]	@ (8009fc0 <__gethex+0x41c>)
 8009f5c:	e6c5      	b.n	8009cea <__gethex+0x146>
 8009f5e:	6922      	ldr	r2, [r4, #16]
 8009f60:	f104 010c 	add.w	r1, r4, #12
 8009f64:	3202      	adds	r2, #2
 8009f66:	0092      	lsls	r2, r2, #2
 8009f68:	300c      	adds	r0, #12
 8009f6a:	f7fd f8b8 	bl	80070de <memcpy>
 8009f6e:	4621      	mov	r1, r4
 8009f70:	9801      	ldr	r0, [sp, #4]
 8009f72:	f7fe f857 	bl	8008024 <_Bfree>
 8009f76:	464c      	mov	r4, r9
 8009f78:	6923      	ldr	r3, [r4, #16]
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	6122      	str	r2, [r4, #16]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f84:	615a      	str	r2, [r3, #20]
 8009f86:	e7be      	b.n	8009f06 <__gethex+0x362>
 8009f88:	6922      	ldr	r2, [r4, #16]
 8009f8a:	455a      	cmp	r2, fp
 8009f8c:	dd0b      	ble.n	8009fa6 <__gethex+0x402>
 8009f8e:	2101      	movs	r1, #1
 8009f90:	4620      	mov	r0, r4
 8009f92:	f7ff fd9f 	bl	8009ad4 <rshift>
 8009f96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f9a:	3701      	adds	r7, #1
 8009f9c:	42bb      	cmp	r3, r7
 8009f9e:	f6ff aee0 	blt.w	8009d62 <__gethex+0x1be>
 8009fa2:	2501      	movs	r5, #1
 8009fa4:	e7c2      	b.n	8009f2c <__gethex+0x388>
 8009fa6:	f016 061f 	ands.w	r6, r6, #31
 8009faa:	d0fa      	beq.n	8009fa2 <__gethex+0x3fe>
 8009fac:	4453      	add	r3, sl
 8009fae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009fb2:	f7fe f8e9 	bl	8008188 <__hi0bits>
 8009fb6:	f1c6 0620 	rsb	r6, r6, #32
 8009fba:	42b0      	cmp	r0, r6
 8009fbc:	dbe7      	blt.n	8009f8e <__gethex+0x3ea>
 8009fbe:	e7f0      	b.n	8009fa2 <__gethex+0x3fe>
 8009fc0:	0800b7ff 	.word	0x0800b7ff

08009fc4 <L_shift>:
 8009fc4:	f1c2 0208 	rsb	r2, r2, #8
 8009fc8:	0092      	lsls	r2, r2, #2
 8009fca:	b570      	push	{r4, r5, r6, lr}
 8009fcc:	f1c2 0620 	rsb	r6, r2, #32
 8009fd0:	6843      	ldr	r3, [r0, #4]
 8009fd2:	6804      	ldr	r4, [r0, #0]
 8009fd4:	fa03 f506 	lsl.w	r5, r3, r6
 8009fd8:	432c      	orrs	r4, r5
 8009fda:	40d3      	lsrs	r3, r2
 8009fdc:	6004      	str	r4, [r0, #0]
 8009fde:	f840 3f04 	str.w	r3, [r0, #4]!
 8009fe2:	4288      	cmp	r0, r1
 8009fe4:	d3f4      	bcc.n	8009fd0 <L_shift+0xc>
 8009fe6:	bd70      	pop	{r4, r5, r6, pc}

08009fe8 <__match>:
 8009fe8:	b530      	push	{r4, r5, lr}
 8009fea:	6803      	ldr	r3, [r0, #0]
 8009fec:	3301      	adds	r3, #1
 8009fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ff2:	b914      	cbnz	r4, 8009ffa <__match+0x12>
 8009ff4:	6003      	str	r3, [r0, #0]
 8009ff6:	2001      	movs	r0, #1
 8009ff8:	bd30      	pop	{r4, r5, pc}
 8009ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ffe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a002:	2d19      	cmp	r5, #25
 800a004:	bf98      	it	ls
 800a006:	3220      	addls	r2, #32
 800a008:	42a2      	cmp	r2, r4
 800a00a:	d0f0      	beq.n	8009fee <__match+0x6>
 800a00c:	2000      	movs	r0, #0
 800a00e:	e7f3      	b.n	8009ff8 <__match+0x10>

0800a010 <__hexnan>:
 800a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	2500      	movs	r5, #0
 800a016:	680b      	ldr	r3, [r1, #0]
 800a018:	4682      	mov	sl, r0
 800a01a:	115e      	asrs	r6, r3, #5
 800a01c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a020:	f013 031f 	ands.w	r3, r3, #31
 800a024:	bf18      	it	ne
 800a026:	3604      	addne	r6, #4
 800a028:	1f37      	subs	r7, r6, #4
 800a02a:	4690      	mov	r8, r2
 800a02c:	46b9      	mov	r9, r7
 800a02e:	463c      	mov	r4, r7
 800a030:	46ab      	mov	fp, r5
 800a032:	b087      	sub	sp, #28
 800a034:	6801      	ldr	r1, [r0, #0]
 800a036:	9301      	str	r3, [sp, #4]
 800a038:	f846 5c04 	str.w	r5, [r6, #-4]
 800a03c:	9502      	str	r5, [sp, #8]
 800a03e:	784a      	ldrb	r2, [r1, #1]
 800a040:	1c4b      	adds	r3, r1, #1
 800a042:	9303      	str	r3, [sp, #12]
 800a044:	b342      	cbz	r2, 800a098 <__hexnan+0x88>
 800a046:	4610      	mov	r0, r2
 800a048:	9105      	str	r1, [sp, #20]
 800a04a:	9204      	str	r2, [sp, #16]
 800a04c:	f7ff fd95 	bl	8009b7a <__hexdig_fun>
 800a050:	2800      	cmp	r0, #0
 800a052:	d151      	bne.n	800a0f8 <__hexnan+0xe8>
 800a054:	9a04      	ldr	r2, [sp, #16]
 800a056:	9905      	ldr	r1, [sp, #20]
 800a058:	2a20      	cmp	r2, #32
 800a05a:	d818      	bhi.n	800a08e <__hexnan+0x7e>
 800a05c:	9b02      	ldr	r3, [sp, #8]
 800a05e:	459b      	cmp	fp, r3
 800a060:	dd13      	ble.n	800a08a <__hexnan+0x7a>
 800a062:	454c      	cmp	r4, r9
 800a064:	d206      	bcs.n	800a074 <__hexnan+0x64>
 800a066:	2d07      	cmp	r5, #7
 800a068:	dc04      	bgt.n	800a074 <__hexnan+0x64>
 800a06a:	462a      	mov	r2, r5
 800a06c:	4649      	mov	r1, r9
 800a06e:	4620      	mov	r0, r4
 800a070:	f7ff ffa8 	bl	8009fc4 <L_shift>
 800a074:	4544      	cmp	r4, r8
 800a076:	d952      	bls.n	800a11e <__hexnan+0x10e>
 800a078:	2300      	movs	r3, #0
 800a07a:	f1a4 0904 	sub.w	r9, r4, #4
 800a07e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a082:	461d      	mov	r5, r3
 800a084:	464c      	mov	r4, r9
 800a086:	f8cd b008 	str.w	fp, [sp, #8]
 800a08a:	9903      	ldr	r1, [sp, #12]
 800a08c:	e7d7      	b.n	800a03e <__hexnan+0x2e>
 800a08e:	2a29      	cmp	r2, #41	@ 0x29
 800a090:	d157      	bne.n	800a142 <__hexnan+0x132>
 800a092:	3102      	adds	r1, #2
 800a094:	f8ca 1000 	str.w	r1, [sl]
 800a098:	f1bb 0f00 	cmp.w	fp, #0
 800a09c:	d051      	beq.n	800a142 <__hexnan+0x132>
 800a09e:	454c      	cmp	r4, r9
 800a0a0:	d206      	bcs.n	800a0b0 <__hexnan+0xa0>
 800a0a2:	2d07      	cmp	r5, #7
 800a0a4:	dc04      	bgt.n	800a0b0 <__hexnan+0xa0>
 800a0a6:	462a      	mov	r2, r5
 800a0a8:	4649      	mov	r1, r9
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f7ff ff8a 	bl	8009fc4 <L_shift>
 800a0b0:	4544      	cmp	r4, r8
 800a0b2:	d936      	bls.n	800a122 <__hexnan+0x112>
 800a0b4:	4623      	mov	r3, r4
 800a0b6:	f1a8 0204 	sub.w	r2, r8, #4
 800a0ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0be:	429f      	cmp	r7, r3
 800a0c0:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0c4:	d2f9      	bcs.n	800a0ba <__hexnan+0xaa>
 800a0c6:	1b3b      	subs	r3, r7, r4
 800a0c8:	f023 0303 	bic.w	r3, r3, #3
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	3401      	adds	r4, #1
 800a0d0:	3e03      	subs	r6, #3
 800a0d2:	42b4      	cmp	r4, r6
 800a0d4:	bf88      	it	hi
 800a0d6:	2304      	movhi	r3, #4
 800a0d8:	2200      	movs	r2, #0
 800a0da:	4443      	add	r3, r8
 800a0dc:	f843 2b04 	str.w	r2, [r3], #4
 800a0e0:	429f      	cmp	r7, r3
 800a0e2:	d2fb      	bcs.n	800a0dc <__hexnan+0xcc>
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	b91b      	cbnz	r3, 800a0f0 <__hexnan+0xe0>
 800a0e8:	4547      	cmp	r7, r8
 800a0ea:	d128      	bne.n	800a13e <__hexnan+0x12e>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	603b      	str	r3, [r7, #0]
 800a0f0:	2005      	movs	r0, #5
 800a0f2:	b007      	add	sp, #28
 800a0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f8:	3501      	adds	r5, #1
 800a0fa:	2d08      	cmp	r5, #8
 800a0fc:	f10b 0b01 	add.w	fp, fp, #1
 800a100:	dd06      	ble.n	800a110 <__hexnan+0x100>
 800a102:	4544      	cmp	r4, r8
 800a104:	d9c1      	bls.n	800a08a <__hexnan+0x7a>
 800a106:	2300      	movs	r3, #0
 800a108:	2501      	movs	r5, #1
 800a10a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a10e:	3c04      	subs	r4, #4
 800a110:	6822      	ldr	r2, [r4, #0]
 800a112:	f000 000f 	and.w	r0, r0, #15
 800a116:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a11a:	6020      	str	r0, [r4, #0]
 800a11c:	e7b5      	b.n	800a08a <__hexnan+0x7a>
 800a11e:	2508      	movs	r5, #8
 800a120:	e7b3      	b.n	800a08a <__hexnan+0x7a>
 800a122:	9b01      	ldr	r3, [sp, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d0dd      	beq.n	800a0e4 <__hexnan+0xd4>
 800a128:	f04f 32ff 	mov.w	r2, #4294967295
 800a12c:	f1c3 0320 	rsb	r3, r3, #32
 800a130:	40da      	lsrs	r2, r3
 800a132:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a136:	4013      	ands	r3, r2
 800a138:	f846 3c04 	str.w	r3, [r6, #-4]
 800a13c:	e7d2      	b.n	800a0e4 <__hexnan+0xd4>
 800a13e:	3f04      	subs	r7, #4
 800a140:	e7d0      	b.n	800a0e4 <__hexnan+0xd4>
 800a142:	2004      	movs	r0, #4
 800a144:	e7d5      	b.n	800a0f2 <__hexnan+0xe2>

0800a146 <__ascii_mbtowc>:
 800a146:	b082      	sub	sp, #8
 800a148:	b901      	cbnz	r1, 800a14c <__ascii_mbtowc+0x6>
 800a14a:	a901      	add	r1, sp, #4
 800a14c:	b142      	cbz	r2, 800a160 <__ascii_mbtowc+0x1a>
 800a14e:	b14b      	cbz	r3, 800a164 <__ascii_mbtowc+0x1e>
 800a150:	7813      	ldrb	r3, [r2, #0]
 800a152:	600b      	str	r3, [r1, #0]
 800a154:	7812      	ldrb	r2, [r2, #0]
 800a156:	1e10      	subs	r0, r2, #0
 800a158:	bf18      	it	ne
 800a15a:	2001      	movne	r0, #1
 800a15c:	b002      	add	sp, #8
 800a15e:	4770      	bx	lr
 800a160:	4610      	mov	r0, r2
 800a162:	e7fb      	b.n	800a15c <__ascii_mbtowc+0x16>
 800a164:	f06f 0001 	mvn.w	r0, #1
 800a168:	e7f8      	b.n	800a15c <__ascii_mbtowc+0x16>

0800a16a <_realloc_r>:
 800a16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a16e:	4680      	mov	r8, r0
 800a170:	4615      	mov	r5, r2
 800a172:	460c      	mov	r4, r1
 800a174:	b921      	cbnz	r1, 800a180 <_realloc_r+0x16>
 800a176:	4611      	mov	r1, r2
 800a178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a17c:	f7fd be86 	b.w	8007e8c <_malloc_r>
 800a180:	b92a      	cbnz	r2, 800a18e <_realloc_r+0x24>
 800a182:	f7fd fe11 	bl	8007da8 <_free_r>
 800a186:	2400      	movs	r4, #0
 800a188:	4620      	mov	r0, r4
 800a18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a18e:	f000 f840 	bl	800a212 <_malloc_usable_size_r>
 800a192:	4285      	cmp	r5, r0
 800a194:	4606      	mov	r6, r0
 800a196:	d802      	bhi.n	800a19e <_realloc_r+0x34>
 800a198:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a19c:	d8f4      	bhi.n	800a188 <_realloc_r+0x1e>
 800a19e:	4629      	mov	r1, r5
 800a1a0:	4640      	mov	r0, r8
 800a1a2:	f7fd fe73 	bl	8007e8c <_malloc_r>
 800a1a6:	4607      	mov	r7, r0
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d0ec      	beq.n	800a186 <_realloc_r+0x1c>
 800a1ac:	42b5      	cmp	r5, r6
 800a1ae:	462a      	mov	r2, r5
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	bf28      	it	cs
 800a1b4:	4632      	movcs	r2, r6
 800a1b6:	f7fc ff92 	bl	80070de <memcpy>
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4640      	mov	r0, r8
 800a1be:	f7fd fdf3 	bl	8007da8 <_free_r>
 800a1c2:	463c      	mov	r4, r7
 800a1c4:	e7e0      	b.n	800a188 <_realloc_r+0x1e>

0800a1c6 <__ascii_wctomb>:
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	b141      	cbz	r1, 800a1de <__ascii_wctomb+0x18>
 800a1cc:	2aff      	cmp	r2, #255	@ 0xff
 800a1ce:	d904      	bls.n	800a1da <__ascii_wctomb+0x14>
 800a1d0:	228a      	movs	r2, #138	@ 0x8a
 800a1d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d6:	601a      	str	r2, [r3, #0]
 800a1d8:	4770      	bx	lr
 800a1da:	2001      	movs	r0, #1
 800a1dc:	700a      	strb	r2, [r1, #0]
 800a1de:	4770      	bx	lr

0800a1e0 <fiprintf>:
 800a1e0:	b40e      	push	{r1, r2, r3}
 800a1e2:	b503      	push	{r0, r1, lr}
 800a1e4:	4601      	mov	r1, r0
 800a1e6:	ab03      	add	r3, sp, #12
 800a1e8:	4805      	ldr	r0, [pc, #20]	@ (800a200 <fiprintf+0x20>)
 800a1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ee:	6800      	ldr	r0, [r0, #0]
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	f000 f83d 	bl	800a270 <_vfiprintf_r>
 800a1f6:	b002      	add	sp, #8
 800a1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1fc:	b003      	add	sp, #12
 800a1fe:	4770      	bx	lr
 800a200:	20000028 	.word	0x20000028

0800a204 <abort>:
 800a204:	2006      	movs	r0, #6
 800a206:	b508      	push	{r3, lr}
 800a208:	f000 fa06 	bl	800a618 <raise>
 800a20c:	2001      	movs	r0, #1
 800a20e:	f7f7 fdf0 	bl	8001df2 <_exit>

0800a212 <_malloc_usable_size_r>:
 800a212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a216:	1f18      	subs	r0, r3, #4
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bfbc      	itt	lt
 800a21c:	580b      	ldrlt	r3, [r1, r0]
 800a21e:	18c0      	addlt	r0, r0, r3
 800a220:	4770      	bx	lr

0800a222 <__sfputc_r>:
 800a222:	6893      	ldr	r3, [r2, #8]
 800a224:	b410      	push	{r4}
 800a226:	3b01      	subs	r3, #1
 800a228:	2b00      	cmp	r3, #0
 800a22a:	6093      	str	r3, [r2, #8]
 800a22c:	da07      	bge.n	800a23e <__sfputc_r+0x1c>
 800a22e:	6994      	ldr	r4, [r2, #24]
 800a230:	42a3      	cmp	r3, r4
 800a232:	db01      	blt.n	800a238 <__sfputc_r+0x16>
 800a234:	290a      	cmp	r1, #10
 800a236:	d102      	bne.n	800a23e <__sfputc_r+0x1c>
 800a238:	bc10      	pop	{r4}
 800a23a:	f000 b931 	b.w	800a4a0 <__swbuf_r>
 800a23e:	6813      	ldr	r3, [r2, #0]
 800a240:	1c58      	adds	r0, r3, #1
 800a242:	6010      	str	r0, [r2, #0]
 800a244:	7019      	strb	r1, [r3, #0]
 800a246:	4608      	mov	r0, r1
 800a248:	bc10      	pop	{r4}
 800a24a:	4770      	bx	lr

0800a24c <__sfputs_r>:
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24e:	4606      	mov	r6, r0
 800a250:	460f      	mov	r7, r1
 800a252:	4614      	mov	r4, r2
 800a254:	18d5      	adds	r5, r2, r3
 800a256:	42ac      	cmp	r4, r5
 800a258:	d101      	bne.n	800a25e <__sfputs_r+0x12>
 800a25a:	2000      	movs	r0, #0
 800a25c:	e007      	b.n	800a26e <__sfputs_r+0x22>
 800a25e:	463a      	mov	r2, r7
 800a260:	4630      	mov	r0, r6
 800a262:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a266:	f7ff ffdc 	bl	800a222 <__sfputc_r>
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	d1f3      	bne.n	800a256 <__sfputs_r+0xa>
 800a26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a270 <_vfiprintf_r>:
 800a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	460d      	mov	r5, r1
 800a276:	4614      	mov	r4, r2
 800a278:	4698      	mov	r8, r3
 800a27a:	4606      	mov	r6, r0
 800a27c:	b09d      	sub	sp, #116	@ 0x74
 800a27e:	b118      	cbz	r0, 800a288 <_vfiprintf_r+0x18>
 800a280:	6a03      	ldr	r3, [r0, #32]
 800a282:	b90b      	cbnz	r3, 800a288 <_vfiprintf_r+0x18>
 800a284:	f7fc fe04 	bl	8006e90 <__sinit>
 800a288:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a28a:	07d9      	lsls	r1, r3, #31
 800a28c:	d405      	bmi.n	800a29a <_vfiprintf_r+0x2a>
 800a28e:	89ab      	ldrh	r3, [r5, #12]
 800a290:	059a      	lsls	r2, r3, #22
 800a292:	d402      	bmi.n	800a29a <_vfiprintf_r+0x2a>
 800a294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a296:	f7fc ff12 	bl	80070be <__retarget_lock_acquire_recursive>
 800a29a:	89ab      	ldrh	r3, [r5, #12]
 800a29c:	071b      	lsls	r3, r3, #28
 800a29e:	d501      	bpl.n	800a2a4 <_vfiprintf_r+0x34>
 800a2a0:	692b      	ldr	r3, [r5, #16]
 800a2a2:	b99b      	cbnz	r3, 800a2cc <_vfiprintf_r+0x5c>
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	f000 f938 	bl	800a51c <__swsetup_r>
 800a2ac:	b170      	cbz	r0, 800a2cc <_vfiprintf_r+0x5c>
 800a2ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2b0:	07dc      	lsls	r4, r3, #31
 800a2b2:	d504      	bpl.n	800a2be <_vfiprintf_r+0x4e>
 800a2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b8:	b01d      	add	sp, #116	@ 0x74
 800a2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2be:	89ab      	ldrh	r3, [r5, #12]
 800a2c0:	0598      	lsls	r0, r3, #22
 800a2c2:	d4f7      	bmi.n	800a2b4 <_vfiprintf_r+0x44>
 800a2c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2c6:	f7fc fefb 	bl	80070c0 <__retarget_lock_release_recursive>
 800a2ca:	e7f3      	b.n	800a2b4 <_vfiprintf_r+0x44>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2d0:	2320      	movs	r3, #32
 800a2d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2d6:	2330      	movs	r3, #48	@ 0x30
 800a2d8:	f04f 0901 	mov.w	r9, #1
 800a2dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2e0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a48c <_vfiprintf_r+0x21c>
 800a2e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2e8:	4623      	mov	r3, r4
 800a2ea:	469a      	mov	sl, r3
 800a2ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2f0:	b10a      	cbz	r2, 800a2f6 <_vfiprintf_r+0x86>
 800a2f2:	2a25      	cmp	r2, #37	@ 0x25
 800a2f4:	d1f9      	bne.n	800a2ea <_vfiprintf_r+0x7a>
 800a2f6:	ebba 0b04 	subs.w	fp, sl, r4
 800a2fa:	d00b      	beq.n	800a314 <_vfiprintf_r+0xa4>
 800a2fc:	465b      	mov	r3, fp
 800a2fe:	4622      	mov	r2, r4
 800a300:	4629      	mov	r1, r5
 800a302:	4630      	mov	r0, r6
 800a304:	f7ff ffa2 	bl	800a24c <__sfputs_r>
 800a308:	3001      	adds	r0, #1
 800a30a:	f000 80a7 	beq.w	800a45c <_vfiprintf_r+0x1ec>
 800a30e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a310:	445a      	add	r2, fp
 800a312:	9209      	str	r2, [sp, #36]	@ 0x24
 800a314:	f89a 3000 	ldrb.w	r3, [sl]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 809f 	beq.w	800a45c <_vfiprintf_r+0x1ec>
 800a31e:	2300      	movs	r3, #0
 800a320:	f04f 32ff 	mov.w	r2, #4294967295
 800a324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a328:	f10a 0a01 	add.w	sl, sl, #1
 800a32c:	9304      	str	r3, [sp, #16]
 800a32e:	9307      	str	r3, [sp, #28]
 800a330:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a334:	931a      	str	r3, [sp, #104]	@ 0x68
 800a336:	4654      	mov	r4, sl
 800a338:	2205      	movs	r2, #5
 800a33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a33e:	4853      	ldr	r0, [pc, #332]	@ (800a48c <_vfiprintf_r+0x21c>)
 800a340:	f7fc febf 	bl	80070c2 <memchr>
 800a344:	9a04      	ldr	r2, [sp, #16]
 800a346:	b9d8      	cbnz	r0, 800a380 <_vfiprintf_r+0x110>
 800a348:	06d1      	lsls	r1, r2, #27
 800a34a:	bf44      	itt	mi
 800a34c:	2320      	movmi	r3, #32
 800a34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a352:	0713      	lsls	r3, r2, #28
 800a354:	bf44      	itt	mi
 800a356:	232b      	movmi	r3, #43	@ 0x2b
 800a358:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a35c:	f89a 3000 	ldrb.w	r3, [sl]
 800a360:	2b2a      	cmp	r3, #42	@ 0x2a
 800a362:	d015      	beq.n	800a390 <_vfiprintf_r+0x120>
 800a364:	4654      	mov	r4, sl
 800a366:	2000      	movs	r0, #0
 800a368:	f04f 0c0a 	mov.w	ip, #10
 800a36c:	9a07      	ldr	r2, [sp, #28]
 800a36e:	4621      	mov	r1, r4
 800a370:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a374:	3b30      	subs	r3, #48	@ 0x30
 800a376:	2b09      	cmp	r3, #9
 800a378:	d94b      	bls.n	800a412 <_vfiprintf_r+0x1a2>
 800a37a:	b1b0      	cbz	r0, 800a3aa <_vfiprintf_r+0x13a>
 800a37c:	9207      	str	r2, [sp, #28]
 800a37e:	e014      	b.n	800a3aa <_vfiprintf_r+0x13a>
 800a380:	eba0 0308 	sub.w	r3, r0, r8
 800a384:	fa09 f303 	lsl.w	r3, r9, r3
 800a388:	4313      	orrs	r3, r2
 800a38a:	46a2      	mov	sl, r4
 800a38c:	9304      	str	r3, [sp, #16]
 800a38e:	e7d2      	b.n	800a336 <_vfiprintf_r+0xc6>
 800a390:	9b03      	ldr	r3, [sp, #12]
 800a392:	1d19      	adds	r1, r3, #4
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	9103      	str	r1, [sp, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	bfbb      	ittet	lt
 800a39c:	425b      	neglt	r3, r3
 800a39e:	f042 0202 	orrlt.w	r2, r2, #2
 800a3a2:	9307      	strge	r3, [sp, #28]
 800a3a4:	9307      	strlt	r3, [sp, #28]
 800a3a6:	bfb8      	it	lt
 800a3a8:	9204      	strlt	r2, [sp, #16]
 800a3aa:	7823      	ldrb	r3, [r4, #0]
 800a3ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3ae:	d10a      	bne.n	800a3c6 <_vfiprintf_r+0x156>
 800a3b0:	7863      	ldrb	r3, [r4, #1]
 800a3b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3b4:	d132      	bne.n	800a41c <_vfiprintf_r+0x1ac>
 800a3b6:	9b03      	ldr	r3, [sp, #12]
 800a3b8:	3402      	adds	r4, #2
 800a3ba:	1d1a      	adds	r2, r3, #4
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	9203      	str	r2, [sp, #12]
 800a3c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3c4:	9305      	str	r3, [sp, #20]
 800a3c6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a490 <_vfiprintf_r+0x220>
 800a3ca:	2203      	movs	r2, #3
 800a3cc:	4650      	mov	r0, sl
 800a3ce:	7821      	ldrb	r1, [r4, #0]
 800a3d0:	f7fc fe77 	bl	80070c2 <memchr>
 800a3d4:	b138      	cbz	r0, 800a3e6 <_vfiprintf_r+0x176>
 800a3d6:	2240      	movs	r2, #64	@ 0x40
 800a3d8:	9b04      	ldr	r3, [sp, #16]
 800a3da:	eba0 000a 	sub.w	r0, r0, sl
 800a3de:	4082      	lsls	r2, r0
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	3401      	adds	r4, #1
 800a3e4:	9304      	str	r3, [sp, #16]
 800a3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ea:	2206      	movs	r2, #6
 800a3ec:	4829      	ldr	r0, [pc, #164]	@ (800a494 <_vfiprintf_r+0x224>)
 800a3ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3f2:	f7fc fe66 	bl	80070c2 <memchr>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d03f      	beq.n	800a47a <_vfiprintf_r+0x20a>
 800a3fa:	4b27      	ldr	r3, [pc, #156]	@ (800a498 <_vfiprintf_r+0x228>)
 800a3fc:	bb1b      	cbnz	r3, 800a446 <_vfiprintf_r+0x1d6>
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	3307      	adds	r3, #7
 800a402:	f023 0307 	bic.w	r3, r3, #7
 800a406:	3308      	adds	r3, #8
 800a408:	9303      	str	r3, [sp, #12]
 800a40a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a40c:	443b      	add	r3, r7
 800a40e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a410:	e76a      	b.n	800a2e8 <_vfiprintf_r+0x78>
 800a412:	460c      	mov	r4, r1
 800a414:	2001      	movs	r0, #1
 800a416:	fb0c 3202 	mla	r2, ip, r2, r3
 800a41a:	e7a8      	b.n	800a36e <_vfiprintf_r+0xfe>
 800a41c:	2300      	movs	r3, #0
 800a41e:	f04f 0c0a 	mov.w	ip, #10
 800a422:	4619      	mov	r1, r3
 800a424:	3401      	adds	r4, #1
 800a426:	9305      	str	r3, [sp, #20]
 800a428:	4620      	mov	r0, r4
 800a42a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a42e:	3a30      	subs	r2, #48	@ 0x30
 800a430:	2a09      	cmp	r2, #9
 800a432:	d903      	bls.n	800a43c <_vfiprintf_r+0x1cc>
 800a434:	2b00      	cmp	r3, #0
 800a436:	d0c6      	beq.n	800a3c6 <_vfiprintf_r+0x156>
 800a438:	9105      	str	r1, [sp, #20]
 800a43a:	e7c4      	b.n	800a3c6 <_vfiprintf_r+0x156>
 800a43c:	4604      	mov	r4, r0
 800a43e:	2301      	movs	r3, #1
 800a440:	fb0c 2101 	mla	r1, ip, r1, r2
 800a444:	e7f0      	b.n	800a428 <_vfiprintf_r+0x1b8>
 800a446:	ab03      	add	r3, sp, #12
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	462a      	mov	r2, r5
 800a44c:	4630      	mov	r0, r6
 800a44e:	4b13      	ldr	r3, [pc, #76]	@ (800a49c <_vfiprintf_r+0x22c>)
 800a450:	a904      	add	r1, sp, #16
 800a452:	f7fb fec3 	bl	80061dc <_printf_float>
 800a456:	4607      	mov	r7, r0
 800a458:	1c78      	adds	r0, r7, #1
 800a45a:	d1d6      	bne.n	800a40a <_vfiprintf_r+0x19a>
 800a45c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a45e:	07d9      	lsls	r1, r3, #31
 800a460:	d405      	bmi.n	800a46e <_vfiprintf_r+0x1fe>
 800a462:	89ab      	ldrh	r3, [r5, #12]
 800a464:	059a      	lsls	r2, r3, #22
 800a466:	d402      	bmi.n	800a46e <_vfiprintf_r+0x1fe>
 800a468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a46a:	f7fc fe29 	bl	80070c0 <__retarget_lock_release_recursive>
 800a46e:	89ab      	ldrh	r3, [r5, #12]
 800a470:	065b      	lsls	r3, r3, #25
 800a472:	f53f af1f 	bmi.w	800a2b4 <_vfiprintf_r+0x44>
 800a476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a478:	e71e      	b.n	800a2b8 <_vfiprintf_r+0x48>
 800a47a:	ab03      	add	r3, sp, #12
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	462a      	mov	r2, r5
 800a480:	4630      	mov	r0, r6
 800a482:	4b06      	ldr	r3, [pc, #24]	@ (800a49c <_vfiprintf_r+0x22c>)
 800a484:	a904      	add	r1, sp, #16
 800a486:	f7fc f947 	bl	8006718 <_printf_i>
 800a48a:	e7e4      	b.n	800a456 <_vfiprintf_r+0x1e6>
 800a48c:	0800bac1 	.word	0x0800bac1
 800a490:	0800bac7 	.word	0x0800bac7
 800a494:	0800bacb 	.word	0x0800bacb
 800a498:	080061dd 	.word	0x080061dd
 800a49c:	0800a24d 	.word	0x0800a24d

0800a4a0 <__swbuf_r>:
 800a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a2:	460e      	mov	r6, r1
 800a4a4:	4614      	mov	r4, r2
 800a4a6:	4605      	mov	r5, r0
 800a4a8:	b118      	cbz	r0, 800a4b2 <__swbuf_r+0x12>
 800a4aa:	6a03      	ldr	r3, [r0, #32]
 800a4ac:	b90b      	cbnz	r3, 800a4b2 <__swbuf_r+0x12>
 800a4ae:	f7fc fcef 	bl	8006e90 <__sinit>
 800a4b2:	69a3      	ldr	r3, [r4, #24]
 800a4b4:	60a3      	str	r3, [r4, #8]
 800a4b6:	89a3      	ldrh	r3, [r4, #12]
 800a4b8:	071a      	lsls	r2, r3, #28
 800a4ba:	d501      	bpl.n	800a4c0 <__swbuf_r+0x20>
 800a4bc:	6923      	ldr	r3, [r4, #16]
 800a4be:	b943      	cbnz	r3, 800a4d2 <__swbuf_r+0x32>
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	f000 f82a 	bl	800a51c <__swsetup_r>
 800a4c8:	b118      	cbz	r0, 800a4d2 <__swbuf_r+0x32>
 800a4ca:	f04f 37ff 	mov.w	r7, #4294967295
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	6922      	ldr	r2, [r4, #16]
 800a4d6:	b2f6      	uxtb	r6, r6
 800a4d8:	1a98      	subs	r0, r3, r2
 800a4da:	6963      	ldr	r3, [r4, #20]
 800a4dc:	4637      	mov	r7, r6
 800a4de:	4283      	cmp	r3, r0
 800a4e0:	dc05      	bgt.n	800a4ee <__swbuf_r+0x4e>
 800a4e2:	4621      	mov	r1, r4
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	f7ff fa59 	bl	800999c <_fflush_r>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	d1ed      	bne.n	800a4ca <__swbuf_r+0x2a>
 800a4ee:	68a3      	ldr	r3, [r4, #8]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	60a3      	str	r3, [r4, #8]
 800a4f4:	6823      	ldr	r3, [r4, #0]
 800a4f6:	1c5a      	adds	r2, r3, #1
 800a4f8:	6022      	str	r2, [r4, #0]
 800a4fa:	701e      	strb	r6, [r3, #0]
 800a4fc:	6962      	ldr	r2, [r4, #20]
 800a4fe:	1c43      	adds	r3, r0, #1
 800a500:	429a      	cmp	r2, r3
 800a502:	d004      	beq.n	800a50e <__swbuf_r+0x6e>
 800a504:	89a3      	ldrh	r3, [r4, #12]
 800a506:	07db      	lsls	r3, r3, #31
 800a508:	d5e1      	bpl.n	800a4ce <__swbuf_r+0x2e>
 800a50a:	2e0a      	cmp	r6, #10
 800a50c:	d1df      	bne.n	800a4ce <__swbuf_r+0x2e>
 800a50e:	4621      	mov	r1, r4
 800a510:	4628      	mov	r0, r5
 800a512:	f7ff fa43 	bl	800999c <_fflush_r>
 800a516:	2800      	cmp	r0, #0
 800a518:	d0d9      	beq.n	800a4ce <__swbuf_r+0x2e>
 800a51a:	e7d6      	b.n	800a4ca <__swbuf_r+0x2a>

0800a51c <__swsetup_r>:
 800a51c:	b538      	push	{r3, r4, r5, lr}
 800a51e:	4b29      	ldr	r3, [pc, #164]	@ (800a5c4 <__swsetup_r+0xa8>)
 800a520:	4605      	mov	r5, r0
 800a522:	6818      	ldr	r0, [r3, #0]
 800a524:	460c      	mov	r4, r1
 800a526:	b118      	cbz	r0, 800a530 <__swsetup_r+0x14>
 800a528:	6a03      	ldr	r3, [r0, #32]
 800a52a:	b90b      	cbnz	r3, 800a530 <__swsetup_r+0x14>
 800a52c:	f7fc fcb0 	bl	8006e90 <__sinit>
 800a530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a534:	0719      	lsls	r1, r3, #28
 800a536:	d422      	bmi.n	800a57e <__swsetup_r+0x62>
 800a538:	06da      	lsls	r2, r3, #27
 800a53a:	d407      	bmi.n	800a54c <__swsetup_r+0x30>
 800a53c:	2209      	movs	r2, #9
 800a53e:	602a      	str	r2, [r5, #0]
 800a540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a544:	f04f 30ff 	mov.w	r0, #4294967295
 800a548:	81a3      	strh	r3, [r4, #12]
 800a54a:	e033      	b.n	800a5b4 <__swsetup_r+0x98>
 800a54c:	0758      	lsls	r0, r3, #29
 800a54e:	d512      	bpl.n	800a576 <__swsetup_r+0x5a>
 800a550:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a552:	b141      	cbz	r1, 800a566 <__swsetup_r+0x4a>
 800a554:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a558:	4299      	cmp	r1, r3
 800a55a:	d002      	beq.n	800a562 <__swsetup_r+0x46>
 800a55c:	4628      	mov	r0, r5
 800a55e:	f7fd fc23 	bl	8007da8 <_free_r>
 800a562:	2300      	movs	r3, #0
 800a564:	6363      	str	r3, [r4, #52]	@ 0x34
 800a566:	89a3      	ldrh	r3, [r4, #12]
 800a568:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a56c:	81a3      	strh	r3, [r4, #12]
 800a56e:	2300      	movs	r3, #0
 800a570:	6063      	str	r3, [r4, #4]
 800a572:	6923      	ldr	r3, [r4, #16]
 800a574:	6023      	str	r3, [r4, #0]
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	f043 0308 	orr.w	r3, r3, #8
 800a57c:	81a3      	strh	r3, [r4, #12]
 800a57e:	6923      	ldr	r3, [r4, #16]
 800a580:	b94b      	cbnz	r3, 800a596 <__swsetup_r+0x7a>
 800a582:	89a3      	ldrh	r3, [r4, #12]
 800a584:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a58c:	d003      	beq.n	800a596 <__swsetup_r+0x7a>
 800a58e:	4621      	mov	r1, r4
 800a590:	4628      	mov	r0, r5
 800a592:	f000 f882 	bl	800a69a <__smakebuf_r>
 800a596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59a:	f013 0201 	ands.w	r2, r3, #1
 800a59e:	d00a      	beq.n	800a5b6 <__swsetup_r+0x9a>
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	60a2      	str	r2, [r4, #8]
 800a5a4:	6962      	ldr	r2, [r4, #20]
 800a5a6:	4252      	negs	r2, r2
 800a5a8:	61a2      	str	r2, [r4, #24]
 800a5aa:	6922      	ldr	r2, [r4, #16]
 800a5ac:	b942      	cbnz	r2, 800a5c0 <__swsetup_r+0xa4>
 800a5ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a5b2:	d1c5      	bne.n	800a540 <__swsetup_r+0x24>
 800a5b4:	bd38      	pop	{r3, r4, r5, pc}
 800a5b6:	0799      	lsls	r1, r3, #30
 800a5b8:	bf58      	it	pl
 800a5ba:	6962      	ldrpl	r2, [r4, #20]
 800a5bc:	60a2      	str	r2, [r4, #8]
 800a5be:	e7f4      	b.n	800a5aa <__swsetup_r+0x8e>
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	e7f7      	b.n	800a5b4 <__swsetup_r+0x98>
 800a5c4:	20000028 	.word	0x20000028

0800a5c8 <_raise_r>:
 800a5c8:	291f      	cmp	r1, #31
 800a5ca:	b538      	push	{r3, r4, r5, lr}
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	460c      	mov	r4, r1
 800a5d0:	d904      	bls.n	800a5dc <_raise_r+0x14>
 800a5d2:	2316      	movs	r3, #22
 800a5d4:	6003      	str	r3, [r0, #0]
 800a5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5da:	bd38      	pop	{r3, r4, r5, pc}
 800a5dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a5de:	b112      	cbz	r2, 800a5e6 <_raise_r+0x1e>
 800a5e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5e4:	b94b      	cbnz	r3, 800a5fa <_raise_r+0x32>
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f000 f830 	bl	800a64c <_getpid_r>
 800a5ec:	4622      	mov	r2, r4
 800a5ee:	4601      	mov	r1, r0
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5f6:	f000 b817 	b.w	800a628 <_kill_r>
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d00a      	beq.n	800a614 <_raise_r+0x4c>
 800a5fe:	1c59      	adds	r1, r3, #1
 800a600:	d103      	bne.n	800a60a <_raise_r+0x42>
 800a602:	2316      	movs	r3, #22
 800a604:	6003      	str	r3, [r0, #0]
 800a606:	2001      	movs	r0, #1
 800a608:	e7e7      	b.n	800a5da <_raise_r+0x12>
 800a60a:	2100      	movs	r1, #0
 800a60c:	4620      	mov	r0, r4
 800a60e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a612:	4798      	blx	r3
 800a614:	2000      	movs	r0, #0
 800a616:	e7e0      	b.n	800a5da <_raise_r+0x12>

0800a618 <raise>:
 800a618:	4b02      	ldr	r3, [pc, #8]	@ (800a624 <raise+0xc>)
 800a61a:	4601      	mov	r1, r0
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	f7ff bfd3 	b.w	800a5c8 <_raise_r>
 800a622:	bf00      	nop
 800a624:	20000028 	.word	0x20000028

0800a628 <_kill_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	2300      	movs	r3, #0
 800a62c:	4d06      	ldr	r5, [pc, #24]	@ (800a648 <_kill_r+0x20>)
 800a62e:	4604      	mov	r4, r0
 800a630:	4608      	mov	r0, r1
 800a632:	4611      	mov	r1, r2
 800a634:	602b      	str	r3, [r5, #0]
 800a636:	f7f7 fbcc 	bl	8001dd2 <_kill>
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	d102      	bne.n	800a644 <_kill_r+0x1c>
 800a63e:	682b      	ldr	r3, [r5, #0]
 800a640:	b103      	cbz	r3, 800a644 <_kill_r+0x1c>
 800a642:	6023      	str	r3, [r4, #0]
 800a644:	bd38      	pop	{r3, r4, r5, pc}
 800a646:	bf00      	nop
 800a648:	20000a30 	.word	0x20000a30

0800a64c <_getpid_r>:
 800a64c:	f7f7 bbba 	b.w	8001dc4 <_getpid>

0800a650 <__swhatbuf_r>:
 800a650:	b570      	push	{r4, r5, r6, lr}
 800a652:	460c      	mov	r4, r1
 800a654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a658:	4615      	mov	r5, r2
 800a65a:	2900      	cmp	r1, #0
 800a65c:	461e      	mov	r6, r3
 800a65e:	b096      	sub	sp, #88	@ 0x58
 800a660:	da0c      	bge.n	800a67c <__swhatbuf_r+0x2c>
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	2100      	movs	r1, #0
 800a666:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a66a:	bf14      	ite	ne
 800a66c:	2340      	movne	r3, #64	@ 0x40
 800a66e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a672:	2000      	movs	r0, #0
 800a674:	6031      	str	r1, [r6, #0]
 800a676:	602b      	str	r3, [r5, #0]
 800a678:	b016      	add	sp, #88	@ 0x58
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
 800a67c:	466a      	mov	r2, sp
 800a67e:	f000 f849 	bl	800a714 <_fstat_r>
 800a682:	2800      	cmp	r0, #0
 800a684:	dbed      	blt.n	800a662 <__swhatbuf_r+0x12>
 800a686:	9901      	ldr	r1, [sp, #4]
 800a688:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a68c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a690:	4259      	negs	r1, r3
 800a692:	4159      	adcs	r1, r3
 800a694:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a698:	e7eb      	b.n	800a672 <__swhatbuf_r+0x22>

0800a69a <__smakebuf_r>:
 800a69a:	898b      	ldrh	r3, [r1, #12]
 800a69c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a69e:	079d      	lsls	r5, r3, #30
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	d507      	bpl.n	800a6b6 <__smakebuf_r+0x1c>
 800a6a6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6aa:	6023      	str	r3, [r4, #0]
 800a6ac:	6123      	str	r3, [r4, #16]
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	6163      	str	r3, [r4, #20]
 800a6b2:	b003      	add	sp, #12
 800a6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6b6:	466a      	mov	r2, sp
 800a6b8:	ab01      	add	r3, sp, #4
 800a6ba:	f7ff ffc9 	bl	800a650 <__swhatbuf_r>
 800a6be:	9f00      	ldr	r7, [sp, #0]
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	4639      	mov	r1, r7
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f7fd fbe1 	bl	8007e8c <_malloc_r>
 800a6ca:	b948      	cbnz	r0, 800a6e0 <__smakebuf_r+0x46>
 800a6cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6d0:	059a      	lsls	r2, r3, #22
 800a6d2:	d4ee      	bmi.n	800a6b2 <__smakebuf_r+0x18>
 800a6d4:	f023 0303 	bic.w	r3, r3, #3
 800a6d8:	f043 0302 	orr.w	r3, r3, #2
 800a6dc:	81a3      	strh	r3, [r4, #12]
 800a6de:	e7e2      	b.n	800a6a6 <__smakebuf_r+0xc>
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a6e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6ea:	81a3      	strh	r3, [r4, #12]
 800a6ec:	9b01      	ldr	r3, [sp, #4]
 800a6ee:	6020      	str	r0, [r4, #0]
 800a6f0:	b15b      	cbz	r3, 800a70a <__smakebuf_r+0x70>
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6f8:	f000 f81e 	bl	800a738 <_isatty_r>
 800a6fc:	b128      	cbz	r0, 800a70a <__smakebuf_r+0x70>
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	f023 0303 	bic.w	r3, r3, #3
 800a704:	f043 0301 	orr.w	r3, r3, #1
 800a708:	81a3      	strh	r3, [r4, #12]
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	431d      	orrs	r5, r3
 800a70e:	81a5      	strh	r5, [r4, #12]
 800a710:	e7cf      	b.n	800a6b2 <__smakebuf_r+0x18>
	...

0800a714 <_fstat_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	2300      	movs	r3, #0
 800a718:	4d06      	ldr	r5, [pc, #24]	@ (800a734 <_fstat_r+0x20>)
 800a71a:	4604      	mov	r4, r0
 800a71c:	4608      	mov	r0, r1
 800a71e:	4611      	mov	r1, r2
 800a720:	602b      	str	r3, [r5, #0]
 800a722:	f7f7 fbb5 	bl	8001e90 <_fstat>
 800a726:	1c43      	adds	r3, r0, #1
 800a728:	d102      	bne.n	800a730 <_fstat_r+0x1c>
 800a72a:	682b      	ldr	r3, [r5, #0]
 800a72c:	b103      	cbz	r3, 800a730 <_fstat_r+0x1c>
 800a72e:	6023      	str	r3, [r4, #0]
 800a730:	bd38      	pop	{r3, r4, r5, pc}
 800a732:	bf00      	nop
 800a734:	20000a30 	.word	0x20000a30

0800a738 <_isatty_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	2300      	movs	r3, #0
 800a73c:	4d05      	ldr	r5, [pc, #20]	@ (800a754 <_isatty_r+0x1c>)
 800a73e:	4604      	mov	r4, r0
 800a740:	4608      	mov	r0, r1
 800a742:	602b      	str	r3, [r5, #0]
 800a744:	f7f7 fbb3 	bl	8001eae <_isatty>
 800a748:	1c43      	adds	r3, r0, #1
 800a74a:	d102      	bne.n	800a752 <_isatty_r+0x1a>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	b103      	cbz	r3, 800a752 <_isatty_r+0x1a>
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	bd38      	pop	{r3, r4, r5, pc}
 800a754:	20000a30 	.word	0x20000a30

0800a758 <sin>:
 800a758:	b530      	push	{r4, r5, lr}
 800a75a:	4d20      	ldr	r5, [pc, #128]	@ (800a7dc <sin+0x84>)
 800a75c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800a760:	42ac      	cmp	r4, r5
 800a762:	4602      	mov	r2, r0
 800a764:	460b      	mov	r3, r1
 800a766:	b087      	sub	sp, #28
 800a768:	d806      	bhi.n	800a778 <sin+0x20>
 800a76a:	2300      	movs	r3, #0
 800a76c:	2200      	movs	r2, #0
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	2300      	movs	r3, #0
 800a772:	f000 f8f9 	bl	800a968 <__kernel_sin>
 800a776:	e004      	b.n	800a782 <sin+0x2a>
 800a778:	4d19      	ldr	r5, [pc, #100]	@ (800a7e0 <sin+0x88>)
 800a77a:	42ac      	cmp	r4, r5
 800a77c:	d903      	bls.n	800a786 <sin+0x2e>
 800a77e:	f7f5 fcf3 	bl	8000168 <__aeabi_dsub>
 800a782:	b007      	add	sp, #28
 800a784:	bd30      	pop	{r4, r5, pc}
 800a786:	aa02      	add	r2, sp, #8
 800a788:	f000 f9a6 	bl	800aad8 <__ieee754_rem_pio2>
 800a78c:	f000 0003 	and.w	r0, r0, #3
 800a790:	2801      	cmp	r0, #1
 800a792:	d009      	beq.n	800a7a8 <sin+0x50>
 800a794:	2802      	cmp	r0, #2
 800a796:	d00e      	beq.n	800a7b6 <sin+0x5e>
 800a798:	b9c0      	cbnz	r0, 800a7cc <sin+0x74>
 800a79a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a79e:	2301      	movs	r3, #1
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7a6:	e7e4      	b.n	800a772 <sin+0x1a>
 800a7a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7b0:	f000 f81a 	bl	800a7e8 <__kernel_cos>
 800a7b4:	e7e5      	b.n	800a782 <sin+0x2a>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7c2:	f000 f8d1 	bl	800a968 <__kernel_sin>
 800a7c6:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800a7ca:	e7da      	b.n	800a782 <sin+0x2a>
 800a7cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7d4:	f000 f808 	bl	800a7e8 <__kernel_cos>
 800a7d8:	e7f5      	b.n	800a7c6 <sin+0x6e>
 800a7da:	bf00      	nop
 800a7dc:	3fe921fb 	.word	0x3fe921fb
 800a7e0:	7fefffff 	.word	0x7fefffff
 800a7e4:	00000000 	.word	0x00000000

0800a7e8 <__kernel_cos>:
 800a7e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ec:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a7f0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	4689      	mov	r9, r1
 800a7f8:	e9cd 2300 	strd	r2, r3, [sp]
 800a7fc:	d204      	bcs.n	800a808 <__kernel_cos+0x20>
 800a7fe:	f7f6 f91b 	bl	8000a38 <__aeabi_d2iz>
 800a802:	2800      	cmp	r0, #0
 800a804:	f000 8086 	beq.w	800a914 <__kernel_cos+0x12c>
 800a808:	4642      	mov	r2, r8
 800a80a:	464b      	mov	r3, r9
 800a80c:	4640      	mov	r0, r8
 800a80e:	4649      	mov	r1, r9
 800a810:	f7f5 fe62 	bl	80004d8 <__aeabi_dmul>
 800a814:	2200      	movs	r2, #0
 800a816:	4b4e      	ldr	r3, [pc, #312]	@ (800a950 <__kernel_cos+0x168>)
 800a818:	4604      	mov	r4, r0
 800a81a:	460d      	mov	r5, r1
 800a81c:	f7f5 fe5c 	bl	80004d8 <__aeabi_dmul>
 800a820:	a33f      	add	r3, pc, #252	@ (adr r3, 800a920 <__kernel_cos+0x138>)
 800a822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a826:	4682      	mov	sl, r0
 800a828:	468b      	mov	fp, r1
 800a82a:	4620      	mov	r0, r4
 800a82c:	4629      	mov	r1, r5
 800a82e:	f7f5 fe53 	bl	80004d8 <__aeabi_dmul>
 800a832:	a33d      	add	r3, pc, #244	@ (adr r3, 800a928 <__kernel_cos+0x140>)
 800a834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a838:	f7f5 fc98 	bl	800016c <__adddf3>
 800a83c:	4622      	mov	r2, r4
 800a83e:	462b      	mov	r3, r5
 800a840:	f7f5 fe4a 	bl	80004d8 <__aeabi_dmul>
 800a844:	a33a      	add	r3, pc, #232	@ (adr r3, 800a930 <__kernel_cos+0x148>)
 800a846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84a:	f7f5 fc8d 	bl	8000168 <__aeabi_dsub>
 800a84e:	4622      	mov	r2, r4
 800a850:	462b      	mov	r3, r5
 800a852:	f7f5 fe41 	bl	80004d8 <__aeabi_dmul>
 800a856:	a338      	add	r3, pc, #224	@ (adr r3, 800a938 <__kernel_cos+0x150>)
 800a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85c:	f7f5 fc86 	bl	800016c <__adddf3>
 800a860:	4622      	mov	r2, r4
 800a862:	462b      	mov	r3, r5
 800a864:	f7f5 fe38 	bl	80004d8 <__aeabi_dmul>
 800a868:	a335      	add	r3, pc, #212	@ (adr r3, 800a940 <__kernel_cos+0x158>)
 800a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86e:	f7f5 fc7b 	bl	8000168 <__aeabi_dsub>
 800a872:	4622      	mov	r2, r4
 800a874:	462b      	mov	r3, r5
 800a876:	f7f5 fe2f 	bl	80004d8 <__aeabi_dmul>
 800a87a:	a333      	add	r3, pc, #204	@ (adr r3, 800a948 <__kernel_cos+0x160>)
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	f7f5 fc74 	bl	800016c <__adddf3>
 800a884:	4622      	mov	r2, r4
 800a886:	462b      	mov	r3, r5
 800a888:	f7f5 fe26 	bl	80004d8 <__aeabi_dmul>
 800a88c:	4622      	mov	r2, r4
 800a88e:	462b      	mov	r3, r5
 800a890:	f7f5 fe22 	bl	80004d8 <__aeabi_dmul>
 800a894:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a898:	4604      	mov	r4, r0
 800a89a:	460d      	mov	r5, r1
 800a89c:	4640      	mov	r0, r8
 800a89e:	4649      	mov	r1, r9
 800a8a0:	f7f5 fe1a 	bl	80004d8 <__aeabi_dmul>
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	4629      	mov	r1, r5
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f7f5 fc5c 	bl	8000168 <__aeabi_dsub>
 800a8b0:	4b28      	ldr	r3, [pc, #160]	@ (800a954 <__kernel_cos+0x16c>)
 800a8b2:	4680      	mov	r8, r0
 800a8b4:	429e      	cmp	r6, r3
 800a8b6:	4689      	mov	r9, r1
 800a8b8:	d80e      	bhi.n	800a8d8 <__kernel_cos+0xf0>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	460b      	mov	r3, r1
 800a8be:	4650      	mov	r0, sl
 800a8c0:	4659      	mov	r1, fp
 800a8c2:	f7f5 fc51 	bl	8000168 <__aeabi_dsub>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4922      	ldr	r1, [pc, #136]	@ (800a958 <__kernel_cos+0x170>)
 800a8ce:	f7f5 fc4b 	bl	8000168 <__aeabi_dsub>
 800a8d2:	b003      	add	sp, #12
 800a8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d8:	2400      	movs	r4, #0
 800a8da:	4b20      	ldr	r3, [pc, #128]	@ (800a95c <__kernel_cos+0x174>)
 800a8dc:	4622      	mov	r2, r4
 800a8de:	429e      	cmp	r6, r3
 800a8e0:	bf8c      	ite	hi
 800a8e2:	4d1f      	ldrhi	r5, [pc, #124]	@ (800a960 <__kernel_cos+0x178>)
 800a8e4:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 800a8e8:	462b      	mov	r3, r5
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	491a      	ldr	r1, [pc, #104]	@ (800a958 <__kernel_cos+0x170>)
 800a8ee:	f7f5 fc3b 	bl	8000168 <__aeabi_dsub>
 800a8f2:	4622      	mov	r2, r4
 800a8f4:	4606      	mov	r6, r0
 800a8f6:	460f      	mov	r7, r1
 800a8f8:	462b      	mov	r3, r5
 800a8fa:	4650      	mov	r0, sl
 800a8fc:	4659      	mov	r1, fp
 800a8fe:	f7f5 fc33 	bl	8000168 <__aeabi_dsub>
 800a902:	4642      	mov	r2, r8
 800a904:	464b      	mov	r3, r9
 800a906:	f7f5 fc2f 	bl	8000168 <__aeabi_dsub>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	4630      	mov	r0, r6
 800a910:	4639      	mov	r1, r7
 800a912:	e7dc      	b.n	800a8ce <__kernel_cos+0xe6>
 800a914:	2000      	movs	r0, #0
 800a916:	4910      	ldr	r1, [pc, #64]	@ (800a958 <__kernel_cos+0x170>)
 800a918:	e7db      	b.n	800a8d2 <__kernel_cos+0xea>
 800a91a:	bf00      	nop
 800a91c:	f3af 8000 	nop.w
 800a920:	be8838d4 	.word	0xbe8838d4
 800a924:	bda8fae9 	.word	0xbda8fae9
 800a928:	bdb4b1c4 	.word	0xbdb4b1c4
 800a92c:	3e21ee9e 	.word	0x3e21ee9e
 800a930:	809c52ad 	.word	0x809c52ad
 800a934:	3e927e4f 	.word	0x3e927e4f
 800a938:	19cb1590 	.word	0x19cb1590
 800a93c:	3efa01a0 	.word	0x3efa01a0
 800a940:	16c15177 	.word	0x16c15177
 800a944:	3f56c16c 	.word	0x3f56c16c
 800a948:	5555554c 	.word	0x5555554c
 800a94c:	3fa55555 	.word	0x3fa55555
 800a950:	3fe00000 	.word	0x3fe00000
 800a954:	3fd33332 	.word	0x3fd33332
 800a958:	3ff00000 	.word	0x3ff00000
 800a95c:	3fe90000 	.word	0x3fe90000
 800a960:	3fd20000 	.word	0x3fd20000
 800a964:	00000000 	.word	0x00000000

0800a968 <__kernel_sin>:
 800a968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96c:	461f      	mov	r7, r3
 800a96e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a972:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a976:	4604      	mov	r4, r0
 800a978:	460d      	mov	r5, r1
 800a97a:	4616      	mov	r6, r2
 800a97c:	b085      	sub	sp, #20
 800a97e:	d203      	bcs.n	800a988 <__kernel_sin+0x20>
 800a980:	f7f6 f85a 	bl	8000a38 <__aeabi_d2iz>
 800a984:	2800      	cmp	r0, #0
 800a986:	d051      	beq.n	800aa2c <__kernel_sin+0xc4>
 800a988:	4622      	mov	r2, r4
 800a98a:	462b      	mov	r3, r5
 800a98c:	4620      	mov	r0, r4
 800a98e:	4629      	mov	r1, r5
 800a990:	f7f5 fda2 	bl	80004d8 <__aeabi_dmul>
 800a994:	4682      	mov	sl, r0
 800a996:	468b      	mov	fp, r1
 800a998:	4602      	mov	r2, r0
 800a99a:	460b      	mov	r3, r1
 800a99c:	4620      	mov	r0, r4
 800a99e:	4629      	mov	r1, r5
 800a9a0:	f7f5 fd9a 	bl	80004d8 <__aeabi_dmul>
 800a9a4:	a33e      	add	r3, pc, #248	@ (adr r3, 800aaa0 <__kernel_sin+0x138>)
 800a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9aa:	4680      	mov	r8, r0
 800a9ac:	4689      	mov	r9, r1
 800a9ae:	4650      	mov	r0, sl
 800a9b0:	4659      	mov	r1, fp
 800a9b2:	f7f5 fd91 	bl	80004d8 <__aeabi_dmul>
 800a9b6:	a33c      	add	r3, pc, #240	@ (adr r3, 800aaa8 <__kernel_sin+0x140>)
 800a9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9bc:	f7f5 fbd4 	bl	8000168 <__aeabi_dsub>
 800a9c0:	4652      	mov	r2, sl
 800a9c2:	465b      	mov	r3, fp
 800a9c4:	f7f5 fd88 	bl	80004d8 <__aeabi_dmul>
 800a9c8:	a339      	add	r3, pc, #228	@ (adr r3, 800aab0 <__kernel_sin+0x148>)
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	f7f5 fbcd 	bl	800016c <__adddf3>
 800a9d2:	4652      	mov	r2, sl
 800a9d4:	465b      	mov	r3, fp
 800a9d6:	f7f5 fd7f 	bl	80004d8 <__aeabi_dmul>
 800a9da:	a337      	add	r3, pc, #220	@ (adr r3, 800aab8 <__kernel_sin+0x150>)
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	f7f5 fbc2 	bl	8000168 <__aeabi_dsub>
 800a9e4:	4652      	mov	r2, sl
 800a9e6:	465b      	mov	r3, fp
 800a9e8:	f7f5 fd76 	bl	80004d8 <__aeabi_dmul>
 800a9ec:	a334      	add	r3, pc, #208	@ (adr r3, 800aac0 <__kernel_sin+0x158>)
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	f7f5 fbbb 	bl	800016c <__adddf3>
 800a9f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a9fc:	b9db      	cbnz	r3, 800aa36 <__kernel_sin+0xce>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	460b      	mov	r3, r1
 800aa02:	4650      	mov	r0, sl
 800aa04:	4659      	mov	r1, fp
 800aa06:	f7f5 fd67 	bl	80004d8 <__aeabi_dmul>
 800aa0a:	a32f      	add	r3, pc, #188	@ (adr r3, 800aac8 <__kernel_sin+0x160>)
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f7f5 fbaa 	bl	8000168 <__aeabi_dsub>
 800aa14:	4642      	mov	r2, r8
 800aa16:	464b      	mov	r3, r9
 800aa18:	f7f5 fd5e 	bl	80004d8 <__aeabi_dmul>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4620      	mov	r0, r4
 800aa22:	4629      	mov	r1, r5
 800aa24:	f7f5 fba2 	bl	800016c <__adddf3>
 800aa28:	4604      	mov	r4, r0
 800aa2a:	460d      	mov	r5, r1
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	4629      	mov	r1, r5
 800aa30:	b005      	add	sp, #20
 800aa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa36:	2200      	movs	r2, #0
 800aa38:	4630      	mov	r0, r6
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	4b24      	ldr	r3, [pc, #144]	@ (800aad0 <__kernel_sin+0x168>)
 800aa3e:	f7f5 fd4b 	bl	80004d8 <__aeabi_dmul>
 800aa42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa4a:	4640      	mov	r0, r8
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	f7f5 fd43 	bl	80004d8 <__aeabi_dmul>
 800aa52:	4602      	mov	r2, r0
 800aa54:	460b      	mov	r3, r1
 800aa56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa5a:	f7f5 fb85 	bl	8000168 <__aeabi_dsub>
 800aa5e:	4652      	mov	r2, sl
 800aa60:	465b      	mov	r3, fp
 800aa62:	f7f5 fd39 	bl	80004d8 <__aeabi_dmul>
 800aa66:	4632      	mov	r2, r6
 800aa68:	463b      	mov	r3, r7
 800aa6a:	f7f5 fb7d 	bl	8000168 <__aeabi_dsub>
 800aa6e:	a316      	add	r3, pc, #88	@ (adr r3, 800aac8 <__kernel_sin+0x160>)
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	4606      	mov	r6, r0
 800aa76:	460f      	mov	r7, r1
 800aa78:	4640      	mov	r0, r8
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	f7f5 fd2c 	bl	80004d8 <__aeabi_dmul>
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	4630      	mov	r0, r6
 800aa86:	4639      	mov	r1, r7
 800aa88:	f7f5 fb70 	bl	800016c <__adddf3>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4620      	mov	r0, r4
 800aa92:	4629      	mov	r1, r5
 800aa94:	f7f5 fb68 	bl	8000168 <__aeabi_dsub>
 800aa98:	e7c6      	b.n	800aa28 <__kernel_sin+0xc0>
 800aa9a:	bf00      	nop
 800aa9c:	f3af 8000 	nop.w
 800aaa0:	5acfd57c 	.word	0x5acfd57c
 800aaa4:	3de5d93a 	.word	0x3de5d93a
 800aaa8:	8a2b9ceb 	.word	0x8a2b9ceb
 800aaac:	3e5ae5e6 	.word	0x3e5ae5e6
 800aab0:	57b1fe7d 	.word	0x57b1fe7d
 800aab4:	3ec71de3 	.word	0x3ec71de3
 800aab8:	19c161d5 	.word	0x19c161d5
 800aabc:	3f2a01a0 	.word	0x3f2a01a0
 800aac0:	1110f8a6 	.word	0x1110f8a6
 800aac4:	3f811111 	.word	0x3f811111
 800aac8:	55555549 	.word	0x55555549
 800aacc:	3fc55555 	.word	0x3fc55555
 800aad0:	3fe00000 	.word	0x3fe00000
 800aad4:	00000000 	.word	0x00000000

0800aad8 <__ieee754_rem_pio2>:
 800aad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aadc:	4bc4      	ldr	r3, [pc, #784]	@ (800adf0 <__ieee754_rem_pio2+0x318>)
 800aade:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800aae2:	b08d      	sub	sp, #52	@ 0x34
 800aae4:	4598      	cmp	r8, r3
 800aae6:	4606      	mov	r6, r0
 800aae8:	460f      	mov	r7, r1
 800aaea:	4614      	mov	r4, r2
 800aaec:	9104      	str	r1, [sp, #16]
 800aaee:	d807      	bhi.n	800ab00 <__ieee754_rem_pio2+0x28>
 800aaf0:	e9c2 6700 	strd	r6, r7, [r2]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800aafc:	2500      	movs	r5, #0
 800aafe:	e026      	b.n	800ab4e <__ieee754_rem_pio2+0x76>
 800ab00:	4bbc      	ldr	r3, [pc, #752]	@ (800adf4 <__ieee754_rem_pio2+0x31c>)
 800ab02:	4598      	cmp	r8, r3
 800ab04:	d876      	bhi.n	800abf4 <__ieee754_rem_pio2+0x11c>
 800ab06:	9b04      	ldr	r3, [sp, #16]
 800ab08:	4dbb      	ldr	r5, [pc, #748]	@ (800adf8 <__ieee754_rem_pio2+0x320>)
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	a3aa      	add	r3, pc, #680	@ (adr r3, 800adb8 <__ieee754_rem_pio2+0x2e0>)
 800ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab12:	dd38      	ble.n	800ab86 <__ieee754_rem_pio2+0xae>
 800ab14:	f7f5 fb28 	bl	8000168 <__aeabi_dsub>
 800ab18:	45a8      	cmp	r8, r5
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	460f      	mov	r7, r1
 800ab1e:	d01a      	beq.n	800ab56 <__ieee754_rem_pio2+0x7e>
 800ab20:	a3a7      	add	r3, pc, #668	@ (adr r3, 800adc0 <__ieee754_rem_pio2+0x2e8>)
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	f7f5 fb1f 	bl	8000168 <__aeabi_dsub>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4680      	mov	r8, r0
 800ab30:	4689      	mov	r9, r1
 800ab32:	4630      	mov	r0, r6
 800ab34:	4639      	mov	r1, r7
 800ab36:	f7f5 fb17 	bl	8000168 <__aeabi_dsub>
 800ab3a:	a3a1      	add	r3, pc, #644	@ (adr r3, 800adc0 <__ieee754_rem_pio2+0x2e8>)
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f7f5 fb12 	bl	8000168 <__aeabi_dsub>
 800ab44:	2501      	movs	r5, #1
 800ab46:	e9c4 8900 	strd	r8, r9, [r4]
 800ab4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ab4e:	4628      	mov	r0, r5
 800ab50:	b00d      	add	sp, #52	@ 0x34
 800ab52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab56:	a39c      	add	r3, pc, #624	@ (adr r3, 800adc8 <__ieee754_rem_pio2+0x2f0>)
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	f7f5 fb04 	bl	8000168 <__aeabi_dsub>
 800ab60:	a39b      	add	r3, pc, #620	@ (adr r3, 800add0 <__ieee754_rem_pio2+0x2f8>)
 800ab62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab66:	4606      	mov	r6, r0
 800ab68:	460f      	mov	r7, r1
 800ab6a:	f7f5 fafd 	bl	8000168 <__aeabi_dsub>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	460b      	mov	r3, r1
 800ab72:	4680      	mov	r8, r0
 800ab74:	4689      	mov	r9, r1
 800ab76:	4630      	mov	r0, r6
 800ab78:	4639      	mov	r1, r7
 800ab7a:	f7f5 faf5 	bl	8000168 <__aeabi_dsub>
 800ab7e:	a394      	add	r3, pc, #592	@ (adr r3, 800add0 <__ieee754_rem_pio2+0x2f8>)
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	e7dc      	b.n	800ab40 <__ieee754_rem_pio2+0x68>
 800ab86:	f7f5 faf1 	bl	800016c <__adddf3>
 800ab8a:	45a8      	cmp	r8, r5
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	460f      	mov	r7, r1
 800ab90:	d018      	beq.n	800abc4 <__ieee754_rem_pio2+0xec>
 800ab92:	a38b      	add	r3, pc, #556	@ (adr r3, 800adc0 <__ieee754_rem_pio2+0x2e8>)
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f7f5 fae8 	bl	800016c <__adddf3>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	4680      	mov	r8, r0
 800aba2:	4689      	mov	r9, r1
 800aba4:	4630      	mov	r0, r6
 800aba6:	4639      	mov	r1, r7
 800aba8:	f7f5 fade 	bl	8000168 <__aeabi_dsub>
 800abac:	a384      	add	r3, pc, #528	@ (adr r3, 800adc0 <__ieee754_rem_pio2+0x2e8>)
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f7f5 fadb 	bl	800016c <__adddf3>
 800abb6:	f04f 35ff 	mov.w	r5, #4294967295
 800abba:	e9c4 8900 	strd	r8, r9, [r4]
 800abbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800abc2:	e7c4      	b.n	800ab4e <__ieee754_rem_pio2+0x76>
 800abc4:	a380      	add	r3, pc, #512	@ (adr r3, 800adc8 <__ieee754_rem_pio2+0x2f0>)
 800abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abca:	f7f5 facf 	bl	800016c <__adddf3>
 800abce:	a380      	add	r3, pc, #512	@ (adr r3, 800add0 <__ieee754_rem_pio2+0x2f8>)
 800abd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd4:	4606      	mov	r6, r0
 800abd6:	460f      	mov	r7, r1
 800abd8:	f7f5 fac8 	bl	800016c <__adddf3>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	4680      	mov	r8, r0
 800abe2:	4689      	mov	r9, r1
 800abe4:	4630      	mov	r0, r6
 800abe6:	4639      	mov	r1, r7
 800abe8:	f7f5 fabe 	bl	8000168 <__aeabi_dsub>
 800abec:	a378      	add	r3, pc, #480	@ (adr r3, 800add0 <__ieee754_rem_pio2+0x2f8>)
 800abee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf2:	e7de      	b.n	800abb2 <__ieee754_rem_pio2+0xda>
 800abf4:	4b81      	ldr	r3, [pc, #516]	@ (800adfc <__ieee754_rem_pio2+0x324>)
 800abf6:	4598      	cmp	r8, r3
 800abf8:	f200 80cf 	bhi.w	800ad9a <__ieee754_rem_pio2+0x2c2>
 800abfc:	f000 f962 	bl	800aec4 <fabs>
 800ac00:	a375      	add	r3, pc, #468	@ (adr r3, 800add8 <__ieee754_rem_pio2+0x300>)
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	4606      	mov	r6, r0
 800ac08:	460f      	mov	r7, r1
 800ac0a:	f7f5 fc65 	bl	80004d8 <__aeabi_dmul>
 800ac0e:	2200      	movs	r2, #0
 800ac10:	4b7b      	ldr	r3, [pc, #492]	@ (800ae00 <__ieee754_rem_pio2+0x328>)
 800ac12:	f7f5 faab 	bl	800016c <__adddf3>
 800ac16:	f7f5 ff0f 	bl	8000a38 <__aeabi_d2iz>
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	f7f5 fbf2 	bl	8000404 <__aeabi_i2d>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac28:	a363      	add	r3, pc, #396	@ (adr r3, 800adb8 <__ieee754_rem_pio2+0x2e0>)
 800ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2e:	f7f5 fc53 	bl	80004d8 <__aeabi_dmul>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	4630      	mov	r0, r6
 800ac38:	4639      	mov	r1, r7
 800ac3a:	f7f5 fa95 	bl	8000168 <__aeabi_dsub>
 800ac3e:	a360      	add	r3, pc, #384	@ (adr r3, 800adc0 <__ieee754_rem_pio2+0x2e8>)
 800ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac44:	4682      	mov	sl, r0
 800ac46:	468b      	mov	fp, r1
 800ac48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac4c:	f7f5 fc44 	bl	80004d8 <__aeabi_dmul>
 800ac50:	2d1f      	cmp	r5, #31
 800ac52:	4606      	mov	r6, r0
 800ac54:	460f      	mov	r7, r1
 800ac56:	dc0c      	bgt.n	800ac72 <__ieee754_rem_pio2+0x19a>
 800ac58:	4b6a      	ldr	r3, [pc, #424]	@ (800ae04 <__ieee754_rem_pio2+0x32c>)
 800ac5a:	1e6a      	subs	r2, r5, #1
 800ac5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac60:	4543      	cmp	r3, r8
 800ac62:	d006      	beq.n	800ac72 <__ieee754_rem_pio2+0x19a>
 800ac64:	4632      	mov	r2, r6
 800ac66:	463b      	mov	r3, r7
 800ac68:	4650      	mov	r0, sl
 800ac6a:	4659      	mov	r1, fp
 800ac6c:	f7f5 fa7c 	bl	8000168 <__aeabi_dsub>
 800ac70:	e00e      	b.n	800ac90 <__ieee754_rem_pio2+0x1b8>
 800ac72:	463b      	mov	r3, r7
 800ac74:	4632      	mov	r2, r6
 800ac76:	4650      	mov	r0, sl
 800ac78:	4659      	mov	r1, fp
 800ac7a:	f7f5 fa75 	bl	8000168 <__aeabi_dsub>
 800ac7e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ac82:	9305      	str	r3, [sp, #20]
 800ac84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ac88:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ac8c:	2b10      	cmp	r3, #16
 800ac8e:	dc02      	bgt.n	800ac96 <__ieee754_rem_pio2+0x1be>
 800ac90:	e9c4 0100 	strd	r0, r1, [r4]
 800ac94:	e039      	b.n	800ad0a <__ieee754_rem_pio2+0x232>
 800ac96:	a34c      	add	r3, pc, #304	@ (adr r3, 800adc8 <__ieee754_rem_pio2+0x2f0>)
 800ac98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aca0:	f7f5 fc1a 	bl	80004d8 <__aeabi_dmul>
 800aca4:	4606      	mov	r6, r0
 800aca6:	460f      	mov	r7, r1
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	4650      	mov	r0, sl
 800acae:	4659      	mov	r1, fp
 800acb0:	f7f5 fa5a 	bl	8000168 <__aeabi_dsub>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	4680      	mov	r8, r0
 800acba:	4689      	mov	r9, r1
 800acbc:	4650      	mov	r0, sl
 800acbe:	4659      	mov	r1, fp
 800acc0:	f7f5 fa52 	bl	8000168 <__aeabi_dsub>
 800acc4:	4632      	mov	r2, r6
 800acc6:	463b      	mov	r3, r7
 800acc8:	f7f5 fa4e 	bl	8000168 <__aeabi_dsub>
 800accc:	a340      	add	r3, pc, #256	@ (adr r3, 800add0 <__ieee754_rem_pio2+0x2f8>)
 800acce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd2:	4606      	mov	r6, r0
 800acd4:	460f      	mov	r7, r1
 800acd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acda:	f7f5 fbfd 	bl	80004d8 <__aeabi_dmul>
 800acde:	4632      	mov	r2, r6
 800ace0:	463b      	mov	r3, r7
 800ace2:	f7f5 fa41 	bl	8000168 <__aeabi_dsub>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	4606      	mov	r6, r0
 800acec:	460f      	mov	r7, r1
 800acee:	4640      	mov	r0, r8
 800acf0:	4649      	mov	r1, r9
 800acf2:	f7f5 fa39 	bl	8000168 <__aeabi_dsub>
 800acf6:	9a05      	ldr	r2, [sp, #20]
 800acf8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800acfc:	1ad3      	subs	r3, r2, r3
 800acfe:	2b31      	cmp	r3, #49	@ 0x31
 800ad00:	dc20      	bgt.n	800ad44 <__ieee754_rem_pio2+0x26c>
 800ad02:	46c2      	mov	sl, r8
 800ad04:	46cb      	mov	fp, r9
 800ad06:	e9c4 0100 	strd	r0, r1, [r4]
 800ad0a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ad0e:	4650      	mov	r0, sl
 800ad10:	4642      	mov	r2, r8
 800ad12:	464b      	mov	r3, r9
 800ad14:	4659      	mov	r1, fp
 800ad16:	f7f5 fa27 	bl	8000168 <__aeabi_dsub>
 800ad1a:	463b      	mov	r3, r7
 800ad1c:	4632      	mov	r2, r6
 800ad1e:	f7f5 fa23 	bl	8000168 <__aeabi_dsub>
 800ad22:	9b04      	ldr	r3, [sp, #16]
 800ad24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f6bf af10 	bge.w	800ab4e <__ieee754_rem_pio2+0x76>
 800ad2e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ad32:	6063      	str	r3, [r4, #4]
 800ad34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad38:	f8c4 8000 	str.w	r8, [r4]
 800ad3c:	60a0      	str	r0, [r4, #8]
 800ad3e:	60e3      	str	r3, [r4, #12]
 800ad40:	426d      	negs	r5, r5
 800ad42:	e704      	b.n	800ab4e <__ieee754_rem_pio2+0x76>
 800ad44:	a326      	add	r3, pc, #152	@ (adr r3, 800ade0 <__ieee754_rem_pio2+0x308>)
 800ad46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad4e:	f7f5 fbc3 	bl	80004d8 <__aeabi_dmul>
 800ad52:	4606      	mov	r6, r0
 800ad54:	460f      	mov	r7, r1
 800ad56:	4602      	mov	r2, r0
 800ad58:	460b      	mov	r3, r1
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	4649      	mov	r1, r9
 800ad5e:	f7f5 fa03 	bl	8000168 <__aeabi_dsub>
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	4682      	mov	sl, r0
 800ad68:	468b      	mov	fp, r1
 800ad6a:	4640      	mov	r0, r8
 800ad6c:	4649      	mov	r1, r9
 800ad6e:	f7f5 f9fb 	bl	8000168 <__aeabi_dsub>
 800ad72:	4632      	mov	r2, r6
 800ad74:	463b      	mov	r3, r7
 800ad76:	f7f5 f9f7 	bl	8000168 <__aeabi_dsub>
 800ad7a:	a31b      	add	r3, pc, #108	@ (adr r3, 800ade8 <__ieee754_rem_pio2+0x310>)
 800ad7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad80:	4606      	mov	r6, r0
 800ad82:	460f      	mov	r7, r1
 800ad84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad88:	f7f5 fba6 	bl	80004d8 <__aeabi_dmul>
 800ad8c:	4632      	mov	r2, r6
 800ad8e:	463b      	mov	r3, r7
 800ad90:	f7f5 f9ea 	bl	8000168 <__aeabi_dsub>
 800ad94:	4606      	mov	r6, r0
 800ad96:	460f      	mov	r7, r1
 800ad98:	e764      	b.n	800ac64 <__ieee754_rem_pio2+0x18c>
 800ad9a:	4b1b      	ldr	r3, [pc, #108]	@ (800ae08 <__ieee754_rem_pio2+0x330>)
 800ad9c:	4598      	cmp	r8, r3
 800ad9e:	d935      	bls.n	800ae0c <__ieee754_rem_pio2+0x334>
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	f7f5 f9e0 	bl	8000168 <__aeabi_dsub>
 800ada8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800adac:	e9c4 0100 	strd	r0, r1, [r4]
 800adb0:	e6a4      	b.n	800aafc <__ieee754_rem_pio2+0x24>
 800adb2:	bf00      	nop
 800adb4:	f3af 8000 	nop.w
 800adb8:	54400000 	.word	0x54400000
 800adbc:	3ff921fb 	.word	0x3ff921fb
 800adc0:	1a626331 	.word	0x1a626331
 800adc4:	3dd0b461 	.word	0x3dd0b461
 800adc8:	1a600000 	.word	0x1a600000
 800adcc:	3dd0b461 	.word	0x3dd0b461
 800add0:	2e037073 	.word	0x2e037073
 800add4:	3ba3198a 	.word	0x3ba3198a
 800add8:	6dc9c883 	.word	0x6dc9c883
 800addc:	3fe45f30 	.word	0x3fe45f30
 800ade0:	2e000000 	.word	0x2e000000
 800ade4:	3ba3198a 	.word	0x3ba3198a
 800ade8:	252049c1 	.word	0x252049c1
 800adec:	397b839a 	.word	0x397b839a
 800adf0:	3fe921fb 	.word	0x3fe921fb
 800adf4:	4002d97b 	.word	0x4002d97b
 800adf8:	3ff921fb 	.word	0x3ff921fb
 800adfc:	413921fb 	.word	0x413921fb
 800ae00:	3fe00000 	.word	0x3fe00000
 800ae04:	0800bb78 	.word	0x0800bb78
 800ae08:	7fefffff 	.word	0x7fefffff
 800ae0c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ae10:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ae14:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ae18:	460f      	mov	r7, r1
 800ae1a:	f7f5 fe0d 	bl	8000a38 <__aeabi_d2iz>
 800ae1e:	f7f5 faf1 	bl	8000404 <__aeabi_i2d>
 800ae22:	4602      	mov	r2, r0
 800ae24:	460b      	mov	r3, r1
 800ae26:	4630      	mov	r0, r6
 800ae28:	4639      	mov	r1, r7
 800ae2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ae2e:	f7f5 f99b 	bl	8000168 <__aeabi_dsub>
 800ae32:	2200      	movs	r2, #0
 800ae34:	4b21      	ldr	r3, [pc, #132]	@ (800aebc <__ieee754_rem_pio2+0x3e4>)
 800ae36:	f7f5 fb4f 	bl	80004d8 <__aeabi_dmul>
 800ae3a:	460f      	mov	r7, r1
 800ae3c:	4606      	mov	r6, r0
 800ae3e:	f7f5 fdfb 	bl	8000a38 <__aeabi_d2iz>
 800ae42:	f7f5 fadf 	bl	8000404 <__aeabi_i2d>
 800ae46:	4602      	mov	r2, r0
 800ae48:	460b      	mov	r3, r1
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	4639      	mov	r1, r7
 800ae4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ae52:	f7f5 f989 	bl	8000168 <__aeabi_dsub>
 800ae56:	2200      	movs	r2, #0
 800ae58:	4b18      	ldr	r3, [pc, #96]	@ (800aebc <__ieee754_rem_pio2+0x3e4>)
 800ae5a:	f7f5 fb3d 	bl	80004d8 <__aeabi_dmul>
 800ae5e:	f04f 0803 	mov.w	r8, #3
 800ae62:	2600      	movs	r6, #0
 800ae64:	2700      	movs	r7, #0
 800ae66:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ae6a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ae6e:	4632      	mov	r2, r6
 800ae70:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ae74:	463b      	mov	r3, r7
 800ae76:	46c2      	mov	sl, r8
 800ae78:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae7c:	f7f5 fd94 	bl	80009a8 <__aeabi_dcmpeq>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d1f4      	bne.n	800ae6e <__ieee754_rem_pio2+0x396>
 800ae84:	4b0e      	ldr	r3, [pc, #56]	@ (800aec0 <__ieee754_rem_pio2+0x3e8>)
 800ae86:	462a      	mov	r2, r5
 800ae88:	9301      	str	r3, [sp, #4]
 800ae8a:	2302      	movs	r3, #2
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	a806      	add	r0, sp, #24
 800ae92:	4653      	mov	r3, sl
 800ae94:	f000 f81a 	bl	800aecc <__kernel_rem_pio2>
 800ae98:	9b04      	ldr	r3, [sp, #16]
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f6bf ae56 	bge.w	800ab4e <__ieee754_rem_pio2+0x76>
 800aea2:	e9d4 2100 	ldrd	r2, r1, [r4]
 800aea6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aeaa:	e9c4 2300 	strd	r2, r3, [r4]
 800aeae:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800aeb2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aeb6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800aeba:	e741      	b.n	800ad40 <__ieee754_rem_pio2+0x268>
 800aebc:	41700000 	.word	0x41700000
 800aec0:	0800bbf8 	.word	0x0800bbf8

0800aec4 <fabs>:
 800aec4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aec8:	4619      	mov	r1, r3
 800aeca:	4770      	bx	lr

0800aecc <__kernel_rem_pio2>:
 800aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800aed4:	9308      	str	r3, [sp, #32]
 800aed6:	9104      	str	r1, [sp, #16]
 800aed8:	4bb6      	ldr	r3, [pc, #728]	@ (800b1b4 <__kernel_rem_pio2+0x2e8>)
 800aeda:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800aedc:	f112 0f14 	cmn.w	r2, #20
 800aee0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aee4:	bfa8      	it	ge
 800aee6:	1ed4      	subge	r4, r2, #3
 800aee8:	9302      	str	r3, [sp, #8]
 800aeea:	9b08      	ldr	r3, [sp, #32]
 800aeec:	bfb8      	it	lt
 800aeee:	2400      	movlt	r4, #0
 800aef0:	f103 33ff 	add.w	r3, r3, #4294967295
 800aef4:	9306      	str	r3, [sp, #24]
 800aef6:	bfa4      	itt	ge
 800aef8:	2318      	movge	r3, #24
 800aefa:	fb94 f4f3 	sdivge	r4, r4, r3
 800aefe:	f06f 0317 	mvn.w	r3, #23
 800af02:	fb04 3303 	mla	r3, r4, r3, r3
 800af06:	eb03 0a02 	add.w	sl, r3, r2
 800af0a:	9a06      	ldr	r2, [sp, #24]
 800af0c:	9b02      	ldr	r3, [sp, #8]
 800af0e:	1aa7      	subs	r7, r4, r2
 800af10:	eb03 0802 	add.w	r8, r3, r2
 800af14:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800af16:	2500      	movs	r5, #0
 800af18:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800af1c:	2200      	movs	r2, #0
 800af1e:	2300      	movs	r3, #0
 800af20:	9009      	str	r0, [sp, #36]	@ 0x24
 800af22:	ae20      	add	r6, sp, #128	@ 0x80
 800af24:	4545      	cmp	r5, r8
 800af26:	dd14      	ble.n	800af52 <__kernel_rem_pio2+0x86>
 800af28:	f04f 0800 	mov.w	r8, #0
 800af2c:	9a08      	ldr	r2, [sp, #32]
 800af2e:	ab20      	add	r3, sp, #128	@ 0x80
 800af30:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800af34:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800af38:	9b02      	ldr	r3, [sp, #8]
 800af3a:	4598      	cmp	r8, r3
 800af3c:	dc35      	bgt.n	800afaa <__kernel_rem_pio2+0xde>
 800af3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af40:	2200      	movs	r2, #0
 800af42:	f1a3 0908 	sub.w	r9, r3, #8
 800af46:	2300      	movs	r3, #0
 800af48:	462f      	mov	r7, r5
 800af4a:	2600      	movs	r6, #0
 800af4c:	e9cd 2300 	strd	r2, r3, [sp]
 800af50:	e01f      	b.n	800af92 <__kernel_rem_pio2+0xc6>
 800af52:	42ef      	cmn	r7, r5
 800af54:	d40b      	bmi.n	800af6e <__kernel_rem_pio2+0xa2>
 800af56:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800af5a:	e9cd 2300 	strd	r2, r3, [sp]
 800af5e:	f7f5 fa51 	bl	8000404 <__aeabi_i2d>
 800af62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af66:	e8e6 0102 	strd	r0, r1, [r6], #8
 800af6a:	3501      	adds	r5, #1
 800af6c:	e7da      	b.n	800af24 <__kernel_rem_pio2+0x58>
 800af6e:	4610      	mov	r0, r2
 800af70:	4619      	mov	r1, r3
 800af72:	e7f8      	b.n	800af66 <__kernel_rem_pio2+0x9a>
 800af74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af78:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800af7c:	f7f5 faac 	bl	80004d8 <__aeabi_dmul>
 800af80:	4602      	mov	r2, r0
 800af82:	460b      	mov	r3, r1
 800af84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af88:	f7f5 f8f0 	bl	800016c <__adddf3>
 800af8c:	e9cd 0100 	strd	r0, r1, [sp]
 800af90:	3601      	adds	r6, #1
 800af92:	9b06      	ldr	r3, [sp, #24]
 800af94:	3f08      	subs	r7, #8
 800af96:	429e      	cmp	r6, r3
 800af98:	ddec      	ble.n	800af74 <__kernel_rem_pio2+0xa8>
 800af9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af9e:	f108 0801 	add.w	r8, r8, #1
 800afa2:	e8eb 2302 	strd	r2, r3, [fp], #8
 800afa6:	3508      	adds	r5, #8
 800afa8:	e7c6      	b.n	800af38 <__kernel_rem_pio2+0x6c>
 800afaa:	9b02      	ldr	r3, [sp, #8]
 800afac:	aa0c      	add	r2, sp, #48	@ 0x30
 800afae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800afb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afb4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800afb6:	f8dd b008 	ldr.w	fp, [sp, #8]
 800afba:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800afbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800afc0:	ab98      	add	r3, sp, #608	@ 0x260
 800afc2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800afc6:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800afca:	ab70      	add	r3, sp, #448	@ 0x1c0
 800afcc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800afd0:	ae0c      	add	r6, sp, #48	@ 0x30
 800afd2:	4698      	mov	r8, r3
 800afd4:	46b1      	mov	r9, r6
 800afd6:	465f      	mov	r7, fp
 800afd8:	9307      	str	r3, [sp, #28]
 800afda:	2f00      	cmp	r7, #0
 800afdc:	f1a8 0808 	sub.w	r8, r8, #8
 800afe0:	dc71      	bgt.n	800b0c6 <__kernel_rem_pio2+0x1fa>
 800afe2:	4652      	mov	r2, sl
 800afe4:	4620      	mov	r0, r4
 800afe6:	4629      	mov	r1, r5
 800afe8:	f000 fa96 	bl	800b518 <scalbn>
 800afec:	2200      	movs	r2, #0
 800afee:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800aff2:	4604      	mov	r4, r0
 800aff4:	460d      	mov	r5, r1
 800aff6:	f7f5 fa6f 	bl	80004d8 <__aeabi_dmul>
 800affa:	f000 fb05 	bl	800b608 <floor>
 800affe:	2200      	movs	r2, #0
 800b000:	4b6d      	ldr	r3, [pc, #436]	@ (800b1b8 <__kernel_rem_pio2+0x2ec>)
 800b002:	f7f5 fa69 	bl	80004d8 <__aeabi_dmul>
 800b006:	4602      	mov	r2, r0
 800b008:	460b      	mov	r3, r1
 800b00a:	4620      	mov	r0, r4
 800b00c:	4629      	mov	r1, r5
 800b00e:	f7f5 f8ab 	bl	8000168 <__aeabi_dsub>
 800b012:	460d      	mov	r5, r1
 800b014:	4604      	mov	r4, r0
 800b016:	f7f5 fd0f 	bl	8000a38 <__aeabi_d2iz>
 800b01a:	9005      	str	r0, [sp, #20]
 800b01c:	f7f5 f9f2 	bl	8000404 <__aeabi_i2d>
 800b020:	4602      	mov	r2, r0
 800b022:	460b      	mov	r3, r1
 800b024:	4620      	mov	r0, r4
 800b026:	4629      	mov	r1, r5
 800b028:	f7f5 f89e 	bl	8000168 <__aeabi_dsub>
 800b02c:	f1ba 0f00 	cmp.w	sl, #0
 800b030:	4680      	mov	r8, r0
 800b032:	4689      	mov	r9, r1
 800b034:	dd6d      	ble.n	800b112 <__kernel_rem_pio2+0x246>
 800b036:	f10b 31ff 	add.w	r1, fp, #4294967295
 800b03a:	ab0c      	add	r3, sp, #48	@ 0x30
 800b03c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b040:	9c05      	ldr	r4, [sp, #20]
 800b042:	f1ca 0018 	rsb	r0, sl, #24
 800b046:	fa43 f200 	asr.w	r2, r3, r0
 800b04a:	4414      	add	r4, r2
 800b04c:	4082      	lsls	r2, r0
 800b04e:	1a9b      	subs	r3, r3, r2
 800b050:	aa0c      	add	r2, sp, #48	@ 0x30
 800b052:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b056:	f1ca 0217 	rsb	r2, sl, #23
 800b05a:	9405      	str	r4, [sp, #20]
 800b05c:	4113      	asrs	r3, r2
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	9b00      	ldr	r3, [sp, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	dd64      	ble.n	800b130 <__kernel_rem_pio2+0x264>
 800b066:	2200      	movs	r2, #0
 800b068:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b06c:	4614      	mov	r4, r2
 800b06e:	9b05      	ldr	r3, [sp, #20]
 800b070:	3301      	adds	r3, #1
 800b072:	9305      	str	r3, [sp, #20]
 800b074:	4593      	cmp	fp, r2
 800b076:	f300 80ab 	bgt.w	800b1d0 <__kernel_rem_pio2+0x304>
 800b07a:	f1ba 0f00 	cmp.w	sl, #0
 800b07e:	dd07      	ble.n	800b090 <__kernel_rem_pio2+0x1c4>
 800b080:	f1ba 0f01 	cmp.w	sl, #1
 800b084:	f000 80b2 	beq.w	800b1ec <__kernel_rem_pio2+0x320>
 800b088:	f1ba 0f02 	cmp.w	sl, #2
 800b08c:	f000 80b9 	beq.w	800b202 <__kernel_rem_pio2+0x336>
 800b090:	9b00      	ldr	r3, [sp, #0]
 800b092:	2b02      	cmp	r3, #2
 800b094:	d14c      	bne.n	800b130 <__kernel_rem_pio2+0x264>
 800b096:	4642      	mov	r2, r8
 800b098:	464b      	mov	r3, r9
 800b09a:	2000      	movs	r0, #0
 800b09c:	4947      	ldr	r1, [pc, #284]	@ (800b1bc <__kernel_rem_pio2+0x2f0>)
 800b09e:	f7f5 f863 	bl	8000168 <__aeabi_dsub>
 800b0a2:	4680      	mov	r8, r0
 800b0a4:	4689      	mov	r9, r1
 800b0a6:	2c00      	cmp	r4, #0
 800b0a8:	d042      	beq.n	800b130 <__kernel_rem_pio2+0x264>
 800b0aa:	4652      	mov	r2, sl
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	4943      	ldr	r1, [pc, #268]	@ (800b1bc <__kernel_rem_pio2+0x2f0>)
 800b0b0:	f000 fa32 	bl	800b518 <scalbn>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4640      	mov	r0, r8
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	f7f5 f854 	bl	8000168 <__aeabi_dsub>
 800b0c0:	4680      	mov	r8, r0
 800b0c2:	4689      	mov	r9, r1
 800b0c4:	e034      	b.n	800b130 <__kernel_rem_pio2+0x264>
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	4b3d      	ldr	r3, [pc, #244]	@ (800b1c0 <__kernel_rem_pio2+0x2f4>)
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	f7f5 fa03 	bl	80004d8 <__aeabi_dmul>
 800b0d2:	f7f5 fcb1 	bl	8000a38 <__aeabi_d2iz>
 800b0d6:	f7f5 f995 	bl	8000404 <__aeabi_i2d>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	460b      	mov	r3, r1
 800b0de:	e9cd 2300 	strd	r2, r3, [sp]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	4b37      	ldr	r3, [pc, #220]	@ (800b1c4 <__kernel_rem_pio2+0x2f8>)
 800b0e6:	f7f5 f9f7 	bl	80004d8 <__aeabi_dmul>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	4629      	mov	r1, r5
 800b0f2:	f7f5 f839 	bl	8000168 <__aeabi_dsub>
 800b0f6:	f7f5 fc9f 	bl	8000a38 <__aeabi_d2iz>
 800b0fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b0fe:	f849 0b04 	str.w	r0, [r9], #4
 800b102:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b106:	f7f5 f831 	bl	800016c <__adddf3>
 800b10a:	3f01      	subs	r7, #1
 800b10c:	4604      	mov	r4, r0
 800b10e:	460d      	mov	r5, r1
 800b110:	e763      	b.n	800afda <__kernel_rem_pio2+0x10e>
 800b112:	d106      	bne.n	800b122 <__kernel_rem_pio2+0x256>
 800b114:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b118:	aa0c      	add	r2, sp, #48	@ 0x30
 800b11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b11e:	15db      	asrs	r3, r3, #23
 800b120:	e79d      	b.n	800b05e <__kernel_rem_pio2+0x192>
 800b122:	2200      	movs	r2, #0
 800b124:	4b28      	ldr	r3, [pc, #160]	@ (800b1c8 <__kernel_rem_pio2+0x2fc>)
 800b126:	f7f5 fc5d 	bl	80009e4 <__aeabi_dcmpge>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	d13f      	bne.n	800b1ae <__kernel_rem_pio2+0x2e2>
 800b12e:	9000      	str	r0, [sp, #0]
 800b130:	2200      	movs	r2, #0
 800b132:	2300      	movs	r3, #0
 800b134:	4640      	mov	r0, r8
 800b136:	4649      	mov	r1, r9
 800b138:	f7f5 fc36 	bl	80009a8 <__aeabi_dcmpeq>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	f000 80af 	beq.w	800b2a0 <__kernel_rem_pio2+0x3d4>
 800b142:	2200      	movs	r2, #0
 800b144:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b148:	9902      	ldr	r1, [sp, #8]
 800b14a:	428b      	cmp	r3, r1
 800b14c:	da61      	bge.n	800b212 <__kernel_rem_pio2+0x346>
 800b14e:	2a00      	cmp	r2, #0
 800b150:	d076      	beq.n	800b240 <__kernel_rem_pio2+0x374>
 800b152:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b156:	ab0c      	add	r3, sp, #48	@ 0x30
 800b158:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b15c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0f6      	beq.n	800b152 <__kernel_rem_pio2+0x286>
 800b164:	4652      	mov	r2, sl
 800b166:	2000      	movs	r0, #0
 800b168:	4914      	ldr	r1, [pc, #80]	@ (800b1bc <__kernel_rem_pio2+0x2f0>)
 800b16a:	f000 f9d5 	bl	800b518 <scalbn>
 800b16e:	465d      	mov	r5, fp
 800b170:	4606      	mov	r6, r0
 800b172:	460f      	mov	r7, r1
 800b174:	f04f 0900 	mov.w	r9, #0
 800b178:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b17a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 800b1c0 <__kernel_rem_pio2+0x2f4>
 800b17e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800b182:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800b186:	2d00      	cmp	r5, #0
 800b188:	f280 80c0 	bge.w	800b30c <__kernel_rem_pio2+0x440>
 800b18c:	465d      	mov	r5, fp
 800b18e:	2d00      	cmp	r5, #0
 800b190:	f2c0 80f0 	blt.w	800b374 <__kernel_rem_pio2+0x4a8>
 800b194:	4b0d      	ldr	r3, [pc, #52]	@ (800b1cc <__kernel_rem_pio2+0x300>)
 800b196:	f04f 0900 	mov.w	r9, #0
 800b19a:	9306      	str	r3, [sp, #24]
 800b19c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b19e:	f04f 0a00 	mov.w	sl, #0
 800b1a2:	2700      	movs	r7, #0
 800b1a4:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800b1a8:	ebab 0605 	sub.w	r6, fp, r5
 800b1ac:	e0d6      	b.n	800b35c <__kernel_rem_pio2+0x490>
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	e758      	b.n	800b066 <__kernel_rem_pio2+0x19a>
 800b1b4:	0800bd40 	.word	0x0800bd40
 800b1b8:	40200000 	.word	0x40200000
 800b1bc:	3ff00000 	.word	0x3ff00000
 800b1c0:	3e700000 	.word	0x3e700000
 800b1c4:	41700000 	.word	0x41700000
 800b1c8:	3fe00000 	.word	0x3fe00000
 800b1cc:	0800bd00 	.word	0x0800bd00
 800b1d0:	f856 3b04 	ldr.w	r3, [r6], #4
 800b1d4:	b944      	cbnz	r4, 800b1e8 <__kernel_rem_pio2+0x31c>
 800b1d6:	b123      	cbz	r3, 800b1e2 <__kernel_rem_pio2+0x316>
 800b1d8:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b1dc:	f846 3c04 	str.w	r3, [r6, #-4]
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	461c      	mov	r4, r3
 800b1e4:	3201      	adds	r2, #1
 800b1e6:	e745      	b.n	800b074 <__kernel_rem_pio2+0x1a8>
 800b1e8:	1acb      	subs	r3, r1, r3
 800b1ea:	e7f7      	b.n	800b1dc <__kernel_rem_pio2+0x310>
 800b1ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b1f0:	ab0c      	add	r3, sp, #48	@ 0x30
 800b1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b1fa:	a90c      	add	r1, sp, #48	@ 0x30
 800b1fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b200:	e746      	b.n	800b090 <__kernel_rem_pio2+0x1c4>
 800b202:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b206:	ab0c      	add	r3, sp, #48	@ 0x30
 800b208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b20c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b210:	e7f3      	b.n	800b1fa <__kernel_rem_pio2+0x32e>
 800b212:	a90c      	add	r1, sp, #48	@ 0x30
 800b214:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b218:	3b01      	subs	r3, #1
 800b21a:	430a      	orrs	r2, r1
 800b21c:	e794      	b.n	800b148 <__kernel_rem_pio2+0x27c>
 800b21e:	3401      	adds	r4, #1
 800b220:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b224:	2a00      	cmp	r2, #0
 800b226:	d0fa      	beq.n	800b21e <__kernel_rem_pio2+0x352>
 800b228:	9b08      	ldr	r3, [sp, #32]
 800b22a:	aa20      	add	r2, sp, #128	@ 0x80
 800b22c:	445b      	add	r3, fp
 800b22e:	f10b 0801 	add.w	r8, fp, #1
 800b232:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b236:	445c      	add	r4, fp
 800b238:	4544      	cmp	r4, r8
 800b23a:	da04      	bge.n	800b246 <__kernel_rem_pio2+0x37a>
 800b23c:	46a3      	mov	fp, r4
 800b23e:	e6bf      	b.n	800afc0 <__kernel_rem_pio2+0xf4>
 800b240:	2401      	movs	r4, #1
 800b242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b244:	e7ec      	b.n	800b220 <__kernel_rem_pio2+0x354>
 800b246:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b248:	46ab      	mov	fp, r5
 800b24a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b24e:	f7f5 f8d9 	bl	8000404 <__aeabi_i2d>
 800b252:	f04f 0900 	mov.w	r9, #0
 800b256:	2600      	movs	r6, #0
 800b258:	2700      	movs	r7, #0
 800b25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b25c:	e9c5 0100 	strd	r0, r1, [r5]
 800b260:	3b08      	subs	r3, #8
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	9b06      	ldr	r3, [sp, #24]
 800b266:	4599      	cmp	r9, r3
 800b268:	dd07      	ble.n	800b27a <__kernel_rem_pio2+0x3ae>
 800b26a:	9b07      	ldr	r3, [sp, #28]
 800b26c:	f108 0801 	add.w	r8, r8, #1
 800b270:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800b274:	3508      	adds	r5, #8
 800b276:	9307      	str	r3, [sp, #28]
 800b278:	e7de      	b.n	800b238 <__kernel_rem_pio2+0x36c>
 800b27a:	9900      	ldr	r1, [sp, #0]
 800b27c:	f109 0901 	add.w	r9, r9, #1
 800b280:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800b284:	9100      	str	r1, [sp, #0]
 800b286:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800b28a:	f7f5 f925 	bl	80004d8 <__aeabi_dmul>
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	4630      	mov	r0, r6
 800b294:	4639      	mov	r1, r7
 800b296:	f7f4 ff69 	bl	800016c <__adddf3>
 800b29a:	4606      	mov	r6, r0
 800b29c:	460f      	mov	r7, r1
 800b29e:	e7e1      	b.n	800b264 <__kernel_rem_pio2+0x398>
 800b2a0:	f1ca 0200 	rsb	r2, sl, #0
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	4649      	mov	r1, r9
 800b2a8:	f000 f936 	bl	800b518 <scalbn>
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	4b97      	ldr	r3, [pc, #604]	@ (800b50c <__kernel_rem_pio2+0x640>)
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	460d      	mov	r5, r1
 800b2b4:	f7f5 fb96 	bl	80009e4 <__aeabi_dcmpge>
 800b2b8:	b300      	cbz	r0, 800b2fc <__kernel_rem_pio2+0x430>
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	4b94      	ldr	r3, [pc, #592]	@ (800b510 <__kernel_rem_pio2+0x644>)
 800b2be:	4620      	mov	r0, r4
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	f7f5 f909 	bl	80004d8 <__aeabi_dmul>
 800b2c6:	f7f5 fbb7 	bl	8000a38 <__aeabi_d2iz>
 800b2ca:	4606      	mov	r6, r0
 800b2cc:	f7f5 f89a 	bl	8000404 <__aeabi_i2d>
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	4b8e      	ldr	r3, [pc, #568]	@ (800b50c <__kernel_rem_pio2+0x640>)
 800b2d4:	f7f5 f900 	bl	80004d8 <__aeabi_dmul>
 800b2d8:	460b      	mov	r3, r1
 800b2da:	4602      	mov	r2, r0
 800b2dc:	4629      	mov	r1, r5
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f7f4 ff42 	bl	8000168 <__aeabi_dsub>
 800b2e4:	f7f5 fba8 	bl	8000a38 <__aeabi_d2iz>
 800b2e8:	ab0c      	add	r3, sp, #48	@ 0x30
 800b2ea:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800b2ee:	f10b 0b01 	add.w	fp, fp, #1
 800b2f2:	f10a 0a18 	add.w	sl, sl, #24
 800b2f6:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800b2fa:	e733      	b.n	800b164 <__kernel_rem_pio2+0x298>
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	4629      	mov	r1, r5
 800b300:	f7f5 fb9a 	bl	8000a38 <__aeabi_d2iz>
 800b304:	ab0c      	add	r3, sp, #48	@ 0x30
 800b306:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800b30a:	e72b      	b.n	800b164 <__kernel_rem_pio2+0x298>
 800b30c:	ab0c      	add	r3, sp, #48	@ 0x30
 800b30e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b312:	f7f5 f877 	bl	8000404 <__aeabi_i2d>
 800b316:	4632      	mov	r2, r6
 800b318:	463b      	mov	r3, r7
 800b31a:	f7f5 f8dd 	bl	80004d8 <__aeabi_dmul>
 800b31e:	464a      	mov	r2, r9
 800b320:	e868 0102 	strd	r0, r1, [r8], #-8
 800b324:	4653      	mov	r3, sl
 800b326:	4630      	mov	r0, r6
 800b328:	4639      	mov	r1, r7
 800b32a:	f7f5 f8d5 	bl	80004d8 <__aeabi_dmul>
 800b32e:	3d01      	subs	r5, #1
 800b330:	4606      	mov	r6, r0
 800b332:	460f      	mov	r7, r1
 800b334:	e727      	b.n	800b186 <__kernel_rem_pio2+0x2ba>
 800b336:	f8dd c018 	ldr.w	ip, [sp, #24]
 800b33a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800b33e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800b342:	f8cd c018 	str.w	ip, [sp, #24]
 800b346:	f7f5 f8c7 	bl	80004d8 <__aeabi_dmul>
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	4648      	mov	r0, r9
 800b350:	4651      	mov	r1, sl
 800b352:	f7f4 ff0b 	bl	800016c <__adddf3>
 800b356:	4681      	mov	r9, r0
 800b358:	468a      	mov	sl, r1
 800b35a:	3701      	adds	r7, #1
 800b35c:	9b02      	ldr	r3, [sp, #8]
 800b35e:	429f      	cmp	r7, r3
 800b360:	dc01      	bgt.n	800b366 <__kernel_rem_pio2+0x49a>
 800b362:	42be      	cmp	r6, r7
 800b364:	dae7      	bge.n	800b336 <__kernel_rem_pio2+0x46a>
 800b366:	ab48      	add	r3, sp, #288	@ 0x120
 800b368:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b36c:	e9c6 9a00 	strd	r9, sl, [r6]
 800b370:	3d01      	subs	r5, #1
 800b372:	e70c      	b.n	800b18e <__kernel_rem_pio2+0x2c2>
 800b374:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800b376:	2b02      	cmp	r3, #2
 800b378:	dc09      	bgt.n	800b38e <__kernel_rem_pio2+0x4c2>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	dc2c      	bgt.n	800b3d8 <__kernel_rem_pio2+0x50c>
 800b37e:	d04e      	beq.n	800b41e <__kernel_rem_pio2+0x552>
 800b380:	9b05      	ldr	r3, [sp, #20]
 800b382:	f003 0007 	and.w	r0, r3, #7
 800b386:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800b390:	2b03      	cmp	r3, #3
 800b392:	d1f5      	bne.n	800b380 <__kernel_rem_pio2+0x4b4>
 800b394:	ab48      	add	r3, sp, #288	@ 0x120
 800b396:	441c      	add	r4, r3
 800b398:	4625      	mov	r5, r4
 800b39a:	46da      	mov	sl, fp
 800b39c:	f1ba 0f00 	cmp.w	sl, #0
 800b3a0:	dc63      	bgt.n	800b46a <__kernel_rem_pio2+0x59e>
 800b3a2:	4625      	mov	r5, r4
 800b3a4:	46da      	mov	sl, fp
 800b3a6:	f1ba 0f01 	cmp.w	sl, #1
 800b3aa:	dc7b      	bgt.n	800b4a4 <__kernel_rem_pio2+0x5d8>
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	f1bb 0f01 	cmp.w	fp, #1
 800b3b4:	f300 8093 	bgt.w	800b4de <__kernel_rem_pio2+0x612>
 800b3b8:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b3bc:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b3c0:	9b00      	ldr	r3, [sp, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f040 8092 	bne.w	800b4ec <__kernel_rem_pio2+0x620>
 800b3c8:	9b04      	ldr	r3, [sp, #16]
 800b3ca:	e9c3 7800 	strd	r7, r8, [r3]
 800b3ce:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b3d2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b3d6:	e7d3      	b.n	800b380 <__kernel_rem_pio2+0x4b4>
 800b3d8:	465d      	mov	r5, fp
 800b3da:	2000      	movs	r0, #0
 800b3dc:	2100      	movs	r1, #0
 800b3de:	ab48      	add	r3, sp, #288	@ 0x120
 800b3e0:	441c      	add	r4, r3
 800b3e2:	2d00      	cmp	r5, #0
 800b3e4:	da32      	bge.n	800b44c <__kernel_rem_pio2+0x580>
 800b3e6:	9b00      	ldr	r3, [sp, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d035      	beq.n	800b458 <__kernel_rem_pio2+0x58c>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3f2:	9c04      	ldr	r4, [sp, #16]
 800b3f4:	2501      	movs	r5, #1
 800b3f6:	e9c4 2300 	strd	r2, r3, [r4]
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b402:	f7f4 feb1 	bl	8000168 <__aeabi_dsub>
 800b406:	ac48      	add	r4, sp, #288	@ 0x120
 800b408:	45ab      	cmp	fp, r5
 800b40a:	da28      	bge.n	800b45e <__kernel_rem_pio2+0x592>
 800b40c:	9b00      	ldr	r3, [sp, #0]
 800b40e:	b113      	cbz	r3, 800b416 <__kernel_rem_pio2+0x54a>
 800b410:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b414:	4619      	mov	r1, r3
 800b416:	9b04      	ldr	r3, [sp, #16]
 800b418:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b41c:	e7b0      	b.n	800b380 <__kernel_rem_pio2+0x4b4>
 800b41e:	2000      	movs	r0, #0
 800b420:	2100      	movs	r1, #0
 800b422:	ab48      	add	r3, sp, #288	@ 0x120
 800b424:	441c      	add	r4, r3
 800b426:	f1bb 0f00 	cmp.w	fp, #0
 800b42a:	da08      	bge.n	800b43e <__kernel_rem_pio2+0x572>
 800b42c:	9b00      	ldr	r3, [sp, #0]
 800b42e:	b113      	cbz	r3, 800b436 <__kernel_rem_pio2+0x56a>
 800b430:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b434:	4619      	mov	r1, r3
 800b436:	9b04      	ldr	r3, [sp, #16]
 800b438:	e9c3 0100 	strd	r0, r1, [r3]
 800b43c:	e7a0      	b.n	800b380 <__kernel_rem_pio2+0x4b4>
 800b43e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800b442:	f7f4 fe93 	bl	800016c <__adddf3>
 800b446:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b44a:	e7ec      	b.n	800b426 <__kernel_rem_pio2+0x55a>
 800b44c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800b450:	f7f4 fe8c 	bl	800016c <__adddf3>
 800b454:	3d01      	subs	r5, #1
 800b456:	e7c4      	b.n	800b3e2 <__kernel_rem_pio2+0x516>
 800b458:	4602      	mov	r2, r0
 800b45a:	460b      	mov	r3, r1
 800b45c:	e7c9      	b.n	800b3f2 <__kernel_rem_pio2+0x526>
 800b45e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800b462:	f7f4 fe83 	bl	800016c <__adddf3>
 800b466:	3501      	adds	r5, #1
 800b468:	e7ce      	b.n	800b408 <__kernel_rem_pio2+0x53c>
 800b46a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b46e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800b472:	4640      	mov	r0, r8
 800b474:	4649      	mov	r1, r9
 800b476:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b47a:	f7f4 fe77 	bl	800016c <__adddf3>
 800b47e:	4602      	mov	r2, r0
 800b480:	460b      	mov	r3, r1
 800b482:	4606      	mov	r6, r0
 800b484:	460f      	mov	r7, r1
 800b486:	4640      	mov	r0, r8
 800b488:	4649      	mov	r1, r9
 800b48a:	f7f4 fe6d 	bl	8000168 <__aeabi_dsub>
 800b48e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b492:	f7f4 fe6b 	bl	800016c <__adddf3>
 800b496:	e865 0102 	strd	r0, r1, [r5], #-8
 800b49a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b49e:	e9c5 6700 	strd	r6, r7, [r5]
 800b4a2:	e77b      	b.n	800b39c <__kernel_rem_pio2+0x4d0>
 800b4a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4a8:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800b4ac:	4640      	mov	r0, r8
 800b4ae:	4649      	mov	r1, r9
 800b4b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4b4:	f7f4 fe5a 	bl	800016c <__adddf3>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4606      	mov	r6, r0
 800b4be:	460f      	mov	r7, r1
 800b4c0:	4640      	mov	r0, r8
 800b4c2:	4649      	mov	r1, r9
 800b4c4:	f7f4 fe50 	bl	8000168 <__aeabi_dsub>
 800b4c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4cc:	f7f4 fe4e 	bl	800016c <__adddf3>
 800b4d0:	e865 0102 	strd	r0, r1, [r5], #-8
 800b4d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4d8:	e9c5 6700 	strd	r6, r7, [r5]
 800b4dc:	e763      	b.n	800b3a6 <__kernel_rem_pio2+0x4da>
 800b4de:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800b4e2:	f7f4 fe43 	bl	800016c <__adddf3>
 800b4e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b4ea:	e761      	b.n	800b3b0 <__kernel_rem_pio2+0x4e4>
 800b4ec:	9b04      	ldr	r3, [sp, #16]
 800b4ee:	9a04      	ldr	r2, [sp, #16]
 800b4f0:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b4f4:	601f      	str	r7, [r3, #0]
 800b4f6:	605c      	str	r4, [r3, #4]
 800b4f8:	609d      	str	r5, [r3, #8]
 800b4fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b4fe:	60d3      	str	r3, [r2, #12]
 800b500:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b504:	6110      	str	r0, [r2, #16]
 800b506:	6153      	str	r3, [r2, #20]
 800b508:	e73a      	b.n	800b380 <__kernel_rem_pio2+0x4b4>
 800b50a:	bf00      	nop
 800b50c:	41700000 	.word	0x41700000
 800b510:	3e700000 	.word	0x3e700000
 800b514:	00000000 	.word	0x00000000

0800b518 <scalbn>:
 800b518:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800b51c:	4616      	mov	r6, r2
 800b51e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b522:	4683      	mov	fp, r0
 800b524:	468c      	mov	ip, r1
 800b526:	460b      	mov	r3, r1
 800b528:	b982      	cbnz	r2, 800b54c <scalbn+0x34>
 800b52a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b52e:	4303      	orrs	r3, r0
 800b530:	d039      	beq.n	800b5a6 <scalbn+0x8e>
 800b532:	4b2f      	ldr	r3, [pc, #188]	@ (800b5f0 <scalbn+0xd8>)
 800b534:	2200      	movs	r2, #0
 800b536:	f7f4 ffcf 	bl	80004d8 <__aeabi_dmul>
 800b53a:	4b2e      	ldr	r3, [pc, #184]	@ (800b5f4 <scalbn+0xdc>)
 800b53c:	4683      	mov	fp, r0
 800b53e:	429e      	cmp	r6, r3
 800b540:	468c      	mov	ip, r1
 800b542:	da0d      	bge.n	800b560 <scalbn+0x48>
 800b544:	a326      	add	r3, pc, #152	@ (adr r3, 800b5e0 <scalbn+0xc8>)
 800b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54a:	e01b      	b.n	800b584 <scalbn+0x6c>
 800b54c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800b550:	42ba      	cmp	r2, r7
 800b552:	d109      	bne.n	800b568 <scalbn+0x50>
 800b554:	4602      	mov	r2, r0
 800b556:	f7f4 fe09 	bl	800016c <__adddf3>
 800b55a:	4683      	mov	fp, r0
 800b55c:	468c      	mov	ip, r1
 800b55e:	e022      	b.n	800b5a6 <scalbn+0x8e>
 800b560:	460b      	mov	r3, r1
 800b562:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b566:	3a36      	subs	r2, #54	@ 0x36
 800b568:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b56c:	428e      	cmp	r6, r1
 800b56e:	dd0c      	ble.n	800b58a <scalbn+0x72>
 800b570:	a31d      	add	r3, pc, #116	@ (adr r3, 800b5e8 <scalbn+0xd0>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	461c      	mov	r4, r3
 800b578:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800b57c:	f361 74df 	bfi	r4, r1, #31, #1
 800b580:	4621      	mov	r1, r4
 800b582:	481d      	ldr	r0, [pc, #116]	@ (800b5f8 <scalbn+0xe0>)
 800b584:	f7f4 ffa8 	bl	80004d8 <__aeabi_dmul>
 800b588:	e7e7      	b.n	800b55a <scalbn+0x42>
 800b58a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b58e:	4432      	add	r2, r6
 800b590:	428a      	cmp	r2, r1
 800b592:	dced      	bgt.n	800b570 <scalbn+0x58>
 800b594:	2a00      	cmp	r2, #0
 800b596:	dd0a      	ble.n	800b5ae <scalbn+0x96>
 800b598:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b59c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b5a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b5a4:	46ac      	mov	ip, r5
 800b5a6:	4658      	mov	r0, fp
 800b5a8:	4661      	mov	r1, ip
 800b5aa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800b5ae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b5b2:	da09      	bge.n	800b5c8 <scalbn+0xb0>
 800b5b4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800b5b8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800b5bc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800b5c0:	480e      	ldr	r0, [pc, #56]	@ (800b5fc <scalbn+0xe4>)
 800b5c2:	f041 011f 	orr.w	r1, r1, #31
 800b5c6:	e7bd      	b.n	800b544 <scalbn+0x2c>
 800b5c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b5cc:	3236      	adds	r2, #54	@ 0x36
 800b5ce:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b5d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b5d6:	4658      	mov	r0, fp
 800b5d8:	4629      	mov	r1, r5
 800b5da:	2200      	movs	r2, #0
 800b5dc:	4b08      	ldr	r3, [pc, #32]	@ (800b600 <scalbn+0xe8>)
 800b5de:	e7d1      	b.n	800b584 <scalbn+0x6c>
 800b5e0:	c2f8f359 	.word	0xc2f8f359
 800b5e4:	01a56e1f 	.word	0x01a56e1f
 800b5e8:	8800759c 	.word	0x8800759c
 800b5ec:	7e37e43c 	.word	0x7e37e43c
 800b5f0:	43500000 	.word	0x43500000
 800b5f4:	ffff3cb0 	.word	0xffff3cb0
 800b5f8:	8800759c 	.word	0x8800759c
 800b5fc:	c2f8f359 	.word	0xc2f8f359
 800b600:	3c900000 	.word	0x3c900000
 800b604:	00000000 	.word	0x00000000

0800b608 <floor>:
 800b608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b60c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b610:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800b614:	2e13      	cmp	r6, #19
 800b616:	4602      	mov	r2, r0
 800b618:	460b      	mov	r3, r1
 800b61a:	460c      	mov	r4, r1
 800b61c:	4605      	mov	r5, r0
 800b61e:	4680      	mov	r8, r0
 800b620:	dc35      	bgt.n	800b68e <floor+0x86>
 800b622:	2e00      	cmp	r6, #0
 800b624:	da17      	bge.n	800b656 <floor+0x4e>
 800b626:	a334      	add	r3, pc, #208	@ (adr r3, 800b6f8 <floor+0xf0>)
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	f7f4 fd9e 	bl	800016c <__adddf3>
 800b630:	2200      	movs	r2, #0
 800b632:	2300      	movs	r3, #0
 800b634:	f7f5 f9e0 	bl	80009f8 <__aeabi_dcmpgt>
 800b638:	b150      	cbz	r0, 800b650 <floor+0x48>
 800b63a:	2c00      	cmp	r4, #0
 800b63c:	da57      	bge.n	800b6ee <floor+0xe6>
 800b63e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b642:	432c      	orrs	r4, r5
 800b644:	2500      	movs	r5, #0
 800b646:	42ac      	cmp	r4, r5
 800b648:	4c2d      	ldr	r4, [pc, #180]	@ (800b700 <floor+0xf8>)
 800b64a:	bf08      	it	eq
 800b64c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b650:	4623      	mov	r3, r4
 800b652:	462a      	mov	r2, r5
 800b654:	e024      	b.n	800b6a0 <floor+0x98>
 800b656:	4f2b      	ldr	r7, [pc, #172]	@ (800b704 <floor+0xfc>)
 800b658:	4137      	asrs	r7, r6
 800b65a:	ea01 0c07 	and.w	ip, r1, r7
 800b65e:	ea5c 0c00 	orrs.w	ip, ip, r0
 800b662:	d01d      	beq.n	800b6a0 <floor+0x98>
 800b664:	a324      	add	r3, pc, #144	@ (adr r3, 800b6f8 <floor+0xf0>)
 800b666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66a:	f7f4 fd7f 	bl	800016c <__adddf3>
 800b66e:	2200      	movs	r2, #0
 800b670:	2300      	movs	r3, #0
 800b672:	f7f5 f9c1 	bl	80009f8 <__aeabi_dcmpgt>
 800b676:	2800      	cmp	r0, #0
 800b678:	d0ea      	beq.n	800b650 <floor+0x48>
 800b67a:	2c00      	cmp	r4, #0
 800b67c:	bfbe      	ittt	lt
 800b67e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b682:	4133      	asrlt	r3, r6
 800b684:	18e4      	addlt	r4, r4, r3
 800b686:	2500      	movs	r5, #0
 800b688:	ea24 0407 	bic.w	r4, r4, r7
 800b68c:	e7e0      	b.n	800b650 <floor+0x48>
 800b68e:	2e33      	cmp	r6, #51	@ 0x33
 800b690:	dd0a      	ble.n	800b6a8 <floor+0xa0>
 800b692:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b696:	d103      	bne.n	800b6a0 <floor+0x98>
 800b698:	f7f4 fd68 	bl	800016c <__adddf3>
 800b69c:	4602      	mov	r2, r0
 800b69e:	460b      	mov	r3, r1
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a8:	f04f 3cff 	mov.w	ip, #4294967295
 800b6ac:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800b6b0:	fa2c f707 	lsr.w	r7, ip, r7
 800b6b4:	4207      	tst	r7, r0
 800b6b6:	d0f3      	beq.n	800b6a0 <floor+0x98>
 800b6b8:	a30f      	add	r3, pc, #60	@ (adr r3, 800b6f8 <floor+0xf0>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	f7f4 fd55 	bl	800016c <__adddf3>
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f7f5 f997 	bl	80009f8 <__aeabi_dcmpgt>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d0c0      	beq.n	800b650 <floor+0x48>
 800b6ce:	2c00      	cmp	r4, #0
 800b6d0:	da0a      	bge.n	800b6e8 <floor+0xe0>
 800b6d2:	2e14      	cmp	r6, #20
 800b6d4:	d101      	bne.n	800b6da <floor+0xd2>
 800b6d6:	3401      	adds	r4, #1
 800b6d8:	e006      	b.n	800b6e8 <floor+0xe0>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b6e0:	40b3      	lsls	r3, r6
 800b6e2:	441d      	add	r5, r3
 800b6e4:	4545      	cmp	r5, r8
 800b6e6:	d3f6      	bcc.n	800b6d6 <floor+0xce>
 800b6e8:	ea25 0507 	bic.w	r5, r5, r7
 800b6ec:	e7b0      	b.n	800b650 <floor+0x48>
 800b6ee:	2500      	movs	r5, #0
 800b6f0:	462c      	mov	r4, r5
 800b6f2:	e7ad      	b.n	800b650 <floor+0x48>
 800b6f4:	f3af 8000 	nop.w
 800b6f8:	8800759c 	.word	0x8800759c
 800b6fc:	7e37e43c 	.word	0x7e37e43c
 800b700:	bff00000 	.word	0xbff00000
 800b704:	000fffff 	.word	0x000fffff

0800b708 <_init>:
 800b708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b70a:	bf00      	nop
 800b70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b70e:	bc08      	pop	{r3}
 800b710:	469e      	mov	lr, r3
 800b712:	4770      	bx	lr

0800b714 <_fini>:
 800b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b716:	bf00      	nop
 800b718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b71a:	bc08      	pop	{r3}
 800b71c:	469e      	mov	lr, r3
 800b71e:	4770      	bx	lr
