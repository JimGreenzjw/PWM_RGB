
PWM_RGB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004868  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004974  08004974  00005974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049dc  080049dc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080049dc  080049dc  000059dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049e4  080049e4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e4  080049e4  000059e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e8  080049e8  000059e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080049ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000724  2000005c  08004a48  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  08004a48  00006780  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102fc  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002752  00000000  00000000  00016381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00018ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc7  00000000  00000000  00019af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017362  00000000  00000000  0001a7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145de  00000000  00000000  00031b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d7f9  00000000  00000000  000460ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d38f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ec  00000000  00000000  000d393c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d8228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800495c 	.word	0x0800495c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800495c 	.word	0x0800495c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b20      	ldr	r3, [pc, #128]	@ (80001f4 <MX_GPIO_Init+0x98>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a1f      	ldr	r2, [pc, #124]	@ (80001f4 <MX_GPIO_Init+0x98>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b1d      	ldr	r3, [pc, #116]	@ (80001f4 <MX_GPIO_Init+0x98>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b1a      	ldr	r3, [pc, #104]	@ (80001f4 <MX_GPIO_Init+0x98>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a19      	ldr	r2, [pc, #100]	@ (80001f4 <MX_GPIO_Init+0x98>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b17      	ldr	r3, [pc, #92]	@ (80001f4 <MX_GPIO_Init+0x98>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b14      	ldr	r3, [pc, #80]	@ (80001f4 <MX_GPIO_Init+0x98>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a13      	ldr	r2, [pc, #76]	@ (80001f4 <MX_GPIO_Init+0x98>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b11      	ldr	r3, [pc, #68]	@ (80001f4 <MX_GPIO_Init+0x98>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b0e      	ldr	r3, [pc, #56]	@ (80001f4 <MX_GPIO_Init+0x98>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a0d      	ldr	r2, [pc, #52]	@ (80001f4 <MX_GPIO_Init+0x98>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b0b      	ldr	r3, [pc, #44]	@ (80001f4 <MX_GPIO_Init+0x98>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80001d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001d6:	2300      	movs	r3, #0
 80001d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001da:	2300      	movs	r3, #0
 80001dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80001de:	f107 0310 	add.w	r3, r7, #16
 80001e2:	4619      	mov	r1, r3
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <MX_GPIO_Init+0x9c>)
 80001e6:	f000 ff5b 	bl	80010a0 <HAL_GPIO_Init>

}
 80001ea:	bf00      	nop
 80001ec:	3720      	adds	r7, #32
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	40021000 	.word	0x40021000
 80001f8:	40011000 	.word	0x40011000

080001fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000200:	4b12      	ldr	r3, [pc, #72]	@ (800024c <MX_I2C1_Init+0x50>)
 8000202:	4a13      	ldr	r2, [pc, #76]	@ (8000250 <MX_I2C1_Init+0x54>)
 8000204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000206:	4b11      	ldr	r3, [pc, #68]	@ (800024c <MX_I2C1_Init+0x50>)
 8000208:	4a12      	ldr	r2, [pc, #72]	@ (8000254 <MX_I2C1_Init+0x58>)
 800020a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800020c:	4b0f      	ldr	r3, [pc, #60]	@ (800024c <MX_I2C1_Init+0x50>)
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000212:	4b0e      	ldr	r3, [pc, #56]	@ (800024c <MX_I2C1_Init+0x50>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000218:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <MX_I2C1_Init+0x50>)
 800021a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800021e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000220:	4b0a      	ldr	r3, [pc, #40]	@ (800024c <MX_I2C1_Init+0x50>)
 8000222:	2200      	movs	r2, #0
 8000224:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000226:	4b09      	ldr	r3, [pc, #36]	@ (800024c <MX_I2C1_Init+0x50>)
 8000228:	2200      	movs	r2, #0
 800022a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800022c:	4b07      	ldr	r3, [pc, #28]	@ (800024c <MX_I2C1_Init+0x50>)
 800022e:	2200      	movs	r2, #0
 8000230:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000232:	4b06      	ldr	r3, [pc, #24]	@ (800024c <MX_I2C1_Init+0x50>)
 8000234:	2200      	movs	r2, #0
 8000236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000238:	4804      	ldr	r0, [pc, #16]	@ (800024c <MX_I2C1_Init+0x50>)
 800023a:	f001 f8b5 	bl	80013a8 <HAL_I2C_Init>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000244:	f000 f978 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	20000078 	.word	0x20000078
 8000250:	40005400 	.word	0x40005400
 8000254:	00061a80 	.word	0x00061a80

08000258 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b08a      	sub	sp, #40	@ 0x28
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a1d      	ldr	r2, [pc, #116]	@ (80002e8 <HAL_I2C_MspInit+0x90>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d132      	bne.n	80002de <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000278:	4b1c      	ldr	r3, [pc, #112]	@ (80002ec <HAL_I2C_MspInit+0x94>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a1b      	ldr	r2, [pc, #108]	@ (80002ec <HAL_I2C_MspInit+0x94>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b19      	ldr	r3, [pc, #100]	@ (80002ec <HAL_I2C_MspInit+0x94>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0308 	and.w	r3, r3, #8
 800028c:	613b      	str	r3, [r7, #16]
 800028e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000290:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000296:	2312      	movs	r3, #18
 8000298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800029a:	2303      	movs	r3, #3
 800029c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	4619      	mov	r1, r3
 80002a4:	4812      	ldr	r0, [pc, #72]	@ (80002f0 <HAL_I2C_MspInit+0x98>)
 80002a6:	f000 fefb 	bl	80010a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80002aa:	4b12      	ldr	r3, [pc, #72]	@ (80002f4 <HAL_I2C_MspInit+0x9c>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80002b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002b2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80002b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80002b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002ba:	f043 0302 	orr.w	r3, r3, #2
 80002be:	627b      	str	r3, [r7, #36]	@ 0x24
 80002c0:	4a0c      	ldr	r2, [pc, #48]	@ (80002f4 <HAL_I2C_MspInit+0x9c>)
 80002c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002c4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002c6:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <HAL_I2C_MspInit+0x94>)
 80002c8:	69db      	ldr	r3, [r3, #28]
 80002ca:	4a08      	ldr	r2, [pc, #32]	@ (80002ec <HAL_I2C_MspInit+0x94>)
 80002cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002d0:	61d3      	str	r3, [r2, #28]
 80002d2:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <HAL_I2C_MspInit+0x94>)
 80002d4:	69db      	ldr	r3, [r3, #28]
 80002d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80002de:	bf00      	nop
 80002e0:	3728      	adds	r7, #40	@ 0x28
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40005400 	.word	0x40005400
 80002ec:	40021000 	.word	0x40021000
 80002f0:	40010c00 	.word	0x40010c00
 80002f4:	40010000 	.word	0x40010000

080002f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b09c      	sub	sp, #112	@ 0x70
 80002fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002fe:	f000 fc89 	bl	8000c14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000302:	f000 f88b 	bl	800041c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000306:	f7ff ff29 	bl	800015c <MX_GPIO_Init>
	MX_TIM2_Init();
 800030a:	f000 fad5 	bl	80008b8 <MX_TIM2_Init>
	MX_TIM1_Init();
 800030e:	f000 fa7b 	bl	8000808 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8000312:	f000 fbdd 	bl	8000ad0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000316:	f7ff ff71 	bl	80001fc <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	//启动PWM输出
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800031a:	213c      	movs	r1, #60	@ 0x3c
 800031c:	4838      	ldr	r0, [pc, #224]	@ (8000400 <main+0x108>)
 800031e:	f002 fadb 	bl	80028d8 <HAL_TIM_Encoder_Start>
	htim1.Instance->CNT = 70;
 8000322:	4b37      	ldr	r3, [pc, #220]	@ (8000400 <main+0x108>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2246      	movs	r2, #70	@ 0x46
 8000328:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_Delay(20); // 单片机启动比OLED上电快,需要延迟等待一下
 800032a:	2014      	movs	r0, #20
 800032c:	f000 fcd4 	bl	8000cd8 <HAL_Delay>
	OLED_Init(); // 初始化OLED
 8000330:	f000 f930 	bl	8000594 <OLED_Init>
	// 开启串口中断接收
	HAL_UART_Receive_IT(&huart2, rx_data, 2);
 8000334:	2202      	movs	r2, #2
 8000336:	4933      	ldr	r1, [pc, #204]	@ (8000404 <main+0x10c>)
 8000338:	4833      	ldr	r0, [pc, #204]	@ (8000408 <main+0x110>)
 800033a:	f003 f8ba 	bl	80034b2 <HAL_UART_Receive_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	char send_buf[50] = { 0 };
 800033e:	2300      	movs	r3, #0
 8000340:	637b      	str	r3, [r7, #52]	@ 0x34
 8000342:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000346:	222e      	movs	r2, #46	@ 0x2e
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f003 fe76 	bl	800403c <memset>
	char send_buf_2[50] = { 0 };
 8000350:	2300      	movs	r3, #0
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	222e      	movs	r2, #46	@ 0x2e
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f003 fe6e 	bl	800403c <memset>
	uint8_t mapped_value;
	uint16_t cnt_encoder = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	uint16_t cnt_encoder_2 = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
//			sprintf(send_buf_2, "%d", cnt_encoder_2);
//			OLED_PrintASCIIString(2, 2, "output ", &afont24x12, OLED_COLOR_NORMAL);
//			OLED_PrintASCIIString(2, 12, send_buf_2, &afont24x12, OLED_COLOR_NORMAL);
//		}

		uint16_t new_encoder_value = __HAL_TIM_GET_COUNTER(&htim1);
 800036c:	4b24      	ldr	r3, [pc, #144]	@ (8000400 <main+0x108>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000372:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
		if (cnt_encoder != new_encoder_value) {
 8000376:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800037a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800037e:	429a      	cmp	r2, r3
 8000380:	d03a      	beq.n	80003f8 <main+0x100>
			cnt_encoder = ENCODER_MIN
					+ (new_encoder_value % (ENCODER_MAX - ENCODER_MIN + 1));
 8000382:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8000386:	085a      	lsrs	r2, r3, #1
 8000388:	4920      	ldr	r1, [pc, #128]	@ (800040c <main+0x114>)
 800038a:	fba1 1202 	umull	r1, r2, r1, r2
 800038e:	0952      	lsrs	r2, r2, #5
 8000390:	2146      	movs	r1, #70	@ 0x46
 8000392:	fb01 f202 	mul.w	r2, r1, r2
 8000396:	1a9b      	subs	r3, r3, r2
 8000398:	b29b      	uxth	r3, r3
			cnt_encoder = ENCODER_MIN
 800039a:	331e      	adds	r3, #30
 800039c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
			mapped_value = cnt_encoder;  // No need for additional mapping
 80003a0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80003a4:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
			sprintf(send_buf, "%d", mapped_value);
 80003a8:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 80003ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80003b0:	4917      	ldr	r1, [pc, #92]	@ (8000410 <main+0x118>)
 80003b2:	4618      	mov	r0, r3
 80003b4:	f003 fe22 	bl	8003ffc <siprintf>

			if (mapped_value != prev_mapped_value) {
 80003b8:	4b16      	ldr	r3, [pc, #88]	@ (8000414 <main+0x11c>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d010      	beq.n	80003e6 <main+0xee>
				HAL_UART_Transmit(&huart2, (uint8_t*) send_buf,
						strlen(send_buf), 10);
 80003c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff febf 	bl	800014c <strlen>
 80003ce:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) send_buf,
 80003d0:	b29a      	uxth	r2, r3
 80003d2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80003d6:	230a      	movs	r3, #10
 80003d8:	480b      	ldr	r0, [pc, #44]	@ (8000408 <main+0x110>)
 80003da:	f002 ffe7 	bl	80033ac <HAL_UART_Transmit>
				prev_mapped_value = mapped_value;
 80003de:	4a0d      	ldr	r2, [pc, #52]	@ (8000414 <main+0x11c>)
 80003e0:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80003e4:	7013      	strb	r3, [r2, #0]
			}
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80003e6:	2100      	movs	r1, #0
 80003e8:	480b      	ldr	r0, [pc, #44]	@ (8000418 <main+0x120>)
 80003ea:	f002 f931 	bl	8002650 <HAL_TIM_PWM_Start>
			// 配置通道1的占空比，影响电机转速（占空比过低可能导致电机无法启动）
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, mapped_value);
 80003ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000418 <main+0x120>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 80003f6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
		HAL_Delay(10);
 80003f8:	200a      	movs	r0, #10
 80003fa:	f000 fc6d 	bl	8000cd8 <HAL_Delay>
	while (1) {
 80003fe:	e7b5      	b.n	800036c <main+0x74>
 8000400:	2000055c 	.word	0x2000055c
 8000404:	200000cc 	.word	0x200000cc
 8000408:	200005ec 	.word	0x200005ec
 800040c:	ea0ea0eb 	.word	0xea0ea0eb
 8000410:	08004974 	.word	0x08004974
 8000414:	200000ce 	.word	0x200000ce
 8000418:	200005a4 	.word	0x200005a4

0800041c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b090      	sub	sp, #64	@ 0x40
 8000420:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000422:	f107 0318 	add.w	r3, r7, #24
 8000426:	2228      	movs	r2, #40	@ 0x28
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f003 fe06 	bl	800403c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800043e:	2301      	movs	r3, #1
 8000440:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000442:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000446:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044c:	2301      	movs	r3, #1
 800044e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000450:	2302      	movs	r3, #2
 8000452:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000454:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000458:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800045a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800045e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000460:	f107 0318 	add.w	r3, r7, #24
 8000464:	4618      	mov	r0, r3
 8000466:	f001 fc3b 	bl	8001ce0 <HAL_RCC_OscConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x58>
		Error_Handler();
 8000470:	f000 f862 	bl	8000538 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000474:	230f      	movs	r3, #15
 8000476:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000478:	2302      	movs	r3, #2
 800047a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000480:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000484:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2102      	movs	r1, #2
 800048e:	4618      	mov	r0, r3
 8000490:	f001 fea8 	bl	80021e4 <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x82>
		Error_Handler();
 800049a:	f000 f84d 	bl	8000538 <Error_Handler>
	}
}
 800049e:	bf00      	nop
 80004a0:	3740      	adds	r7, #64	@ 0x40
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// 串口接收完成（收到2个字节）中断回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000524 <HAL_UART_RxCpltCallback+0x7c>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d12f      	bne.n	800051a <HAL_UART_RxCpltCallback+0x72>
		uint8_t tens = rx_data[0] - '0';
 80004ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000528 <HAL_UART_RxCpltCallback+0x80>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	3b30      	subs	r3, #48	@ 0x30
 80004c0:	73fb      	strb	r3, [r7, #15]
		uint8_t ones = rx_data[1] - '0';
 80004c2:	4b19      	ldr	r3, [pc, #100]	@ (8000528 <HAL_UART_RxCpltCallback+0x80>)
 80004c4:	785b      	ldrb	r3, [r3, #1]
 80004c6:	3b30      	subs	r3, #48	@ 0x30
 80004c8:	73bb      	strb	r3, [r7, #14]

		uint8_t numeric_value = tens * 10 + ones;
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	461a      	mov	r2, r3
 80004ce:	0092      	lsls	r2, r2, #2
 80004d0:	4413      	add	r3, r2
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	7bbb      	ldrb	r3, [r7, #14]
 80004d8:	4413      	add	r3, r2
 80004da:	737b      	strb	r3, [r7, #13]
		char send_buf[2];
		sprintf(send_buf, "%d", numeric_value);
 80004dc:	7b7a      	ldrb	r2, [r7, #13]
 80004de:	f107 0308 	add.w	r3, r7, #8
 80004e2:	4912      	ldr	r1, [pc, #72]	@ (800052c <HAL_UART_RxCpltCallback+0x84>)
 80004e4:	4618      	mov	r0, r3
 80004e6:	f003 fd89 	bl	8003ffc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) send_buf, strlen(send_buf), 10);
 80004ea:	f107 0308 	add.w	r3, r7, #8
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff fe2c 	bl	800014c <strlen>
 80004f4:	4603      	mov	r3, r0
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	f107 0108 	add.w	r1, r7, #8
 80004fc:	230a      	movs	r3, #10
 80004fe:	480c      	ldr	r0, [pc, #48]	@ (8000530 <HAL_UART_RxCpltCallback+0x88>)
 8000500:	f002 ff54 	bl	80033ac <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 10);
 8000504:	230a      	movs	r3, #10
 8000506:	2202      	movs	r2, #2
 8000508:	490a      	ldr	r1, [pc, #40]	@ (8000534 <HAL_UART_RxCpltCallback+0x8c>)
 800050a:	4809      	ldr	r0, [pc, #36]	@ (8000530 <HAL_UART_RxCpltCallback+0x88>)
 800050c:	f002 ff4e 	bl	80033ac <HAL_UART_Transmit>

		// Re-enable interrupt receive
		HAL_UART_Receive_IT(&huart2, rx_data, 2);
 8000510:	2202      	movs	r2, #2
 8000512:	4905      	ldr	r1, [pc, #20]	@ (8000528 <HAL_UART_RxCpltCallback+0x80>)
 8000514:	4806      	ldr	r0, [pc, #24]	@ (8000530 <HAL_UART_RxCpltCallback+0x88>)
 8000516:	f002 ffcc 	bl	80034b2 <HAL_UART_Receive_IT>
	}
}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40004400 	.word	0x40004400
 8000528:	200000cc 	.word	0x200000cc
 800052c:	08004974 	.word	0x08004974
 8000530:	200005ec 	.word	0x200005ec
 8000534:	08004978 	.word	0x08004978

08000538 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <Error_Handler+0x8>

08000544 <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8000550:	78fb      	ldrb	r3, [r7, #3]
 8000552:	b29b      	uxth	r3, r3
 8000554:	f04f 32ff 	mov.w	r2, #4294967295
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	217a      	movs	r1, #122	@ 0x7a
 800055e:	4803      	ldr	r0, [pc, #12]	@ (800056c <OLED_Send+0x28>)
 8000560:	f001 f866 	bl	8001630 <HAL_I2C_Master_Transmit>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000078 	.word	0x20000078

08000570 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 800057a:	4a05      	ldr	r2, [pc, #20]	@ (8000590 <OLED_SendCmd+0x20>)
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8000580:	2102      	movs	r1, #2
 8000582:	4803      	ldr	r0, [pc, #12]	@ (8000590 <OLED_SendCmd+0x20>)
 8000584:	f7ff ffde 	bl	8000544 <OLED_Send>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200004d0 	.word	0x200004d0

08000594 <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8000598:	20ae      	movs	r0, #174	@ 0xae
 800059a:	f7ff ffe9 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 800059e:	2002      	movs	r0, #2
 80005a0:	f7ff ffe6 	bl	8000570 <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 80005a4:	2010      	movs	r0, #16
 80005a6:	f7ff ffe3 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 80005aa:	2040      	movs	r0, #64	@ 0x40
 80005ac:	f7ff ffe0 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 80005b0:	20b0      	movs	r0, #176	@ 0xb0
 80005b2:	f7ff ffdd 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 80005b6:	2081      	movs	r0, #129	@ 0x81
 80005b8:	f7ff ffda 	bl	8000570 <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 80005bc:	20cf      	movs	r0, #207	@ 0xcf
 80005be:	f7ff ffd7 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 80005c2:	20a1      	movs	r0, #161	@ 0xa1
 80005c4:	f7ff ffd4 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 80005c8:	20a6      	movs	r0, #166	@ 0xa6
 80005ca:	f7ff ffd1 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 80005ce:	20a8      	movs	r0, #168	@ 0xa8
 80005d0:	f7ff ffce 	bl	8000570 <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 80005d4:	203f      	movs	r0, #63	@ 0x3f
 80005d6:	f7ff ffcb 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 80005da:	20ad      	movs	r0, #173	@ 0xad
 80005dc:	f7ff ffc8 	bl	8000570 <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 80005e0:	208b      	movs	r0, #139	@ 0x8b
 80005e2:	f7ff ffc5 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 80005e6:	2033      	movs	r0, #51	@ 0x33
 80005e8:	f7ff ffc2 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 80005ec:	20c8      	movs	r0, #200	@ 0xc8
 80005ee:	f7ff ffbf 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 80005f2:	20d3      	movs	r0, #211	@ 0xd3
 80005f4:	f7ff ffbc 	bl	8000570 <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff ffb9 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 80005fe:	20d5      	movs	r0, #213	@ 0xd5
 8000600:	f7ff ffb6 	bl	8000570 <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 8000604:	20c0      	movs	r0, #192	@ 0xc0
 8000606:	f7ff ffb3 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 800060a:	20d9      	movs	r0, #217	@ 0xd9
 800060c:	f7ff ffb0 	bl	8000570 <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 8000610:	201f      	movs	r0, #31
 8000612:	f7ff ffad 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 8000616:	20da      	movs	r0, #218	@ 0xda
 8000618:	f7ff ffaa 	bl	8000570 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 800061c:	2012      	movs	r0, #18
 800061e:	f7ff ffa7 	bl	8000570 <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 8000622:	20db      	movs	r0, #219	@ 0xdb
 8000624:	f7ff ffa4 	bl	8000570 <OLED_SendCmd>
  OLED_SendCmd(0x40);
 8000628:	2040      	movs	r0, #64	@ 0x40
 800062a:	f7ff ffa1 	bl	8000570 <OLED_SendCmd>

  OLED_NewFrame();
 800062e:	f000 f807 	bl	8000640 <OLED_NewFrame>
  OLED_ShowFrame();
 8000632:	f000 f811 	bl	8000658 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8000636:	20af      	movs	r0, #175	@ 0xaf
 8000638:	f7ff ff9a 	bl	8000570 <OLED_SendCmd>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}

08000640 <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8000644:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000648:	2100      	movs	r1, #0
 800064a:	4802      	ldr	r0, [pc, #8]	@ (8000654 <OLED_NewFrame+0x14>)
 800064c:	f003 fcf6 	bl	800403c <memset>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000d0 	.word	0x200000d0

08000658 <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 800065e:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <OLED_ShowFrame+0x5c>)
 8000660:	2240      	movs	r2, #64	@ 0x40
 8000662:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 8000664:	2300      	movs	r3, #0
 8000666:	71fb      	strb	r3, [r7, #7]
 8000668:	e01b      	b.n	80006a2 <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	3b50      	subs	r3, #80	@ 0x50
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff7d 	bl	8000570 <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 8000676:	2002      	movs	r0, #2
 8000678:	f7ff ff7a 	bl	8000570 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 800067c:	2010      	movs	r0, #16
 800067e:	f7ff ff77 	bl	8000570 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8000682:	480d      	ldr	r0, [pc, #52]	@ (80006b8 <OLED_ShowFrame+0x60>)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	01db      	lsls	r3, r3, #7
 8000688:	4a0c      	ldr	r2, [pc, #48]	@ (80006bc <OLED_ShowFrame+0x64>)
 800068a:	4413      	add	r3, r2
 800068c:	2280      	movs	r2, #128	@ 0x80
 800068e:	4619      	mov	r1, r3
 8000690:	f003 fd08 	bl	80040a4 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8000694:	2181      	movs	r1, #129	@ 0x81
 8000696:	4807      	ldr	r0, [pc, #28]	@ (80006b4 <OLED_ShowFrame+0x5c>)
 8000698:	f7ff ff54 	bl	8000544 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	3301      	adds	r3, #1
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	2b07      	cmp	r3, #7
 80006a6:	d9e0      	bls.n	800066a <OLED_ShowFrame+0x12>
  }
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200004d4 	.word	0x200004d4
 80006b8:	200004d5 	.word	0x200004d5
 80006bc:	200000d0 	.word	0x200000d0

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c6:	4b15      	ldr	r3, [pc, #84]	@ (800071c <HAL_MspInit+0x5c>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	4a14      	ldr	r2, [pc, #80]	@ (800071c <HAL_MspInit+0x5c>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6193      	str	r3, [r2, #24]
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <HAL_MspInit+0x5c>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <HAL_MspInit+0x5c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <HAL_MspInit+0x5c>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <HAL_MspInit+0x5c>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <HAL_MspInit+0x60>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <HAL_MspInit+0x60>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	40021000 	.word	0x40021000
 8000720:	40010000 	.word	0x40010000

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <NMI_Handler+0x4>

0800072c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <MemManage_Handler+0x4>

0800073c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <UsageFault_Handler+0x4>

0800074c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000774:	f000 fa94 	bl	8000ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000780:	4802      	ldr	r0, [pc, #8]	@ (800078c <USART2_IRQHandler+0x10>)
 8000782:	f002 febb 	bl	80034fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200005ec 	.word	0x200005ec

08000790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000798:	4a14      	ldr	r2, [pc, #80]	@ (80007ec <_sbrk+0x5c>)
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <_sbrk+0x60>)
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d102      	bne.n	80007b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ac:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <_sbrk+0x64>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	@ (80007f8 <_sbrk+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d207      	bcs.n	80007d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c0:	f003 fc44 	bl	800404c <__errno>
 80007c4:	4603      	mov	r3, r0
 80007c6:	220c      	movs	r2, #12
 80007c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	e009      	b.n	80007e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <_sbrk+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d6:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	4a05      	ldr	r2, [pc, #20]	@ (80007f4 <_sbrk+0x64>)
 80007e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20005000 	.word	0x20005000
 80007f0:	00000400 	.word	0x00000400
 80007f4:	20000558 	.word	0x20000558
 80007f8:	20000780 	.word	0x20000780

080007fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	@ 0x30
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2224      	movs	r2, #36	@ 0x24
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fc10 	bl	800403c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000824:	4b22      	ldr	r3, [pc, #136]	@ (80008b0 <MX_TIM1_Init+0xa8>)
 8000826:	4a23      	ldr	r2, [pc, #140]	@ (80008b4 <MX_TIM1_Init+0xac>)
 8000828:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800082a:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <MX_TIM1_Init+0xa8>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <MX_TIM1_Init+0xa8>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000836:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <MX_TIM1_Init+0xa8>)
 8000838:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800083c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <MX_TIM1_Init+0xa8>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000844:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_TIM1_Init+0xa8>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <MX_TIM1_Init+0xa8>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000850:	2303      	movs	r3, #3
 8000852:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000858:	2301      	movs	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000860:	230a      	movs	r3, #10
 8000862:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000868:	2301      	movs	r3, #1
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8000870:	230f      	movs	r3, #15
 8000872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4619      	mov	r1, r3
 800087a:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <MX_TIM1_Init+0xa8>)
 800087c:	f001 ff8a 	bl	8002794 <HAL_TIM_Encoder_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000886:	f7ff fe57 	bl	8000538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <MX_TIM1_Init+0xa8>)
 8000898:	f002 fcda 	bl	8003250 <HAL_TIMEx_MasterConfigSynchronization>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80008a2:	f7ff fe49 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	3730      	adds	r7, #48	@ 0x30
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000055c 	.word	0x2000055c
 80008b4:	40012c00 	.word	0x40012c00

080008b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	@ 0x38
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
 80008e4:	615a      	str	r2, [r3, #20]
 80008e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e8:	4b32      	ldr	r3, [pc, #200]	@ (80009b4 <MX_TIM2_Init+0xfc>)
 80008ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80008f0:	4b30      	ldr	r3, [pc, #192]	@ (80009b4 <MX_TIM2_Init+0xfc>)
 80008f2:	2247      	movs	r2, #71	@ 0x47
 80008f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f6:	4b2f      	ldr	r3, [pc, #188]	@ (80009b4 <MX_TIM2_Init+0xfc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80008fc:	4b2d      	ldr	r3, [pc, #180]	@ (80009b4 <MX_TIM2_Init+0xfc>)
 80008fe:	2263      	movs	r2, #99	@ 0x63
 8000900:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	4b2c      	ldr	r3, [pc, #176]	@ (80009b4 <MX_TIM2_Init+0xfc>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000908:	4b2a      	ldr	r3, [pc, #168]	@ (80009b4 <MX_TIM2_Init+0xfc>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800090e:	4829      	ldr	r0, [pc, #164]	@ (80009b4 <MX_TIM2_Init+0xfc>)
 8000910:	f001 fdf6 	bl	8002500 <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800091a:	f7ff fe0d 	bl	8000538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000924:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000928:	4619      	mov	r1, r3
 800092a:	4822      	ldr	r0, [pc, #136]	@ (80009b4 <MX_TIM2_Init+0xfc>)
 800092c:	f002 f924 	bl	8002b78 <HAL_TIM_ConfigClockSource>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000936:	f7ff fdff 	bl	8000538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800093a:	481e      	ldr	r0, [pc, #120]	@ (80009b4 <MX_TIM2_Init+0xfc>)
 800093c:	f001 fe2f 	bl	800259e <HAL_TIM_PWM_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000946:	f7ff fdf7 	bl	8000538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000952:	f107 0320 	add.w	r3, r7, #32
 8000956:	4619      	mov	r1, r3
 8000958:	4816      	ldr	r0, [pc, #88]	@ (80009b4 <MX_TIM2_Init+0xfc>)
 800095a:	f002 fc79 	bl	8003250 <HAL_TIMEx_MasterConfigSynchronization>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000964:	f7ff fde8 	bl	8000538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000968:	2360      	movs	r3, #96	@ 0x60
 800096a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	4619      	mov	r1, r3
 800097e:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <MX_TIM2_Init+0xfc>)
 8000980:	f002 f838 	bl	80029f4 <HAL_TIM_PWM_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800098a:	f7ff fdd5 	bl	8000538 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2204      	movs	r2, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4807      	ldr	r0, [pc, #28]	@ (80009b4 <MX_TIM2_Init+0xfc>)
 8000996:	f002 f82d 	bl	80029f4 <HAL_TIM_PWM_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80009a0:	f7ff fdca 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009a4:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <MX_TIM2_Init+0xfc>)
 80009a6:	f000 f863 	bl	8000a70 <HAL_TIM_MspPostInit>

}
 80009aa:	bf00      	nop
 80009ac:	3738      	adds	r7, #56	@ 0x38
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200005a4 	.word	0x200005a4

080009b8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a16      	ldr	r2, [pc, #88]	@ (8000a2c <HAL_TIM_Encoder_MspInit+0x74>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d124      	bne.n	8000a22 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009d8:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <HAL_TIM_Encoder_MspInit+0x78>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <HAL_TIM_Encoder_MspInit+0x78>)
 80009de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_TIM_Encoder_MspInit+0x78>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <HAL_TIM_Encoder_MspInit+0x78>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000a30 <HAL_TIM_Encoder_MspInit+0x78>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <HAL_TIM_Encoder_MspInit+0x78>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0304 	and.w	r3, r3, #4
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a08:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000a1e:	f000 fb3f 	bl	80010a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a22:	bf00      	nop
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40012c00 	.word	0x40012c00
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010800 	.word	0x40010800

08000a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a48:	d10b      	bne.n	8000a62 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_TIM_Base_MspInit+0x34>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a07      	ldr	r2, [pc, #28]	@ (8000a6c <HAL_TIM_Base_MspInit+0x34>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	61d3      	str	r3, [r2, #28]
 8000a56:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_TIM_Base_MspInit+0x34>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a8e:	d117      	bne.n	8000ac0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <HAL_TIM_MspPostInit+0x58>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac8 <HAL_TIM_MspPostInit+0x58>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <HAL_TIM_MspPostInit+0x58>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4804      	ldr	r0, [pc, #16]	@ (8000acc <HAL_TIM_MspPostInit+0x5c>)
 8000abc:	f000 faf0 	bl	80010a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010800 	.word	0x40010800

08000ad0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <MX_USART2_UART_Init+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000b08:	f002 fc00 	bl	800330c <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b12:	f7ff fd11 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200005ec 	.word	0x200005ec
 8000b20:	40004400 	.word	0x40004400

08000b24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bbc <HAL_UART_MspInit+0x98>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d137      	bne.n	8000bb4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b44:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc0 <HAL_UART_MspInit+0x9c>)
 8000b46:	69db      	ldr	r3, [r3, #28]
 8000b48:	4a1d      	ldr	r2, [pc, #116]	@ (8000bc0 <HAL_UART_MspInit+0x9c>)
 8000b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b4e:	61d3      	str	r3, [r2, #28]
 8000b50:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <HAL_UART_MspInit+0x9c>)
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <HAL_UART_MspInit+0x9c>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <HAL_UART_MspInit+0x9c>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <HAL_UART_MspInit+0x9c>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b74:	2304      	movs	r3, #4
 8000b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	480f      	ldr	r0, [pc, #60]	@ (8000bc4 <HAL_UART_MspInit+0xa0>)
 8000b88:	f000 fa8a 	bl	80010a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4809      	ldr	r0, [pc, #36]	@ (8000bc4 <HAL_UART_MspInit+0xa0>)
 8000ba0:	f000 fa7e 	bl	80010a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2026      	movs	r0, #38	@ 0x26
 8000baa:	f000 f990 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bae:	2026      	movs	r0, #38	@ 0x26
 8000bb0:	f000 f9a9 	bl	8000f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3720      	adds	r7, #32
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40004400 	.word	0x40004400
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010800 	.word	0x40010800

08000bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	@ (8000c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bee:	f7ff fe05 	bl	80007fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f003 fa31 	bl	8004058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf6:	f7ff fb7f 	bl	80002f8 <main>
  bx lr
 8000bfa:	4770      	bx	lr
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c04:	080049ec 	.word	0x080049ec
  ldr r2, =_sbss
 8000c08:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c0c:	20000780 	.word	0x20000780

08000c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_2_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <HAL_Init+0x28>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	@ (8000c3c <HAL_Init+0x28>)
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f000 f947 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2a:	200f      	movs	r0, #15
 8000c2c:	f000 f808 	bl	8000c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c30:	f7ff fd46 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40022000 	.word	0x40022000

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c48:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <HAL_InitTick+0x54>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <HAL_InitTick+0x58>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f95f 	bl	8000f22 <HAL_SYSTICK_Config>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00e      	b.n	8000c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d80a      	bhi.n	8000c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f000 f927 	bl	8000ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c80:	4a06      	ldr	r2, [pc, #24]	@ (8000c9c <HAL_InitTick+0x5c>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e000      	b.n	8000c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000000 	.word	0x20000000
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000004 	.word	0x20000004

08000ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <HAL_IncTick+0x1c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <HAL_IncTick+0x20>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a03      	ldr	r2, [pc, #12]	@ (8000cc0 <HAL_IncTick+0x20>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000634 	.word	0x20000634

08000cc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b02      	ldr	r3, [pc, #8]	@ (8000cd4 <HAL_GetTick+0x10>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	20000634 	.word	0x20000634

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff fff0 	bl	8000cc4 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <HAL_Delay+0x44>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffe0 	bl	8000cc4 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4906      	ldr	r1, [pc, #24]	@ (8000db8 <__NVIC_EnableIRQ+0x34>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	@ (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	@ (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	@ 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	@ 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f7ff ff90 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff2d 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff42 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ff90 	bl	8000e10 <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5f 	bl	8000dbc <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff35 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffa2 	bl	8000e74 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b085      	sub	sp, #20
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d008      	beq.n	8000f64 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2204      	movs	r2, #4
 8000f56:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e020      	b.n	8000fa6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 020e 	bic.w	r2, r2, #14
 8000f72:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0201 	bic.w	r2, r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d005      	beq.n	8000fd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2204      	movs	r2, #4
 8000fcc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	e051      	b.n	8001078 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 020e 	bic.w	r2, r2, #14
 8000fe2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0201 	bic.w	r2, r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a22      	ldr	r2, [pc, #136]	@ (8001084 <HAL_DMA_Abort_IT+0xd4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d029      	beq.n	8001052 <HAL_DMA_Abort_IT+0xa2>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a21      	ldr	r2, [pc, #132]	@ (8001088 <HAL_DMA_Abort_IT+0xd8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d022      	beq.n	800104e <HAL_DMA_Abort_IT+0x9e>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a1f      	ldr	r2, [pc, #124]	@ (800108c <HAL_DMA_Abort_IT+0xdc>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d01a      	beq.n	8001048 <HAL_DMA_Abort_IT+0x98>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1e      	ldr	r2, [pc, #120]	@ (8001090 <HAL_DMA_Abort_IT+0xe0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d012      	beq.n	8001042 <HAL_DMA_Abort_IT+0x92>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a1c      	ldr	r2, [pc, #112]	@ (8001094 <HAL_DMA_Abort_IT+0xe4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00a      	beq.n	800103c <HAL_DMA_Abort_IT+0x8c>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a1b      	ldr	r2, [pc, #108]	@ (8001098 <HAL_DMA_Abort_IT+0xe8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d102      	bne.n	8001036 <HAL_DMA_Abort_IT+0x86>
 8001030:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001034:	e00e      	b.n	8001054 <HAL_DMA_Abort_IT+0xa4>
 8001036:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800103a:	e00b      	b.n	8001054 <HAL_DMA_Abort_IT+0xa4>
 800103c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001040:	e008      	b.n	8001054 <HAL_DMA_Abort_IT+0xa4>
 8001042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001046:	e005      	b.n	8001054 <HAL_DMA_Abort_IT+0xa4>
 8001048:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800104c:	e002      	b.n	8001054 <HAL_DMA_Abort_IT+0xa4>
 800104e:	2310      	movs	r3, #16
 8001050:	e000      	b.n	8001054 <HAL_DMA_Abort_IT+0xa4>
 8001052:	2301      	movs	r3, #1
 8001054:	4a11      	ldr	r2, [pc, #68]	@ (800109c <HAL_DMA_Abort_IT+0xec>)
 8001056:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	4798      	blx	r3
    } 
  }
  return status;
 8001078:	7bfb      	ldrb	r3, [r7, #15]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40020008 	.word	0x40020008
 8001088:	4002001c 	.word	0x4002001c
 800108c:	40020030 	.word	0x40020030
 8001090:	40020044 	.word	0x40020044
 8001094:	40020058 	.word	0x40020058
 8001098:	4002006c 	.word	0x4002006c
 800109c:	40020000 	.word	0x40020000

080010a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b08b      	sub	sp, #44	@ 0x2c
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b2:	e169      	b.n	8001388 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010b4:	2201      	movs	r2, #1
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f040 8158 	bne.w	8001382 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4a9a      	ldr	r2, [pc, #616]	@ (8001340 <HAL_GPIO_Init+0x2a0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d05e      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 80010dc:	4a98      	ldr	r2, [pc, #608]	@ (8001340 <HAL_GPIO_Init+0x2a0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d875      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 80010e2:	4a98      	ldr	r2, [pc, #608]	@ (8001344 <HAL_GPIO_Init+0x2a4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d058      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 80010e8:	4a96      	ldr	r2, [pc, #600]	@ (8001344 <HAL_GPIO_Init+0x2a4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d86f      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 80010ee:	4a96      	ldr	r2, [pc, #600]	@ (8001348 <HAL_GPIO_Init+0x2a8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d052      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 80010f4:	4a94      	ldr	r2, [pc, #592]	@ (8001348 <HAL_GPIO_Init+0x2a8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d869      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 80010fa:	4a94      	ldr	r2, [pc, #592]	@ (800134c <HAL_GPIO_Init+0x2ac>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d04c      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 8001100:	4a92      	ldr	r2, [pc, #584]	@ (800134c <HAL_GPIO_Init+0x2ac>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d863      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 8001106:	4a92      	ldr	r2, [pc, #584]	@ (8001350 <HAL_GPIO_Init+0x2b0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d046      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 800110c:	4a90      	ldr	r2, [pc, #576]	@ (8001350 <HAL_GPIO_Init+0x2b0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d85d      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 8001112:	2b12      	cmp	r3, #18
 8001114:	d82a      	bhi.n	800116c <HAL_GPIO_Init+0xcc>
 8001116:	2b12      	cmp	r3, #18
 8001118:	d859      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 800111a:	a201      	add	r2, pc, #4	@ (adr r2, 8001120 <HAL_GPIO_Init+0x80>)
 800111c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001120:	0800119b 	.word	0x0800119b
 8001124:	08001175 	.word	0x08001175
 8001128:	08001187 	.word	0x08001187
 800112c:	080011c9 	.word	0x080011c9
 8001130:	080011cf 	.word	0x080011cf
 8001134:	080011cf 	.word	0x080011cf
 8001138:	080011cf 	.word	0x080011cf
 800113c:	080011cf 	.word	0x080011cf
 8001140:	080011cf 	.word	0x080011cf
 8001144:	080011cf 	.word	0x080011cf
 8001148:	080011cf 	.word	0x080011cf
 800114c:	080011cf 	.word	0x080011cf
 8001150:	080011cf 	.word	0x080011cf
 8001154:	080011cf 	.word	0x080011cf
 8001158:	080011cf 	.word	0x080011cf
 800115c:	080011cf 	.word	0x080011cf
 8001160:	080011cf 	.word	0x080011cf
 8001164:	0800117d 	.word	0x0800117d
 8001168:	08001191 	.word	0x08001191
 800116c:	4a79      	ldr	r2, [pc, #484]	@ (8001354 <HAL_GPIO_Init+0x2b4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d013      	beq.n	800119a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001172:	e02c      	b.n	80011ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	623b      	str	r3, [r7, #32]
          break;
 800117a:	e029      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	3304      	adds	r3, #4
 8001182:	623b      	str	r3, [r7, #32]
          break;
 8001184:	e024      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	3308      	adds	r3, #8
 800118c:	623b      	str	r3, [r7, #32]
          break;
 800118e:	e01f      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	330c      	adds	r3, #12
 8001196:	623b      	str	r3, [r7, #32]
          break;
 8001198:	e01a      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d102      	bne.n	80011a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011a2:	2304      	movs	r3, #4
 80011a4:	623b      	str	r3, [r7, #32]
          break;
 80011a6:	e013      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d105      	bne.n	80011bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b0:	2308      	movs	r3, #8
 80011b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	611a      	str	r2, [r3, #16]
          break;
 80011ba:	e009      	b.n	80011d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011bc:	2308      	movs	r3, #8
 80011be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	615a      	str	r2, [r3, #20]
          break;
 80011c6:	e003      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
          break;
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          break;
 80011ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2bff      	cmp	r3, #255	@ 0xff
 80011d4:	d801      	bhi.n	80011da <HAL_GPIO_Init+0x13a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	e001      	b.n	80011de <HAL_GPIO_Init+0x13e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3304      	adds	r3, #4
 80011de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2bff      	cmp	r3, #255	@ 0xff
 80011e4:	d802      	bhi.n	80011ec <HAL_GPIO_Init+0x14c>
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	e002      	b.n	80011f2 <HAL_GPIO_Init+0x152>
 80011ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ee:	3b08      	subs	r3, #8
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	210f      	movs	r1, #15
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	401a      	ands	r2, r3
 8001204:	6a39      	ldr	r1, [r7, #32]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	431a      	orrs	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 80b1 	beq.w	8001382 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001220:	4b4d      	ldr	r3, [pc, #308]	@ (8001358 <HAL_GPIO_Init+0x2b8>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a4c      	ldr	r2, [pc, #304]	@ (8001358 <HAL_GPIO_Init+0x2b8>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b4a      	ldr	r3, [pc, #296]	@ (8001358 <HAL_GPIO_Init+0x2b8>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001238:	4a48      	ldr	r2, [pc, #288]	@ (800135c <HAL_GPIO_Init+0x2bc>)
 800123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001244:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a40      	ldr	r2, [pc, #256]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d013      	beq.n	800128c <HAL_GPIO_Init+0x1ec>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a3f      	ldr	r2, [pc, #252]	@ (8001364 <HAL_GPIO_Init+0x2c4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d00d      	beq.n	8001288 <HAL_GPIO_Init+0x1e8>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a3e      	ldr	r2, [pc, #248]	@ (8001368 <HAL_GPIO_Init+0x2c8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d007      	beq.n	8001284 <HAL_GPIO_Init+0x1e4>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a3d      	ldr	r2, [pc, #244]	@ (800136c <HAL_GPIO_Init+0x2cc>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d101      	bne.n	8001280 <HAL_GPIO_Init+0x1e0>
 800127c:	2303      	movs	r3, #3
 800127e:	e006      	b.n	800128e <HAL_GPIO_Init+0x1ee>
 8001280:	2304      	movs	r3, #4
 8001282:	e004      	b.n	800128e <HAL_GPIO_Init+0x1ee>
 8001284:	2302      	movs	r3, #2
 8001286:	e002      	b.n	800128e <HAL_GPIO_Init+0x1ee>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <HAL_GPIO_Init+0x1ee>
 800128c:	2300      	movs	r3, #0
 800128e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001290:	f002 0203 	and.w	r2, r2, #3
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	4093      	lsls	r3, r2
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800129e:	492f      	ldr	r1, [pc, #188]	@ (800135c <HAL_GPIO_Init+0x2bc>)
 80012a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	492c      	ldr	r1, [pc, #176]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	608b      	str	r3, [r1, #8]
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4928      	ldr	r1, [pc, #160]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012e0:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	4922      	ldr	r1, [pc, #136]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	60cb      	str	r3, [r1, #12]
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012ee:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	491e      	ldr	r1, [pc, #120]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001308:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4918      	ldr	r1, [pc, #96]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001316:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	43db      	mvns	r3, r3
 800131e:	4914      	ldr	r1, [pc, #80]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 8001320:	4013      	ands	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d021      	beq.n	8001374 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	490e      	ldr	r1, [pc, #56]	@ (8001370 <HAL_GPIO_Init+0x2d0>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
 800133c:	e021      	b.n	8001382 <HAL_GPIO_Init+0x2e2>
 800133e:	bf00      	nop
 8001340:	10320000 	.word	0x10320000
 8001344:	10310000 	.word	0x10310000
 8001348:	10220000 	.word	0x10220000
 800134c:	10210000 	.word	0x10210000
 8001350:	10120000 	.word	0x10120000
 8001354:	10110000 	.word	0x10110000
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	40010800 	.word	0x40010800
 8001364:	40010c00 	.word	0x40010c00
 8001368:	40011000 	.word	0x40011000
 800136c:	40011400 	.word	0x40011400
 8001370:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <HAL_GPIO_Init+0x304>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	43db      	mvns	r3, r3
 800137c:	4909      	ldr	r1, [pc, #36]	@ (80013a4 <HAL_GPIO_Init+0x304>)
 800137e:	4013      	ands	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	3301      	adds	r3, #1
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138e:	fa22 f303 	lsr.w	r3, r2, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	f47f ae8e 	bne.w	80010b4 <HAL_GPIO_Init+0x14>
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	372c      	adds	r7, #44	@ 0x2c
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	40010400 	.word	0x40010400

080013a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e12b      	b.n	8001612 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7fe ff42 	bl	8000258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2224      	movs	r2, #36	@ 0x24
 80013d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0201 	bic.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800140a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800140c:	f001 f832 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8001410:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a81      	ldr	r2, [pc, #516]	@ (800161c <HAL_I2C_Init+0x274>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d807      	bhi.n	800142c <HAL_I2C_Init+0x84>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4a80      	ldr	r2, [pc, #512]	@ (8001620 <HAL_I2C_Init+0x278>)
 8001420:	4293      	cmp	r3, r2
 8001422:	bf94      	ite	ls
 8001424:	2301      	movls	r3, #1
 8001426:	2300      	movhi	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	e006      	b.n	800143a <HAL_I2C_Init+0x92>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4a7d      	ldr	r2, [pc, #500]	@ (8001624 <HAL_I2C_Init+0x27c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	bf94      	ite	ls
 8001434:	2301      	movls	r3, #1
 8001436:	2300      	movhi	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e0e7      	b.n	8001612 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4a78      	ldr	r2, [pc, #480]	@ (8001628 <HAL_I2C_Init+0x280>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0c9b      	lsrs	r3, r3, #18
 800144c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	430a      	orrs	r2, r1
 8001460:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a6a      	ldr	r2, [pc, #424]	@ (800161c <HAL_I2C_Init+0x274>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d802      	bhi.n	800147c <HAL_I2C_Init+0xd4>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3301      	adds	r3, #1
 800147a:	e009      	b.n	8001490 <HAL_I2C_Init+0xe8>
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	4a69      	ldr	r2, [pc, #420]	@ (800162c <HAL_I2C_Init+0x284>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	099b      	lsrs	r3, r3, #6
 800148e:	3301      	adds	r3, #1
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	430b      	orrs	r3, r1
 8001496:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	495c      	ldr	r1, [pc, #368]	@ (800161c <HAL_I2C_Init+0x274>)
 80014ac:	428b      	cmp	r3, r1
 80014ae:	d819      	bhi.n	80014e4 <HAL_I2C_Init+0x13c>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e59      	subs	r1, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80014be:	1c59      	adds	r1, r3, #1
 80014c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014c4:	400b      	ands	r3, r1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00a      	beq.n	80014e0 <HAL_I2C_Init+0x138>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1e59      	subs	r1, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d8:	3301      	adds	r3, #1
 80014da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014de:	e051      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 80014e0:	2304      	movs	r3, #4
 80014e2:	e04f      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d111      	bne.n	8001510 <HAL_I2C_Init+0x168>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1e58      	subs	r0, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6859      	ldr	r1, [r3, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	440b      	add	r3, r1
 80014fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001504:	2b00      	cmp	r3, #0
 8001506:	bf0c      	ite	eq
 8001508:	2301      	moveq	r3, #1
 800150a:	2300      	movne	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	e012      	b.n	8001536 <HAL_I2C_Init+0x18e>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1e58      	subs	r0, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	0099      	lsls	r1, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	fbb0 f3f3 	udiv	r3, r0, r3
 8001526:	3301      	adds	r3, #1
 8001528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_Init+0x196>
 800153a:	2301      	movs	r3, #1
 800153c:	e022      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10e      	bne.n	8001564 <HAL_I2C_Init+0x1bc>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1e58      	subs	r0, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6859      	ldr	r1, [r3, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	440b      	add	r3, r1
 8001554:	fbb0 f3f3 	udiv	r3, r0, r3
 8001558:	3301      	adds	r3, #1
 800155a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001562:	e00f      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1e58      	subs	r0, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	0099      	lsls	r1, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	fbb0 f3f3 	udiv	r3, r0, r3
 800157a:	3301      	adds	r3, #1
 800157c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001580:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	6809      	ldr	r1, [r1, #0]
 8001588:	4313      	orrs	r3, r2
 800158a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69da      	ldr	r2, [r3, #28]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6911      	ldr	r1, [r2, #16]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68d2      	ldr	r2, [r2, #12]
 80015be:	4311      	orrs	r1, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2220      	movs	r2, #32
 80015fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	000186a0 	.word	0x000186a0
 8001620:	001e847f 	.word	0x001e847f
 8001624:	003d08ff 	.word	0x003d08ff
 8001628:	431bde83 	.word	0x431bde83
 800162c:	10624dd3 	.word	0x10624dd3

08001630 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af02      	add	r7, sp, #8
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	461a      	mov	r2, r3
 800163c:	460b      	mov	r3, r1
 800163e:	817b      	strh	r3, [r7, #10]
 8001640:	4613      	mov	r3, r2
 8001642:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff fb3e 	bl	8000cc4 <HAL_GetTick>
 8001648:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b20      	cmp	r3, #32
 8001654:	f040 80e0 	bne.w	8001818 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2319      	movs	r3, #25
 800165e:	2201      	movs	r2, #1
 8001660:	4970      	ldr	r1, [pc, #448]	@ (8001824 <HAL_I2C_Master_Transmit+0x1f4>)
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f964 	bl	8001930 <I2C_WaitOnFlagUntilTimeout>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800166e:	2302      	movs	r3, #2
 8001670:	e0d3      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_I2C_Master_Transmit+0x50>
 800167c:	2302      	movs	r3, #2
 800167e:	e0cc      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	d007      	beq.n	80016a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2221      	movs	r2, #33	@ 0x21
 80016ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2210      	movs	r2, #16
 80016c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	893a      	ldrh	r2, [r7, #8]
 80016d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4a50      	ldr	r2, [pc, #320]	@ (8001828 <HAL_I2C_Master_Transmit+0x1f8>)
 80016e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016e8:	8979      	ldrh	r1, [r7, #10]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	6a3a      	ldr	r2, [r7, #32]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f89c 	bl	800182c <I2C_MasterRequestWrite>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e08d      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001714:	e066      	b.n	80017e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	6a39      	ldr	r1, [r7, #32]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 fa22 	bl	8001b64 <I2C_WaitOnTXEFlagUntilTimeout>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00d      	beq.n	8001742 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	2b04      	cmp	r3, #4
 800172c:	d107      	bne.n	800173e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800173c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06b      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175c:	b29b      	uxth	r3, r3
 800175e:	3b01      	subs	r3, #1
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176a:	3b01      	subs	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b04      	cmp	r3, #4
 800177e:	d11b      	bne.n	80017b8 <HAL_I2C_Master_Transmit+0x188>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d017      	beq.n	80017b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	781a      	ldrb	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	6a39      	ldr	r1, [r7, #32]
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fa19 	bl	8001bf4 <I2C_WaitOnBTFFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00d      	beq.n	80017e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d107      	bne.n	80017e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e01a      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d194      	bne.n	8001716 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001818:	2302      	movs	r3, #2
  }
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	00100002 	.word	0x00100002
 8001828:	ffff0000 	.word	0xffff0000

0800182c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	460b      	mov	r3, r1
 800183a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b08      	cmp	r3, #8
 8001846:	d006      	beq.n	8001856 <I2C_MasterRequestWrite+0x2a>
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d003      	beq.n	8001856 <I2C_MasterRequestWrite+0x2a>
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001854:	d108      	bne.n	8001868 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	e00b      	b.n	8001880 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186c:	2b12      	cmp	r3, #18
 800186e:	d107      	bne.n	8001880 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800187e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 f84f 	bl	8001930 <I2C_WaitOnFlagUntilTimeout>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00d      	beq.n	80018b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018a6:	d103      	bne.n	80018b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e035      	b.n	8001920 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018bc:	d108      	bne.n	80018d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018be:	897b      	ldrh	r3, [r7, #10]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80018cc:	611a      	str	r2, [r3, #16]
 80018ce:	e01b      	b.n	8001908 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018d0:	897b      	ldrh	r3, [r7, #10]
 80018d2:	11db      	asrs	r3, r3, #7
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f003 0306 	and.w	r3, r3, #6
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f063 030f 	orn	r3, r3, #15
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	490e      	ldr	r1, [pc, #56]	@ (8001928 <I2C_MasterRequestWrite+0xfc>)
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 f898 	bl	8001a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e010      	b.n	8001920 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018fe:	897b      	ldrh	r3, [r7, #10]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	4907      	ldr	r1, [pc, #28]	@ (800192c <I2C_MasterRequestWrite+0x100>)
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 f888 	bl	8001a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	00010008 	.word	0x00010008
 800192c:	00010002 	.word	0x00010002

08001930 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001940:	e048      	b.n	80019d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d044      	beq.n	80019d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800194a:	f7ff f9bb 	bl	8000cc4 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d302      	bcc.n	8001960 <I2C_WaitOnFlagUntilTimeout+0x30>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d139      	bne.n	80019d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	0c1b      	lsrs	r3, r3, #16
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d10d      	bne.n	8001986 <I2C_WaitOnFlagUntilTimeout+0x56>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	43da      	mvns	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	4013      	ands	r3, r2
 8001976:	b29b      	uxth	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	e00c      	b.n	80019a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	43da      	mvns	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	4013      	ands	r3, r2
 8001992:	b29b      	uxth	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf0c      	ite	eq
 8001998:	2301      	moveq	r3, #1
 800199a:	2300      	movne	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d116      	bne.n	80019d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2220      	movs	r2, #32
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	f043 0220 	orr.w	r2, r3, #32
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e023      	b.n	8001a1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	0c1b      	lsrs	r3, r3, #16
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d10d      	bne.n	80019fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	43da      	mvns	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	4013      	ands	r3, r2
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	2301      	moveq	r3, #1
 80019f2:	2300      	movne	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	e00c      	b.n	8001a14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	43da      	mvns	r2, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4013      	ands	r3, r2
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d093      	beq.n	8001942 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a32:	e071      	b.n	8001b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a42:	d123      	bne.n	8001a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	f043 0204 	orr.w	r2, r3, #4
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e067      	b.n	8001b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a92:	d041      	beq.n	8001b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a94:	f7ff f916 	bl	8000cc4 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d302      	bcc.n	8001aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d136      	bne.n	8001b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d10c      	bne.n	8001ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	bf14      	ite	ne
 8001ac6:	2301      	movne	r3, #1
 8001ac8:	2300      	moveq	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	e00b      	b.n	8001ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	43da      	mvns	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf14      	ite	ne
 8001ae0:	2301      	movne	r3, #1
 8001ae2:	2300      	moveq	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d016      	beq.n	8001b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	f043 0220 	orr.w	r2, r3, #32
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e021      	b.n	8001b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	0c1b      	lsrs	r3, r3, #16
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d10c      	bne.n	8001b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	43da      	mvns	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf14      	ite	ne
 8001b34:	2301      	movne	r3, #1
 8001b36:	2300      	moveq	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	e00b      	b.n	8001b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4013      	ands	r3, r2
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	bf14      	ite	ne
 8001b4e:	2301      	movne	r3, #1
 8001b50:	2300      	moveq	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f47f af6d 	bne.w	8001a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b70:	e034      	b.n	8001bdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f886 	bl	8001c84 <I2C_IsAcknowledgeFailed>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e034      	b.n	8001bec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d028      	beq.n	8001bdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8a:	f7ff f89b 	bl	8000cc4 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d302      	bcc.n	8001ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11d      	bne.n	8001bdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001baa:	2b80      	cmp	r3, #128	@ 0x80
 8001bac:	d016      	beq.n	8001bdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	f043 0220 	orr.w	r2, r3, #32
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e007      	b.n	8001bec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be6:	2b80      	cmp	r3, #128	@ 0x80
 8001be8:	d1c3      	bne.n	8001b72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c00:	e034      	b.n	8001c6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f83e 	bl	8001c84 <I2C_IsAcknowledgeFailed>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e034      	b.n	8001c7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d028      	beq.n	8001c6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c1a:	f7ff f853 	bl	8000cc4 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d302      	bcc.n	8001c30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d11d      	bne.n	8001c6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d016      	beq.n	8001c6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c58:	f043 0220 	orr.w	r2, r3, #32
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e007      	b.n	8001c7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d1c3      	bne.n	8001c02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c9a:	d11b      	bne.n	8001cd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ca4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	f043 0204 	orr.w	r2, r3, #4
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e272      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8087 	beq.w	8001e0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d00:	4b92      	ldr	r3, [pc, #584]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d00c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d0c:	4b8f      	ldr	r3, [pc, #572]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d112      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5e>
 8001d18:	4b8c      	ldr	r3, [pc, #560]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d24:	d10b      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d26:	4b89      	ldr	r3, [pc, #548]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d06c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x12c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d168      	bne.n	8001e0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e24c      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x76>
 8001d48:	4b80      	ldr	r3, [pc, #512]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a7f      	ldr	r2, [pc, #508]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e02e      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x98>
 8001d5e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7a      	ldr	r2, [pc, #488]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b78      	ldr	r3, [pc, #480]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a77      	ldr	r2, [pc, #476]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0xbc>
 8001d82:	4b72      	ldr	r3, [pc, #456]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a71      	ldr	r2, [pc, #452]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b6f      	ldr	r3, [pc, #444]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a6e      	ldr	r2, [pc, #440]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d9c:	4b6b      	ldr	r3, [pc, #428]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6a      	ldr	r2, [pc, #424]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b68      	ldr	r3, [pc, #416]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a67      	ldr	r2, [pc, #412]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe ff82 	bl	8000cc4 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7fe ff7e 	bl	8000cc4 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	@ 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e200      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xe4>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7fe ff6e 	bl	8000cc4 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7fe ff6a 	bl	8000cc4 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	@ 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e1ec      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	4b53      	ldr	r3, [pc, #332]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x10c>
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d063      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e26:	4b49      	ldr	r3, [pc, #292]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d11c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
 8001e32:	4b46      	ldr	r3, [pc, #280]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	4b43      	ldr	r3, [pc, #268]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x176>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e1c0      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e56:	4b3d      	ldr	r3, [pc, #244]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4939      	ldr	r1, [pc, #228]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	e03a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e74:	4b36      	ldr	r3, [pc, #216]	@ (8001f50 <HAL_RCC_OscConfig+0x270>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7fe ff23 	bl	8000cc4 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e82:	f7fe ff1f 	bl	8000cc4 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e1a1      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	4b2d      	ldr	r3, [pc, #180]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4927      	ldr	r1, [pc, #156]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb6:	4b26      	ldr	r3, [pc, #152]	@ (8001f50 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7fe ff02 	bl	8000cc4 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7fe fefe 	bl	8000cc4 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e180      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d03a      	beq.n	8001f64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d019      	beq.n	8001f2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	4b17      	ldr	r3, [pc, #92]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efc:	f7fe fee2 	bl	8000cc4 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f04:	f7fe fede 	bl	8000cc4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e160      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f000 face 	bl	80024c4 <RCC_Delay>
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f30:	f7fe fec8 	bl	8000cc4 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f36:	e00f      	b.n	8001f58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f38:	f7fe fec4 	bl	8000cc4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d908      	bls.n	8001f58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e146      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	42420000 	.word	0x42420000
 8001f54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f58:	4b92      	ldr	r3, [pc, #584]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1e9      	bne.n	8001f38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80a6 	beq.w	80020be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f76:	4b8b      	ldr	r3, [pc, #556]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10d      	bne.n	8001f9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	4b88      	ldr	r3, [pc, #544]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4a87      	ldr	r2, [pc, #540]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	61d3      	str	r3, [r2, #28]
 8001f8e:	4b85      	ldr	r3, [pc, #532]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b82      	ldr	r3, [pc, #520]	@ (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d118      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4b7f      	ldr	r3, [pc, #508]	@ (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a7e      	ldr	r2, [pc, #504]	@ (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe fe85 	bl	8000cc4 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7fe fe81 	bl	8000cc4 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b64      	cmp	r3, #100	@ 0x64
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e103      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	4b75      	ldr	r3, [pc, #468]	@ (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x312>
 8001fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a6e      	ldr	r2, [pc, #440]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	e02d      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x334>
 8001ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a69      	ldr	r2, [pc, #420]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6213      	str	r3, [r2, #32]
 8002006:	4b67      	ldr	r3, [pc, #412]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a66      	ldr	r2, [pc, #408]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	f023 0304 	bic.w	r3, r3, #4
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	e01c      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d10c      	bne.n	8002036 <HAL_RCC_OscConfig+0x356>
 800201c:	4b61      	ldr	r3, [pc, #388]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a60      	ldr	r2, [pc, #384]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	4b5e      	ldr	r3, [pc, #376]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a5d      	ldr	r2, [pc, #372]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6213      	str	r3, [r2, #32]
 8002034:	e00b      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002036:	4b5b      	ldr	r3, [pc, #364]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a5a      	ldr	r2, [pc, #360]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6213      	str	r3, [r2, #32]
 8002042:	4b58      	ldr	r3, [pc, #352]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a57      	ldr	r2, [pc, #348]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d015      	beq.n	8002082 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7fe fe35 	bl	8000cc4 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7fe fe31 	bl	8000cc4 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0b1      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	4b4b      	ldr	r3, [pc, #300]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ee      	beq.n	800205e <HAL_RCC_OscConfig+0x37e>
 8002080:	e014      	b.n	80020ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7fe fe1f 	bl	8000cc4 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7fe fe1b 	bl	8000cc4 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e09b      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	4b40      	ldr	r3, [pc, #256]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ee      	bne.n	800208a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b2:	4b3c      	ldr	r3, [pc, #240]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a3b      	ldr	r2, [pc, #236]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8087 	beq.w	80021d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c8:	4b36      	ldr	r3, [pc, #216]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d061      	beq.n	8002198 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d146      	bne.n	800216a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020dc:	4b33      	ldr	r3, [pc, #204]	@ (80021ac <HAL_RCC_OscConfig+0x4cc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe fdef 	bl	8000cc4 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe fdeb 	bl	8000cc4 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e06d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fc:	4b29      	ldr	r3, [pc, #164]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002110:	d108      	bne.n	8002124 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002112:	4b24      	ldr	r3, [pc, #144]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	4921      	ldr	r1, [pc, #132]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002124:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a19      	ldr	r1, [r3, #32]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	430b      	orrs	r3, r1
 8002136:	491b      	ldr	r1, [pc, #108]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800213c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <HAL_RCC_OscConfig+0x4cc>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7fe fdbf 	bl	8000cc4 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214a:	f7fe fdbb 	bl	8000cc4 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e03d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215c:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x46a>
 8002168:	e035      	b.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <HAL_RCC_OscConfig+0x4cc>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fda8 	bl	8000cc4 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002178:	f7fe fda4 	bl	8000cc4 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e026      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218a:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x498>
 8002196:	e01e      	b.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e019      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021b0:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <HAL_RCC_OscConfig+0x500>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000

080021e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0d0      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b6a      	ldr	r3, [pc, #424]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d910      	bls.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b67      	ldr	r3, [pc, #412]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	4965      	ldr	r1, [pc, #404]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a58      	ldr	r2, [pc, #352]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800224a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a52      	ldr	r2, [pc, #328]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002262:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d040      	beq.n	8002304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e073      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06b      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b39      	ldr	r3, [pc, #228]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4936      	ldr	r1, [pc, #216]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7fe fcf6 	bl	8000cc4 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe fcf2 	bl	8000cc4 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e053      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2d      	ldr	r3, [pc, #180]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b27      	ldr	r3, [pc, #156]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d210      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 0207 	bic.w	r2, r3, #7
 800231a:	4922      	ldr	r1, [pc, #136]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800235e:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	@ (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	@ (80023b0 <HAL_RCC_ClockConfig+0x1cc>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fc54 	bl	8000c40 <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40022000 	.word	0x40022000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	0800497c 	.word	0x0800497c
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023d2:	4b1e      	ldr	r3, [pc, #120]	@ (800244c <HAL_RCC_GetSysClockFreq+0x94>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d002      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x30>
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0x36>
 80023e6:	e027      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e8:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ea:	613b      	str	r3, [r7, #16]
      break;
 80023ec:	e027      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0c9b      	lsrs	r3, r3, #18
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	4a17      	ldr	r2, [pc, #92]	@ (8002454 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023f8:	5cd3      	ldrb	r3, [r2, r3]
 80023fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d010      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002406:	4b11      	ldr	r3, [pc, #68]	@ (800244c <HAL_RCC_GetSysClockFreq+0x94>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	0c5b      	lsrs	r3, r3, #17
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	4a11      	ldr	r2, [pc, #68]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a0d      	ldr	r2, [pc, #52]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 800241a:	fb03 f202 	mul.w	r2, r3, r2
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e004      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a0c      	ldr	r2, [pc, #48]	@ (800245c <HAL_RCC_GetSysClockFreq+0xa4>)
 800242c:	fb02 f303 	mul.w	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	613b      	str	r3, [r7, #16]
      break;
 8002436:	e002      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 800243a:	613b      	str	r3, [r7, #16]
      break;
 800243c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243e:	693b      	ldr	r3, [r7, #16]
}
 8002440:	4618      	mov	r0, r3
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	007a1200 	.word	0x007a1200
 8002454:	08004994 	.word	0x08004994
 8002458:	080049a4 	.word	0x080049a4
 800245c:	003d0900 	.word	0x003d0900

08002460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002464:	4b02      	ldr	r3, [pc, #8]	@ (8002470 <HAL_RCC_GetHCLKFreq+0x10>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	20000000 	.word	0x20000000

08002474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002478:	f7ff fff2 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4903      	ldr	r1, [pc, #12]	@ (8002498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	0800498c 	.word	0x0800498c

0800249c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024a0:	f7ff ffde 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b05      	ldr	r3, [pc, #20]	@ (80024bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	0adb      	lsrs	r3, r3, #11
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4903      	ldr	r1, [pc, #12]	@ (80024c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	0800498c 	.word	0x0800498c

080024c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024cc:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <RCC_Delay+0x34>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0a      	ldr	r2, [pc, #40]	@ (80024fc <RCC_Delay+0x38>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0a5b      	lsrs	r3, r3, #9
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024e0:	bf00      	nop
  }
  while (Delay --);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1e5a      	subs	r2, r3, #1
 80024e6:	60fa      	str	r2, [r7, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f9      	bne.n	80024e0 <RCC_Delay+0x1c>
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	20000000 	.word	0x20000000
 80024fc:	10624dd3 	.word	0x10624dd3

08002500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e041      	b.n	8002596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fa86 	bl	8000a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3304      	adds	r3, #4
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f000 fbe2 	bl	8002d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e041      	b.n	8002634 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d106      	bne.n	80025ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f839 	bl	800263c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3304      	adds	r3, #4
 80025da:	4619      	mov	r1, r3
 80025dc:	4610      	mov	r0, r2
 80025de:	f000 fb93 	bl	8002d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
	...

08002650 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_TIM_PWM_Start+0x24>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e022      	b.n	80026ba <HAL_TIM_PWM_Start+0x6a>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b04      	cmp	r3, #4
 8002678:	d109      	bne.n	800268e <HAL_TIM_PWM_Start+0x3e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	e015      	b.n	80026ba <HAL_TIM_PWM_Start+0x6a>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b08      	cmp	r3, #8
 8002692:	d109      	bne.n	80026a8 <HAL_TIM_PWM_Start+0x58>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e008      	b.n	80026ba <HAL_TIM_PWM_Start+0x6a>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e05e      	b.n	8002780 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d104      	bne.n	80026d2 <HAL_TIM_PWM_Start+0x82>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026d0:	e013      	b.n	80026fa <HAL_TIM_PWM_Start+0xaa>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d104      	bne.n	80026e2 <HAL_TIM_PWM_Start+0x92>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026e0:	e00b      	b.n	80026fa <HAL_TIM_PWM_Start+0xaa>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d104      	bne.n	80026f2 <HAL_TIM_PWM_Start+0xa2>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026f0:	e003      	b.n	80026fa <HAL_TIM_PWM_Start+0xaa>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2201      	movs	r2, #1
 8002700:	6839      	ldr	r1, [r7, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fd80 	bl	8003208 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1e      	ldr	r2, [pc, #120]	@ (8002788 <HAL_TIM_PWM_Start+0x138>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d107      	bne.n	8002722 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002720:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a18      	ldr	r2, [pc, #96]	@ (8002788 <HAL_TIM_PWM_Start+0x138>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d00e      	beq.n	800274a <HAL_TIM_PWM_Start+0xfa>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002734:	d009      	beq.n	800274a <HAL_TIM_PWM_Start+0xfa>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a14      	ldr	r2, [pc, #80]	@ (800278c <HAL_TIM_PWM_Start+0x13c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d004      	beq.n	800274a <HAL_TIM_PWM_Start+0xfa>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a12      	ldr	r2, [pc, #72]	@ (8002790 <HAL_TIM_PWM_Start+0x140>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d111      	bne.n	800276e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b06      	cmp	r3, #6
 800275a:	d010      	beq.n	800277e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276c:	e007      	b.n	800277e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0201 	orr.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40000400 	.word	0x40000400
 8002790:	40000800 	.word	0x40000800

08002794 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e093      	b.n	80028d0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d106      	bne.n	80027c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fe f8fb 	bl	80009b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2202      	movs	r2, #2
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027d8:	f023 0307 	bic.w	r3, r3, #7
 80027dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3304      	adds	r3, #4
 80027e6:	4619      	mov	r1, r3
 80027e8:	4610      	mov	r0, r2
 80027ea:	f000 fa8d 	bl	8002d08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	4313      	orrs	r3, r2
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002834:	f023 030c 	bic.w	r3, r3, #12
 8002838:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002840:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	4313      	orrs	r3, r2
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	011a      	lsls	r2, r3, #4
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	031b      	lsls	r3, r3, #12
 8002864:	4313      	orrs	r3, r2
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002872:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	4313      	orrs	r3, r2
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80028f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002900:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d110      	bne.n	800292a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d102      	bne.n	8002914 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800290e:	7b7b      	ldrb	r3, [r7, #13]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d001      	beq.n	8002918 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e069      	b.n	80029ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002928:	e031      	b.n	800298e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d110      	bne.n	8002952 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002930:	7bbb      	ldrb	r3, [r7, #14]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d102      	bne.n	800293c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002936:	7b3b      	ldrb	r3, [r7, #12]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d001      	beq.n	8002940 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e055      	b.n	80029ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002950:	e01d      	b.n	800298e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d108      	bne.n	800296a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002958:	7bbb      	ldrb	r3, [r7, #14]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d105      	bne.n	800296a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800295e:	7b7b      	ldrb	r3, [r7, #13]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d102      	bne.n	800296a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002964:	7b3b      	ldrb	r3, [r7, #12]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d001      	beq.n	800296e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e03e      	b.n	80029ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2202      	movs	r2, #2
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2202      	movs	r2, #2
 8002982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2202      	movs	r2, #2
 800298a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_TIM_Encoder_Start+0xc4>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b04      	cmp	r3, #4
 8002998:	d008      	beq.n	80029ac <HAL_TIM_Encoder_Start+0xd4>
 800299a:	e00f      	b.n	80029bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2201      	movs	r2, #1
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fc2f 	bl	8003208 <TIM_CCxChannelCmd>
      break;
 80029aa:	e016      	b.n	80029da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2201      	movs	r2, #1
 80029b2:	2104      	movs	r1, #4
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fc27 	bl	8003208 <TIM_CCxChannelCmd>
      break;
 80029ba:	e00e      	b.n	80029da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2201      	movs	r2, #1
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fc1f 	bl	8003208 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2201      	movs	r2, #1
 80029d0:	2104      	movs	r1, #4
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fc18 	bl	8003208 <TIM_CCxChannelCmd>
      break;
 80029d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e0ae      	b.n	8002b70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b0c      	cmp	r3, #12
 8002a1e:	f200 809f 	bhi.w	8002b60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a22:	a201      	add	r2, pc, #4	@ (adr r2, 8002a28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a28:	08002a5d 	.word	0x08002a5d
 8002a2c:	08002b61 	.word	0x08002b61
 8002a30:	08002b61 	.word	0x08002b61
 8002a34:	08002b61 	.word	0x08002b61
 8002a38:	08002a9d 	.word	0x08002a9d
 8002a3c:	08002b61 	.word	0x08002b61
 8002a40:	08002b61 	.word	0x08002b61
 8002a44:	08002b61 	.word	0x08002b61
 8002a48:	08002adf 	.word	0x08002adf
 8002a4c:	08002b61 	.word	0x08002b61
 8002a50:	08002b61 	.word	0x08002b61
 8002a54:	08002b61 	.word	0x08002b61
 8002a58:	08002b1f 	.word	0x08002b1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f9b2 	bl	8002dcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0208 	orr.w	r2, r2, #8
 8002a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0204 	bic.w	r2, r2, #4
 8002a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6999      	ldr	r1, [r3, #24]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	619a      	str	r2, [r3, #24]
      break;
 8002a9a:	e064      	b.n	8002b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f9f8 	bl	8002e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6999      	ldr	r1, [r3, #24]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	021a      	lsls	r2, r3, #8
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	619a      	str	r2, [r3, #24]
      break;
 8002adc:	e043      	b.n	8002b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fa41 	bl	8002f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0208 	orr.w	r2, r2, #8
 8002af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0204 	bic.w	r2, r2, #4
 8002b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69d9      	ldr	r1, [r3, #28]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	61da      	str	r2, [r3, #28]
      break;
 8002b1c:	e023      	b.n	8002b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fa8b 	bl	8003040 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69da      	ldr	r2, [r3, #28]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69d9      	ldr	r1, [r3, #28]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	021a      	lsls	r2, r3, #8
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	61da      	str	r2, [r3, #28]
      break;
 8002b5e:	e002      	b.n	8002b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	75fb      	strb	r3, [r7, #23]
      break;
 8002b64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_TIM_ConfigClockSource+0x1c>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e0b4      	b.n	8002cfe <HAL_TIM_ConfigClockSource+0x186>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bcc:	d03e      	beq.n	8002c4c <HAL_TIM_ConfigClockSource+0xd4>
 8002bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bd2:	f200 8087 	bhi.w	8002ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bda:	f000 8086 	beq.w	8002cea <HAL_TIM_ConfigClockSource+0x172>
 8002bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002be2:	d87f      	bhi.n	8002ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8002be4:	2b70      	cmp	r3, #112	@ 0x70
 8002be6:	d01a      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0xa6>
 8002be8:	2b70      	cmp	r3, #112	@ 0x70
 8002bea:	d87b      	bhi.n	8002ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bec:	2b60      	cmp	r3, #96	@ 0x60
 8002bee:	d050      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0x11a>
 8002bf0:	2b60      	cmp	r3, #96	@ 0x60
 8002bf2:	d877      	bhi.n	8002ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf4:	2b50      	cmp	r3, #80	@ 0x50
 8002bf6:	d03c      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0xfa>
 8002bf8:	2b50      	cmp	r3, #80	@ 0x50
 8002bfa:	d873      	bhi.n	8002ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bfc:	2b40      	cmp	r3, #64	@ 0x40
 8002bfe:	d058      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0x13a>
 8002c00:	2b40      	cmp	r3, #64	@ 0x40
 8002c02:	d86f      	bhi.n	8002ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c04:	2b30      	cmp	r3, #48	@ 0x30
 8002c06:	d064      	beq.n	8002cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c08:	2b30      	cmp	r3, #48	@ 0x30
 8002c0a:	d86b      	bhi.n	8002ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d060      	beq.n	8002cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d867      	bhi.n	8002ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d05c      	beq.n	8002cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c18:	2b10      	cmp	r3, #16
 8002c1a:	d05a      	beq.n	8002cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c1c:	e062      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c2e:	f000 facc 	bl	80031ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	609a      	str	r2, [r3, #8]
      break;
 8002c4a:	e04f      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c5c:	f000 fab5 	bl	80031ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c6e:	609a      	str	r2, [r3, #8]
      break;
 8002c70:	e03c      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f000 fa2c 	bl	80030dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2150      	movs	r1, #80	@ 0x50
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fa83 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002c90:	e02c      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f000 fa4a 	bl	8003138 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2160      	movs	r1, #96	@ 0x60
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fa73 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002cb0:	e01c      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f000 fa0c 	bl	80030dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2140      	movs	r1, #64	@ 0x40
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fa63 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002cd0:	e00c      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4610      	mov	r0, r2
 8002cde:	f000 fa5a 	bl	8003196 <TIM_ITRx_SetConfig>
      break;
 8002ce2:	e003      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce8:	e000      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a29      	ldr	r2, [pc, #164]	@ (8002dc0 <TIM_Base_SetConfig+0xb8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00b      	beq.n	8002d38 <TIM_Base_SetConfig+0x30>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d26:	d007      	beq.n	8002d38 <TIM_Base_SetConfig+0x30>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a26      	ldr	r2, [pc, #152]	@ (8002dc4 <TIM_Base_SetConfig+0xbc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d003      	beq.n	8002d38 <TIM_Base_SetConfig+0x30>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a25      	ldr	r2, [pc, #148]	@ (8002dc8 <TIM_Base_SetConfig+0xc0>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d108      	bne.n	8002d4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc0 <TIM_Base_SetConfig+0xb8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00b      	beq.n	8002d6a <TIM_Base_SetConfig+0x62>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d58:	d007      	beq.n	8002d6a <TIM_Base_SetConfig+0x62>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a19      	ldr	r2, [pc, #100]	@ (8002dc4 <TIM_Base_SetConfig+0xbc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d003      	beq.n	8002d6a <TIM_Base_SetConfig+0x62>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a18      	ldr	r2, [pc, #96]	@ (8002dc8 <TIM_Base_SetConfig+0xc0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d108      	bne.n	8002d7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a07      	ldr	r2, [pc, #28]	@ (8002dc0 <TIM_Base_SetConfig+0xb8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d103      	bne.n	8002db0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	615a      	str	r2, [r3, #20]
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	40000800 	.word	0x40000800

08002dcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f023 0201 	bic.w	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f023 0302 	bic.w	r3, r3, #2
 8002e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a1c      	ldr	r2, [pc, #112]	@ (8002e94 <TIM_OC1_SetConfig+0xc8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d10c      	bne.n	8002e42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f023 0308 	bic.w	r3, r3, #8
 8002e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f023 0304 	bic.w	r3, r3, #4
 8002e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a13      	ldr	r2, [pc, #76]	@ (8002e94 <TIM_OC1_SetConfig+0xc8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d111      	bne.n	8002e6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	621a      	str	r2, [r3, #32]
}
 8002e88:	bf00      	nop
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40012c00 	.word	0x40012c00

08002e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f023 0210 	bic.w	r2, r3, #16
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	021b      	lsls	r3, r3, #8
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f023 0320 	bic.w	r3, r3, #32
 8002ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f68 <TIM_OC2_SetConfig+0xd0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d10d      	bne.n	8002f14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a14      	ldr	r2, [pc, #80]	@ (8002f68 <TIM_OC2_SetConfig+0xd0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d113      	bne.n	8002f44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	621a      	str	r2, [r3, #32]
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	40012c00 	.word	0x40012c00

08002f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800303c <TIM_OC3_SetConfig+0xd0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d10d      	bne.n	8002fe6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a14      	ldr	r2, [pc, #80]	@ (800303c <TIM_OC3_SetConfig+0xd0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d113      	bne.n	8003016 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	621a      	str	r2, [r3, #32]
}
 8003030:	bf00      	nop
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40012c00 	.word	0x40012c00

08003040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800306e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800308a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	031b      	lsls	r3, r3, #12
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a0f      	ldr	r2, [pc, #60]	@ (80030d8 <TIM_OC4_SetConfig+0x98>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d109      	bne.n	80030b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	019b      	lsls	r3, r3, #6
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	621a      	str	r2, [r3, #32]
}
 80030ce:	bf00      	nop
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	40012c00 	.word	0x40012c00

080030dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	f023 0201 	bic.w	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f023 030a 	bic.w	r3, r3, #10
 8003118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	621a      	str	r2, [r3, #32]
}
 800312e:	bf00      	nop
 8003130:	371c      	adds	r7, #28
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f023 0210 	bic.w	r2, r3, #16
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	031b      	lsls	r3, r3, #12
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003174:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	621a      	str	r2, [r3, #32]
}
 800318c:	bf00      	nop
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003196:	b480      	push	{r7}
 8003198:	b085      	sub	sp, #20
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f043 0307 	orr.w	r3, r3, #7
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	609a      	str	r2, [r3, #8]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b087      	sub	sp, #28
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	021a      	lsls	r2, r3, #8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	609a      	str	r2, [r3, #8]
}
 80031fe:	bf00      	nop
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	2201      	movs	r2, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1a      	ldr	r2, [r3, #32]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	43db      	mvns	r3, r3
 800322a:	401a      	ands	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1a      	ldr	r2, [r3, #32]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003264:	2302      	movs	r3, #2
 8003266:	e046      	b.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800328e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a16      	ldr	r2, [pc, #88]	@ (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b4:	d009      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a12      	ldr	r2, [pc, #72]	@ (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a10      	ldr	r2, [pc, #64]	@ (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10c      	bne.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800

0800330c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e042      	b.n	80033a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fd fbf6 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	@ 0x24
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800334e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fdc5 	bl	8003ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695a      	ldr	r2, [r3, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	@ 0x28
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d16d      	bne.n	80034a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_UART_Transmit+0x2c>
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e066      	b.n	80034aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2221      	movs	r2, #33	@ 0x21
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ea:	f7fd fc6b 	bl	8000cc4 <HAL_GetTick>
 80033ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	88fa      	ldrh	r2, [r7, #6]
 80033fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003404:	d108      	bne.n	8003418 <HAL_UART_Transmit+0x6c>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d104      	bne.n	8003418 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	e003      	b.n	8003420 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800341c:	2300      	movs	r3, #0
 800341e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003420:	e02a      	b.n	8003478 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2200      	movs	r2, #0
 800342a:	2180      	movs	r1, #128	@ 0x80
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 fb14 	bl	8003a5a <UART_WaitOnFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e036      	b.n	80034aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10b      	bne.n	800345a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003450:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	3302      	adds	r3, #2
 8003456:	61bb      	str	r3, [r7, #24]
 8003458:	e007      	b.n	800346a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	781a      	ldrb	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	3301      	adds	r3, #1
 8003468:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1cf      	bne.n	8003422 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	2140      	movs	r1, #64	@ 0x40
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fae4 	bl	8003a5a <UART_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e006      	b.n	80034aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e000      	b.n	80034aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80034a8:	2302      	movs	r3, #2
  }
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3720      	adds	r7, #32
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	4613      	mov	r3, r2
 80034be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d112      	bne.n	80034f2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_UART_Receive_IT+0x26>
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e00b      	b.n	80034f4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	461a      	mov	r2, r3
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fb24 	bl	8003b36 <UART_Start_Receive_IT>
 80034ee:	4603      	mov	r3, r0
 80034f0:	e000      	b.n	80034f4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
  }
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b0ba      	sub	sp, #232	@ 0xe8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003522:	2300      	movs	r3, #0
 8003524:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003528:	2300      	movs	r3, #0
 800352a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800352e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800353a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10f      	bne.n	8003562 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_UART_IRQHandler+0x66>
 800354e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fc01 	bl	8003d62 <UART_Receive_IT>
      return;
 8003560:	e25b      	b.n	8003a1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80de 	beq.w	8003728 <HAL_UART_IRQHandler+0x22c>
 800356c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d106      	bne.n	8003586 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800357c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80d1 	beq.w	8003728 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <HAL_UART_IRQHandler+0xae>
 8003592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	f043 0201 	orr.w	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00b      	beq.n	80035ce <HAL_UART_IRQHandler+0xd2>
 80035b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c6:	f043 0202 	orr.w	r2, r3, #2
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00b      	beq.n	80035f2 <HAL_UART_IRQHandler+0xf6>
 80035da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	f043 0204 	orr.w	r2, r3, #4
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d011      	beq.n	8003622 <HAL_UART_IRQHandler+0x126>
 80035fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	d105      	bne.n	8003616 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800360a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361a:	f043 0208 	orr.w	r2, r3, #8
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 81f2 	beq.w	8003a10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800362c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_UART_IRQHandler+0x14e>
 8003638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fb8c 	bl	8003d62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d103      	bne.n	8003676 <HAL_UART_IRQHandler+0x17a>
 800366e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d04f      	beq.n	8003716 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fa96 	bl	8003ba8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d041      	beq.n	800370e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3314      	adds	r3, #20
 8003690:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80036a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3314      	adds	r3, #20
 80036b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1d9      	bne.n	800368a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d013      	beq.n	8003706 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e2:	4a7e      	ldr	r2, [pc, #504]	@ (80038dc <HAL_UART_IRQHandler+0x3e0>)
 80036e4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fd fc60 	bl	8000fb0 <HAL_DMA_Abort_IT>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d016      	beq.n	8003724 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003700:	4610      	mov	r0, r2
 8003702:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003704:	e00e      	b.n	8003724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f993 	bl	8003a32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370c:	e00a      	b.n	8003724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f98f 	bl	8003a32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003714:	e006      	b.n	8003724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f98b 	bl	8003a32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003722:	e175      	b.n	8003a10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003724:	bf00      	nop
    return;
 8003726:	e173      	b.n	8003a10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372c:	2b01      	cmp	r3, #1
 800372e:	f040 814f 	bne.w	80039d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8148 	beq.w	80039d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8141 	beq.w	80039d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80b6 	beq.w	80038e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003780:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8145 	beq.w	8003a14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800378e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003792:	429a      	cmp	r2, r3
 8003794:	f080 813e 	bcs.w	8003a14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800379e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	f000 8088 	beq.w	80038bc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037ba:	e853 3f00 	ldrex	r3, [r3]
 80037be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	330c      	adds	r3, #12
 80037d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037d8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1d9      	bne.n	80037ac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3314      	adds	r3, #20
 80037fe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003808:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3314      	adds	r3, #20
 8003818:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800381c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003820:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003824:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800382e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e1      	bne.n	80037f8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3314      	adds	r3, #20
 800383a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003844:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003846:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800384a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3314      	adds	r3, #20
 8003854:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003858:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800385a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800385e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003860:	e841 2300 	strex	r3, r2, [r1]
 8003864:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003866:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e3      	bne.n	8003834 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	330c      	adds	r3, #12
 8003880:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800388a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800388c:	f023 0310 	bic.w	r3, r3, #16
 8003890:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	330c      	adds	r3, #12
 800389a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800389e:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038a0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e3      	bne.n	800387a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fd fb3f 	bl	8000f3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4619      	mov	r1, r3
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f8b6 	bl	8003a44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038d8:	e09c      	b.n	8003a14 <HAL_UART_IRQHandler+0x518>
 80038da:	bf00      	nop
 80038dc:	08003c6d 	.word	0x08003c6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 808e 	beq.w	8003a18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80038fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 8089 	beq.w	8003a18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	330c      	adds	r3, #12
 800390c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003918:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800391c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	330c      	adds	r3, #12
 8003926:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800392a:	647a      	str	r2, [r7, #68]	@ 0x44
 800392c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003930:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e3      	bne.n	8003906 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3314      	adds	r3, #20
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	e853 3f00 	ldrex	r3, [r3]
 800394c:	623b      	str	r3, [r7, #32]
   return(result);
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3314      	adds	r3, #20
 800395e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003962:	633a      	str	r2, [r7, #48]	@ 0x30
 8003964:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800396a:	e841 2300 	strex	r3, r2, [r1]
 800396e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1e3      	bne.n	800393e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	e853 3f00 	ldrex	r3, [r3]
 8003992:	60fb      	str	r3, [r7, #12]
   return(result);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0310 	bic.w	r3, r3, #16
 800399a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039a8:	61fa      	str	r2, [r7, #28]
 80039aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	69b9      	ldr	r1, [r7, #24]
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	617b      	str	r3, [r7, #20]
   return(result);
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e3      	bne.n	8003984 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039c6:	4619      	mov	r1, r3
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f83b 	bl	8003a44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039ce:	e023      	b.n	8003a18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d009      	beq.n	80039f0 <HAL_UART_IRQHandler+0x4f4>
 80039dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f953 	bl	8003c94 <UART_Transmit_IT>
    return;
 80039ee:	e014      	b.n	8003a1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00e      	beq.n	8003a1a <HAL_UART_IRQHandler+0x51e>
 80039fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f992 	bl	8003d32 <UART_EndTransmit_IT>
    return;
 8003a0e:	e004      	b.n	8003a1a <HAL_UART_IRQHandler+0x51e>
    return;
 8003a10:	bf00      	nop
 8003a12:	e002      	b.n	8003a1a <HAL_UART_IRQHandler+0x51e>
      return;
 8003a14:	bf00      	nop
 8003a16:	e000      	b.n	8003a1a <HAL_UART_IRQHandler+0x51e>
      return;
 8003a18:	bf00      	nop
  }
}
 8003a1a:	37e8      	adds	r7, #232	@ 0xe8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b090      	sub	sp, #64	@ 0x40
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	4613      	mov	r3, r2
 8003a68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6a:	e050      	b.n	8003b0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d04c      	beq.n	8003b0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d007      	beq.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a7a:	f7fd f923 	bl	8000cc4 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d241      	bcs.n	8003b0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	330c      	adds	r3, #12
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003aaa:	637a      	str	r2, [r7, #52]	@ 0x34
 8003aac:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e5      	bne.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3314      	adds	r3, #20
 8003adc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ade:	623a      	str	r2, [r7, #32]
 8003ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	69f9      	ldr	r1, [r7, #28]
 8003ae4:	6a3a      	ldr	r2, [r7, #32]
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e5      	bne.n	8003abe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e00f      	b.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4013      	ands	r3, r2
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	bf0c      	ite	eq
 8003b1e:	2301      	moveq	r3, #1
 8003b20:	2300      	movne	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d09f      	beq.n	8003a6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3740      	adds	r7, #64	@ 0x40
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	4613      	mov	r3, r2
 8003b42:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	88fa      	ldrh	r2, [r7, #6]
 8003b4e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2222      	movs	r2, #34	@ 0x22
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b7a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0220 	orr.w	r2, r2, #32
 8003b9a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b095      	sub	sp, #84	@ 0x54
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	330c      	adds	r3, #12
 8003bce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bd0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e5      	bne.n	8003bb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3314      	adds	r3, #20
 8003bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3314      	adds	r3, #20
 8003c02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e5      	bne.n	8003be4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d119      	bne.n	8003c54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	330c      	adds	r3, #12
 8003c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f023 0310 	bic.w	r3, r3, #16
 8003c36:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c40:	61ba      	str	r2, [r7, #24]
 8003c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6979      	ldr	r1, [r7, #20]
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e5      	bne.n	8003c20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c62:	bf00      	nop
 8003c64:	3754      	adds	r7, #84	@ 0x54
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7ff fed3 	bl	8003a32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b21      	cmp	r3, #33	@ 0x21
 8003ca6:	d13e      	bne.n	8003d26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb0:	d114      	bne.n	8003cdc <UART_Transmit_IT+0x48>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d110      	bne.n	8003cdc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	1c9a      	adds	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	621a      	str	r2, [r3, #32]
 8003cda:	e008      	b.n	8003cee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	1c59      	adds	r1, r3, #1
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6211      	str	r1, [r2, #32]
 8003ce6:	781a      	ldrb	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10f      	bne.n	8003d22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e000      	b.n	8003d28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
  }
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff fe64 	bl	8003a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b08c      	sub	sp, #48	@ 0x30
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b22      	cmp	r3, #34	@ 0x22
 8003d74:	f040 80ae 	bne.w	8003ed4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d80:	d117      	bne.n	8003db2 <UART_Receive_IT+0x50>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d113      	bne.n	8003db2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d92:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003daa:	1c9a      	adds	r2, r3, #2
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	629a      	str	r2, [r3, #40]	@ 0x28
 8003db0:	e026      	b.n	8003e00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dc4:	d007      	beq.n	8003dd6 <UART_Receive_IT+0x74>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10a      	bne.n	8003de4 <UART_Receive_IT+0x82>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	e008      	b.n	8003df6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d15d      	bne.n	8003ed0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0220 	bic.w	r2, r2, #32
 8003e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d135      	bne.n	8003ec6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f023 0310 	bic.w	r3, r3, #16
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e80:	623a      	str	r2, [r7, #32]
 8003e82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	69f9      	ldr	r1, [r7, #28]
 8003e86:	6a3a      	ldr	r2, [r7, #32]
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e5      	bne.n	8003e60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d10a      	bne.n	8003eb8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff fdc0 	bl	8003a44 <HAL_UARTEx_RxEventCallback>
 8003ec4:	e002      	b.n	8003ecc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fc faee 	bl	80004a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e002      	b.n	8003ed6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	e000      	b.n	8003ed6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ed4:	2302      	movs	r3, #2
  }
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3730      	adds	r7, #48	@ 0x30
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003f1a:	f023 030c 	bic.w	r3, r3, #12
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	430b      	orrs	r3, r1
 8003f26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff4 <UART_SetConfig+0x114>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d103      	bne.n	8003f50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f48:	f7fe faa8 	bl	800249c <HAL_RCC_GetPCLK2Freq>
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	e002      	b.n	8003f56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f50:	f7fe fa90 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8003f54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009a      	lsls	r2, r3, #2
 8003f60:	441a      	add	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6c:	4a22      	ldr	r2, [pc, #136]	@ (8003ff8 <UART_SetConfig+0x118>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	0119      	lsls	r1, r3, #4
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009a      	lsls	r2, r3, #2
 8003f80:	441a      	add	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff8 <UART_SetConfig+0x118>)
 8003f8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	2064      	movs	r0, #100	@ 0x64
 8003f96:	fb00 f303 	mul.w	r3, r0, r3
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	3332      	adds	r3, #50	@ 0x32
 8003fa0:	4a15      	ldr	r2, [pc, #84]	@ (8003ff8 <UART_SetConfig+0x118>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fac:	4419      	add	r1, r3
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009a      	lsls	r2, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff8 <UART_SetConfig+0x118>)
 8003fc6:	fba3 0302 	umull	r0, r3, r3, r2
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	2064      	movs	r0, #100	@ 0x64
 8003fce:	fb00 f303 	mul.w	r3, r0, r3
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	3332      	adds	r3, #50	@ 0x32
 8003fd8:	4a07      	ldr	r2, [pc, #28]	@ (8003ff8 <UART_SetConfig+0x118>)
 8003fda:	fba2 2303 	umull	r2, r3, r2, r3
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	f003 020f 	and.w	r2, r3, #15
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	440a      	add	r2, r1
 8003fea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fec:	bf00      	nop
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40013800 	.word	0x40013800
 8003ff8:	51eb851f 	.word	0x51eb851f

08003ffc <siprintf>:
 8003ffc:	b40e      	push	{r1, r2, r3}
 8003ffe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004002:	b500      	push	{lr}
 8004004:	b09c      	sub	sp, #112	@ 0x70
 8004006:	ab1d      	add	r3, sp, #116	@ 0x74
 8004008:	9002      	str	r0, [sp, #8]
 800400a:	9006      	str	r0, [sp, #24]
 800400c:	9107      	str	r1, [sp, #28]
 800400e:	9104      	str	r1, [sp, #16]
 8004010:	4808      	ldr	r0, [pc, #32]	@ (8004034 <siprintf+0x38>)
 8004012:	4909      	ldr	r1, [pc, #36]	@ (8004038 <siprintf+0x3c>)
 8004014:	f853 2b04 	ldr.w	r2, [r3], #4
 8004018:	9105      	str	r1, [sp, #20]
 800401a:	6800      	ldr	r0, [r0, #0]
 800401c:	a902      	add	r1, sp, #8
 800401e:	9301      	str	r3, [sp, #4]
 8004020:	f000 f9a0 	bl	8004364 <_svfiprintf_r>
 8004024:	2200      	movs	r2, #0
 8004026:	9b02      	ldr	r3, [sp, #8]
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	b01c      	add	sp, #112	@ 0x70
 800402c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004030:	b003      	add	sp, #12
 8004032:	4770      	bx	lr
 8004034:	2000000c 	.word	0x2000000c
 8004038:	ffff0208 	.word	0xffff0208

0800403c <memset>:
 800403c:	4603      	mov	r3, r0
 800403e:	4402      	add	r2, r0
 8004040:	4293      	cmp	r3, r2
 8004042:	d100      	bne.n	8004046 <memset+0xa>
 8004044:	4770      	bx	lr
 8004046:	f803 1b01 	strb.w	r1, [r3], #1
 800404a:	e7f9      	b.n	8004040 <memset+0x4>

0800404c <__errno>:
 800404c:	4b01      	ldr	r3, [pc, #4]	@ (8004054 <__errno+0x8>)
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	2000000c 	.word	0x2000000c

08004058 <__libc_init_array>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	2600      	movs	r6, #0
 800405c:	4d0c      	ldr	r5, [pc, #48]	@ (8004090 <__libc_init_array+0x38>)
 800405e:	4c0d      	ldr	r4, [pc, #52]	@ (8004094 <__libc_init_array+0x3c>)
 8004060:	1b64      	subs	r4, r4, r5
 8004062:	10a4      	asrs	r4, r4, #2
 8004064:	42a6      	cmp	r6, r4
 8004066:	d109      	bne.n	800407c <__libc_init_array+0x24>
 8004068:	f000 fc78 	bl	800495c <_init>
 800406c:	2600      	movs	r6, #0
 800406e:	4d0a      	ldr	r5, [pc, #40]	@ (8004098 <__libc_init_array+0x40>)
 8004070:	4c0a      	ldr	r4, [pc, #40]	@ (800409c <__libc_init_array+0x44>)
 8004072:	1b64      	subs	r4, r4, r5
 8004074:	10a4      	asrs	r4, r4, #2
 8004076:	42a6      	cmp	r6, r4
 8004078:	d105      	bne.n	8004086 <__libc_init_array+0x2e>
 800407a:	bd70      	pop	{r4, r5, r6, pc}
 800407c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004080:	4798      	blx	r3
 8004082:	3601      	adds	r6, #1
 8004084:	e7ee      	b.n	8004064 <__libc_init_array+0xc>
 8004086:	f855 3b04 	ldr.w	r3, [r5], #4
 800408a:	4798      	blx	r3
 800408c:	3601      	adds	r6, #1
 800408e:	e7f2      	b.n	8004076 <__libc_init_array+0x1e>
 8004090:	080049e4 	.word	0x080049e4
 8004094:	080049e4 	.word	0x080049e4
 8004098:	080049e4 	.word	0x080049e4
 800409c:	080049e8 	.word	0x080049e8

080040a0 <__retarget_lock_acquire_recursive>:
 80040a0:	4770      	bx	lr

080040a2 <__retarget_lock_release_recursive>:
 80040a2:	4770      	bx	lr

080040a4 <memcpy>:
 80040a4:	440a      	add	r2, r1
 80040a6:	4291      	cmp	r1, r2
 80040a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80040ac:	d100      	bne.n	80040b0 <memcpy+0xc>
 80040ae:	4770      	bx	lr
 80040b0:	b510      	push	{r4, lr}
 80040b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040b6:	4291      	cmp	r1, r2
 80040b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040bc:	d1f9      	bne.n	80040b2 <memcpy+0xe>
 80040be:	bd10      	pop	{r4, pc}

080040c0 <_free_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4605      	mov	r5, r0
 80040c4:	2900      	cmp	r1, #0
 80040c6:	d040      	beq.n	800414a <_free_r+0x8a>
 80040c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040cc:	1f0c      	subs	r4, r1, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	bfb8      	it	lt
 80040d2:	18e4      	addlt	r4, r4, r3
 80040d4:	f000 f8de 	bl	8004294 <__malloc_lock>
 80040d8:	4a1c      	ldr	r2, [pc, #112]	@ (800414c <_free_r+0x8c>)
 80040da:	6813      	ldr	r3, [r2, #0]
 80040dc:	b933      	cbnz	r3, 80040ec <_free_r+0x2c>
 80040de:	6063      	str	r3, [r4, #4]
 80040e0:	6014      	str	r4, [r2, #0]
 80040e2:	4628      	mov	r0, r5
 80040e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040e8:	f000 b8da 	b.w	80042a0 <__malloc_unlock>
 80040ec:	42a3      	cmp	r3, r4
 80040ee:	d908      	bls.n	8004102 <_free_r+0x42>
 80040f0:	6820      	ldr	r0, [r4, #0]
 80040f2:	1821      	adds	r1, r4, r0
 80040f4:	428b      	cmp	r3, r1
 80040f6:	bf01      	itttt	eq
 80040f8:	6819      	ldreq	r1, [r3, #0]
 80040fa:	685b      	ldreq	r3, [r3, #4]
 80040fc:	1809      	addeq	r1, r1, r0
 80040fe:	6021      	streq	r1, [r4, #0]
 8004100:	e7ed      	b.n	80040de <_free_r+0x1e>
 8004102:	461a      	mov	r2, r3
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	b10b      	cbz	r3, 800410c <_free_r+0x4c>
 8004108:	42a3      	cmp	r3, r4
 800410a:	d9fa      	bls.n	8004102 <_free_r+0x42>
 800410c:	6811      	ldr	r1, [r2, #0]
 800410e:	1850      	adds	r0, r2, r1
 8004110:	42a0      	cmp	r0, r4
 8004112:	d10b      	bne.n	800412c <_free_r+0x6c>
 8004114:	6820      	ldr	r0, [r4, #0]
 8004116:	4401      	add	r1, r0
 8004118:	1850      	adds	r0, r2, r1
 800411a:	4283      	cmp	r3, r0
 800411c:	6011      	str	r1, [r2, #0]
 800411e:	d1e0      	bne.n	80040e2 <_free_r+0x22>
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4408      	add	r0, r1
 8004126:	6010      	str	r0, [r2, #0]
 8004128:	6053      	str	r3, [r2, #4]
 800412a:	e7da      	b.n	80040e2 <_free_r+0x22>
 800412c:	d902      	bls.n	8004134 <_free_r+0x74>
 800412e:	230c      	movs	r3, #12
 8004130:	602b      	str	r3, [r5, #0]
 8004132:	e7d6      	b.n	80040e2 <_free_r+0x22>
 8004134:	6820      	ldr	r0, [r4, #0]
 8004136:	1821      	adds	r1, r4, r0
 8004138:	428b      	cmp	r3, r1
 800413a:	bf01      	itttt	eq
 800413c:	6819      	ldreq	r1, [r3, #0]
 800413e:	685b      	ldreq	r3, [r3, #4]
 8004140:	1809      	addeq	r1, r1, r0
 8004142:	6021      	streq	r1, [r4, #0]
 8004144:	6063      	str	r3, [r4, #4]
 8004146:	6054      	str	r4, [r2, #4]
 8004148:	e7cb      	b.n	80040e2 <_free_r+0x22>
 800414a:	bd38      	pop	{r3, r4, r5, pc}
 800414c:	2000077c 	.word	0x2000077c

08004150 <sbrk_aligned>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	4e0f      	ldr	r6, [pc, #60]	@ (8004190 <sbrk_aligned+0x40>)
 8004154:	460c      	mov	r4, r1
 8004156:	6831      	ldr	r1, [r6, #0]
 8004158:	4605      	mov	r5, r0
 800415a:	b911      	cbnz	r1, 8004162 <sbrk_aligned+0x12>
 800415c:	f000 fbaa 	bl	80048b4 <_sbrk_r>
 8004160:	6030      	str	r0, [r6, #0]
 8004162:	4621      	mov	r1, r4
 8004164:	4628      	mov	r0, r5
 8004166:	f000 fba5 	bl	80048b4 <_sbrk_r>
 800416a:	1c43      	adds	r3, r0, #1
 800416c:	d103      	bne.n	8004176 <sbrk_aligned+0x26>
 800416e:	f04f 34ff 	mov.w	r4, #4294967295
 8004172:	4620      	mov	r0, r4
 8004174:	bd70      	pop	{r4, r5, r6, pc}
 8004176:	1cc4      	adds	r4, r0, #3
 8004178:	f024 0403 	bic.w	r4, r4, #3
 800417c:	42a0      	cmp	r0, r4
 800417e:	d0f8      	beq.n	8004172 <sbrk_aligned+0x22>
 8004180:	1a21      	subs	r1, r4, r0
 8004182:	4628      	mov	r0, r5
 8004184:	f000 fb96 	bl	80048b4 <_sbrk_r>
 8004188:	3001      	adds	r0, #1
 800418a:	d1f2      	bne.n	8004172 <sbrk_aligned+0x22>
 800418c:	e7ef      	b.n	800416e <sbrk_aligned+0x1e>
 800418e:	bf00      	nop
 8004190:	20000778 	.word	0x20000778

08004194 <_malloc_r>:
 8004194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004198:	1ccd      	adds	r5, r1, #3
 800419a:	f025 0503 	bic.w	r5, r5, #3
 800419e:	3508      	adds	r5, #8
 80041a0:	2d0c      	cmp	r5, #12
 80041a2:	bf38      	it	cc
 80041a4:	250c      	movcc	r5, #12
 80041a6:	2d00      	cmp	r5, #0
 80041a8:	4606      	mov	r6, r0
 80041aa:	db01      	blt.n	80041b0 <_malloc_r+0x1c>
 80041ac:	42a9      	cmp	r1, r5
 80041ae:	d904      	bls.n	80041ba <_malloc_r+0x26>
 80041b0:	230c      	movs	r3, #12
 80041b2:	6033      	str	r3, [r6, #0]
 80041b4:	2000      	movs	r0, #0
 80041b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004290 <_malloc_r+0xfc>
 80041be:	f000 f869 	bl	8004294 <__malloc_lock>
 80041c2:	f8d8 3000 	ldr.w	r3, [r8]
 80041c6:	461c      	mov	r4, r3
 80041c8:	bb44      	cbnz	r4, 800421c <_malloc_r+0x88>
 80041ca:	4629      	mov	r1, r5
 80041cc:	4630      	mov	r0, r6
 80041ce:	f7ff ffbf 	bl	8004150 <sbrk_aligned>
 80041d2:	1c43      	adds	r3, r0, #1
 80041d4:	4604      	mov	r4, r0
 80041d6:	d158      	bne.n	800428a <_malloc_r+0xf6>
 80041d8:	f8d8 4000 	ldr.w	r4, [r8]
 80041dc:	4627      	mov	r7, r4
 80041de:	2f00      	cmp	r7, #0
 80041e0:	d143      	bne.n	800426a <_malloc_r+0xd6>
 80041e2:	2c00      	cmp	r4, #0
 80041e4:	d04b      	beq.n	800427e <_malloc_r+0xea>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	4639      	mov	r1, r7
 80041ea:	4630      	mov	r0, r6
 80041ec:	eb04 0903 	add.w	r9, r4, r3
 80041f0:	f000 fb60 	bl	80048b4 <_sbrk_r>
 80041f4:	4581      	cmp	r9, r0
 80041f6:	d142      	bne.n	800427e <_malloc_r+0xea>
 80041f8:	6821      	ldr	r1, [r4, #0]
 80041fa:	4630      	mov	r0, r6
 80041fc:	1a6d      	subs	r5, r5, r1
 80041fe:	4629      	mov	r1, r5
 8004200:	f7ff ffa6 	bl	8004150 <sbrk_aligned>
 8004204:	3001      	adds	r0, #1
 8004206:	d03a      	beq.n	800427e <_malloc_r+0xea>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	442b      	add	r3, r5
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	f8d8 3000 	ldr.w	r3, [r8]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	bb62      	cbnz	r2, 8004270 <_malloc_r+0xdc>
 8004216:	f8c8 7000 	str.w	r7, [r8]
 800421a:	e00f      	b.n	800423c <_malloc_r+0xa8>
 800421c:	6822      	ldr	r2, [r4, #0]
 800421e:	1b52      	subs	r2, r2, r5
 8004220:	d420      	bmi.n	8004264 <_malloc_r+0xd0>
 8004222:	2a0b      	cmp	r2, #11
 8004224:	d917      	bls.n	8004256 <_malloc_r+0xc2>
 8004226:	1961      	adds	r1, r4, r5
 8004228:	42a3      	cmp	r3, r4
 800422a:	6025      	str	r5, [r4, #0]
 800422c:	bf18      	it	ne
 800422e:	6059      	strne	r1, [r3, #4]
 8004230:	6863      	ldr	r3, [r4, #4]
 8004232:	bf08      	it	eq
 8004234:	f8c8 1000 	streq.w	r1, [r8]
 8004238:	5162      	str	r2, [r4, r5]
 800423a:	604b      	str	r3, [r1, #4]
 800423c:	4630      	mov	r0, r6
 800423e:	f000 f82f 	bl	80042a0 <__malloc_unlock>
 8004242:	f104 000b 	add.w	r0, r4, #11
 8004246:	1d23      	adds	r3, r4, #4
 8004248:	f020 0007 	bic.w	r0, r0, #7
 800424c:	1ac2      	subs	r2, r0, r3
 800424e:	bf1c      	itt	ne
 8004250:	1a1b      	subne	r3, r3, r0
 8004252:	50a3      	strne	r3, [r4, r2]
 8004254:	e7af      	b.n	80041b6 <_malloc_r+0x22>
 8004256:	6862      	ldr	r2, [r4, #4]
 8004258:	42a3      	cmp	r3, r4
 800425a:	bf0c      	ite	eq
 800425c:	f8c8 2000 	streq.w	r2, [r8]
 8004260:	605a      	strne	r2, [r3, #4]
 8004262:	e7eb      	b.n	800423c <_malloc_r+0xa8>
 8004264:	4623      	mov	r3, r4
 8004266:	6864      	ldr	r4, [r4, #4]
 8004268:	e7ae      	b.n	80041c8 <_malloc_r+0x34>
 800426a:	463c      	mov	r4, r7
 800426c:	687f      	ldr	r7, [r7, #4]
 800426e:	e7b6      	b.n	80041de <_malloc_r+0x4a>
 8004270:	461a      	mov	r2, r3
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	42a3      	cmp	r3, r4
 8004276:	d1fb      	bne.n	8004270 <_malloc_r+0xdc>
 8004278:	2300      	movs	r3, #0
 800427a:	6053      	str	r3, [r2, #4]
 800427c:	e7de      	b.n	800423c <_malloc_r+0xa8>
 800427e:	230c      	movs	r3, #12
 8004280:	4630      	mov	r0, r6
 8004282:	6033      	str	r3, [r6, #0]
 8004284:	f000 f80c 	bl	80042a0 <__malloc_unlock>
 8004288:	e794      	b.n	80041b4 <_malloc_r+0x20>
 800428a:	6005      	str	r5, [r0, #0]
 800428c:	e7d6      	b.n	800423c <_malloc_r+0xa8>
 800428e:	bf00      	nop
 8004290:	2000077c 	.word	0x2000077c

08004294 <__malloc_lock>:
 8004294:	4801      	ldr	r0, [pc, #4]	@ (800429c <__malloc_lock+0x8>)
 8004296:	f7ff bf03 	b.w	80040a0 <__retarget_lock_acquire_recursive>
 800429a:	bf00      	nop
 800429c:	20000774 	.word	0x20000774

080042a0 <__malloc_unlock>:
 80042a0:	4801      	ldr	r0, [pc, #4]	@ (80042a8 <__malloc_unlock+0x8>)
 80042a2:	f7ff befe 	b.w	80040a2 <__retarget_lock_release_recursive>
 80042a6:	bf00      	nop
 80042a8:	20000774 	.word	0x20000774

080042ac <__ssputs_r>:
 80042ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b0:	461f      	mov	r7, r3
 80042b2:	688e      	ldr	r6, [r1, #8]
 80042b4:	4682      	mov	sl, r0
 80042b6:	42be      	cmp	r6, r7
 80042b8:	460c      	mov	r4, r1
 80042ba:	4690      	mov	r8, r2
 80042bc:	680b      	ldr	r3, [r1, #0]
 80042be:	d82d      	bhi.n	800431c <__ssputs_r+0x70>
 80042c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042c8:	d026      	beq.n	8004318 <__ssputs_r+0x6c>
 80042ca:	6965      	ldr	r5, [r4, #20]
 80042cc:	6909      	ldr	r1, [r1, #16]
 80042ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042d2:	eba3 0901 	sub.w	r9, r3, r1
 80042d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042da:	1c7b      	adds	r3, r7, #1
 80042dc:	444b      	add	r3, r9
 80042de:	106d      	asrs	r5, r5, #1
 80042e0:	429d      	cmp	r5, r3
 80042e2:	bf38      	it	cc
 80042e4:	461d      	movcc	r5, r3
 80042e6:	0553      	lsls	r3, r2, #21
 80042e8:	d527      	bpl.n	800433a <__ssputs_r+0x8e>
 80042ea:	4629      	mov	r1, r5
 80042ec:	f7ff ff52 	bl	8004194 <_malloc_r>
 80042f0:	4606      	mov	r6, r0
 80042f2:	b360      	cbz	r0, 800434e <__ssputs_r+0xa2>
 80042f4:	464a      	mov	r2, r9
 80042f6:	6921      	ldr	r1, [r4, #16]
 80042f8:	f7ff fed4 	bl	80040a4 <memcpy>
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004306:	81a3      	strh	r3, [r4, #12]
 8004308:	6126      	str	r6, [r4, #16]
 800430a:	444e      	add	r6, r9
 800430c:	6026      	str	r6, [r4, #0]
 800430e:	463e      	mov	r6, r7
 8004310:	6165      	str	r5, [r4, #20]
 8004312:	eba5 0509 	sub.w	r5, r5, r9
 8004316:	60a5      	str	r5, [r4, #8]
 8004318:	42be      	cmp	r6, r7
 800431a:	d900      	bls.n	800431e <__ssputs_r+0x72>
 800431c:	463e      	mov	r6, r7
 800431e:	4632      	mov	r2, r6
 8004320:	4641      	mov	r1, r8
 8004322:	6820      	ldr	r0, [r4, #0]
 8004324:	f000 faac 	bl	8004880 <memmove>
 8004328:	2000      	movs	r0, #0
 800432a:	68a3      	ldr	r3, [r4, #8]
 800432c:	1b9b      	subs	r3, r3, r6
 800432e:	60a3      	str	r3, [r4, #8]
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	4433      	add	r3, r6
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433a:	462a      	mov	r2, r5
 800433c:	f000 fad8 	bl	80048f0 <_realloc_r>
 8004340:	4606      	mov	r6, r0
 8004342:	2800      	cmp	r0, #0
 8004344:	d1e0      	bne.n	8004308 <__ssputs_r+0x5c>
 8004346:	4650      	mov	r0, sl
 8004348:	6921      	ldr	r1, [r4, #16]
 800434a:	f7ff feb9 	bl	80040c0 <_free_r>
 800434e:	230c      	movs	r3, #12
 8004350:	f8ca 3000 	str.w	r3, [sl]
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	f04f 30ff 	mov.w	r0, #4294967295
 800435a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800435e:	81a3      	strh	r3, [r4, #12]
 8004360:	e7e9      	b.n	8004336 <__ssputs_r+0x8a>
	...

08004364 <_svfiprintf_r>:
 8004364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004368:	4698      	mov	r8, r3
 800436a:	898b      	ldrh	r3, [r1, #12]
 800436c:	4607      	mov	r7, r0
 800436e:	061b      	lsls	r3, r3, #24
 8004370:	460d      	mov	r5, r1
 8004372:	4614      	mov	r4, r2
 8004374:	b09d      	sub	sp, #116	@ 0x74
 8004376:	d510      	bpl.n	800439a <_svfiprintf_r+0x36>
 8004378:	690b      	ldr	r3, [r1, #16]
 800437a:	b973      	cbnz	r3, 800439a <_svfiprintf_r+0x36>
 800437c:	2140      	movs	r1, #64	@ 0x40
 800437e:	f7ff ff09 	bl	8004194 <_malloc_r>
 8004382:	6028      	str	r0, [r5, #0]
 8004384:	6128      	str	r0, [r5, #16]
 8004386:	b930      	cbnz	r0, 8004396 <_svfiprintf_r+0x32>
 8004388:	230c      	movs	r3, #12
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	f04f 30ff 	mov.w	r0, #4294967295
 8004390:	b01d      	add	sp, #116	@ 0x74
 8004392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004396:	2340      	movs	r3, #64	@ 0x40
 8004398:	616b      	str	r3, [r5, #20]
 800439a:	2300      	movs	r3, #0
 800439c:	9309      	str	r3, [sp, #36]	@ 0x24
 800439e:	2320      	movs	r3, #32
 80043a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043a4:	2330      	movs	r3, #48	@ 0x30
 80043a6:	f04f 0901 	mov.w	r9, #1
 80043aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80043ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004548 <_svfiprintf_r+0x1e4>
 80043b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043b6:	4623      	mov	r3, r4
 80043b8:	469a      	mov	sl, r3
 80043ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043be:	b10a      	cbz	r2, 80043c4 <_svfiprintf_r+0x60>
 80043c0:	2a25      	cmp	r2, #37	@ 0x25
 80043c2:	d1f9      	bne.n	80043b8 <_svfiprintf_r+0x54>
 80043c4:	ebba 0b04 	subs.w	fp, sl, r4
 80043c8:	d00b      	beq.n	80043e2 <_svfiprintf_r+0x7e>
 80043ca:	465b      	mov	r3, fp
 80043cc:	4622      	mov	r2, r4
 80043ce:	4629      	mov	r1, r5
 80043d0:	4638      	mov	r0, r7
 80043d2:	f7ff ff6b 	bl	80042ac <__ssputs_r>
 80043d6:	3001      	adds	r0, #1
 80043d8:	f000 80a7 	beq.w	800452a <_svfiprintf_r+0x1c6>
 80043dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043de:	445a      	add	r2, fp
 80043e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80043e2:	f89a 3000 	ldrb.w	r3, [sl]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 809f 	beq.w	800452a <_svfiprintf_r+0x1c6>
 80043ec:	2300      	movs	r3, #0
 80043ee:	f04f 32ff 	mov.w	r2, #4294967295
 80043f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043f6:	f10a 0a01 	add.w	sl, sl, #1
 80043fa:	9304      	str	r3, [sp, #16]
 80043fc:	9307      	str	r3, [sp, #28]
 80043fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004402:	931a      	str	r3, [sp, #104]	@ 0x68
 8004404:	4654      	mov	r4, sl
 8004406:	2205      	movs	r2, #5
 8004408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800440c:	484e      	ldr	r0, [pc, #312]	@ (8004548 <_svfiprintf_r+0x1e4>)
 800440e:	f000 fa61 	bl	80048d4 <memchr>
 8004412:	9a04      	ldr	r2, [sp, #16]
 8004414:	b9d8      	cbnz	r0, 800444e <_svfiprintf_r+0xea>
 8004416:	06d0      	lsls	r0, r2, #27
 8004418:	bf44      	itt	mi
 800441a:	2320      	movmi	r3, #32
 800441c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004420:	0711      	lsls	r1, r2, #28
 8004422:	bf44      	itt	mi
 8004424:	232b      	movmi	r3, #43	@ 0x2b
 8004426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800442a:	f89a 3000 	ldrb.w	r3, [sl]
 800442e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004430:	d015      	beq.n	800445e <_svfiprintf_r+0xfa>
 8004432:	4654      	mov	r4, sl
 8004434:	2000      	movs	r0, #0
 8004436:	f04f 0c0a 	mov.w	ip, #10
 800443a:	9a07      	ldr	r2, [sp, #28]
 800443c:	4621      	mov	r1, r4
 800443e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004442:	3b30      	subs	r3, #48	@ 0x30
 8004444:	2b09      	cmp	r3, #9
 8004446:	d94b      	bls.n	80044e0 <_svfiprintf_r+0x17c>
 8004448:	b1b0      	cbz	r0, 8004478 <_svfiprintf_r+0x114>
 800444a:	9207      	str	r2, [sp, #28]
 800444c:	e014      	b.n	8004478 <_svfiprintf_r+0x114>
 800444e:	eba0 0308 	sub.w	r3, r0, r8
 8004452:	fa09 f303 	lsl.w	r3, r9, r3
 8004456:	4313      	orrs	r3, r2
 8004458:	46a2      	mov	sl, r4
 800445a:	9304      	str	r3, [sp, #16]
 800445c:	e7d2      	b.n	8004404 <_svfiprintf_r+0xa0>
 800445e:	9b03      	ldr	r3, [sp, #12]
 8004460:	1d19      	adds	r1, r3, #4
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	9103      	str	r1, [sp, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	bfbb      	ittet	lt
 800446a:	425b      	neglt	r3, r3
 800446c:	f042 0202 	orrlt.w	r2, r2, #2
 8004470:	9307      	strge	r3, [sp, #28]
 8004472:	9307      	strlt	r3, [sp, #28]
 8004474:	bfb8      	it	lt
 8004476:	9204      	strlt	r2, [sp, #16]
 8004478:	7823      	ldrb	r3, [r4, #0]
 800447a:	2b2e      	cmp	r3, #46	@ 0x2e
 800447c:	d10a      	bne.n	8004494 <_svfiprintf_r+0x130>
 800447e:	7863      	ldrb	r3, [r4, #1]
 8004480:	2b2a      	cmp	r3, #42	@ 0x2a
 8004482:	d132      	bne.n	80044ea <_svfiprintf_r+0x186>
 8004484:	9b03      	ldr	r3, [sp, #12]
 8004486:	3402      	adds	r4, #2
 8004488:	1d1a      	adds	r2, r3, #4
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	9203      	str	r2, [sp, #12]
 800448e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004492:	9305      	str	r3, [sp, #20]
 8004494:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800454c <_svfiprintf_r+0x1e8>
 8004498:	2203      	movs	r2, #3
 800449a:	4650      	mov	r0, sl
 800449c:	7821      	ldrb	r1, [r4, #0]
 800449e:	f000 fa19 	bl	80048d4 <memchr>
 80044a2:	b138      	cbz	r0, 80044b4 <_svfiprintf_r+0x150>
 80044a4:	2240      	movs	r2, #64	@ 0x40
 80044a6:	9b04      	ldr	r3, [sp, #16]
 80044a8:	eba0 000a 	sub.w	r0, r0, sl
 80044ac:	4082      	lsls	r2, r0
 80044ae:	4313      	orrs	r3, r2
 80044b0:	3401      	adds	r4, #1
 80044b2:	9304      	str	r3, [sp, #16]
 80044b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b8:	2206      	movs	r2, #6
 80044ba:	4825      	ldr	r0, [pc, #148]	@ (8004550 <_svfiprintf_r+0x1ec>)
 80044bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044c0:	f000 fa08 	bl	80048d4 <memchr>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d036      	beq.n	8004536 <_svfiprintf_r+0x1d2>
 80044c8:	4b22      	ldr	r3, [pc, #136]	@ (8004554 <_svfiprintf_r+0x1f0>)
 80044ca:	bb1b      	cbnz	r3, 8004514 <_svfiprintf_r+0x1b0>
 80044cc:	9b03      	ldr	r3, [sp, #12]
 80044ce:	3307      	adds	r3, #7
 80044d0:	f023 0307 	bic.w	r3, r3, #7
 80044d4:	3308      	adds	r3, #8
 80044d6:	9303      	str	r3, [sp, #12]
 80044d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044da:	4433      	add	r3, r6
 80044dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80044de:	e76a      	b.n	80043b6 <_svfiprintf_r+0x52>
 80044e0:	460c      	mov	r4, r1
 80044e2:	2001      	movs	r0, #1
 80044e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80044e8:	e7a8      	b.n	800443c <_svfiprintf_r+0xd8>
 80044ea:	2300      	movs	r3, #0
 80044ec:	f04f 0c0a 	mov.w	ip, #10
 80044f0:	4619      	mov	r1, r3
 80044f2:	3401      	adds	r4, #1
 80044f4:	9305      	str	r3, [sp, #20]
 80044f6:	4620      	mov	r0, r4
 80044f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044fc:	3a30      	subs	r2, #48	@ 0x30
 80044fe:	2a09      	cmp	r2, #9
 8004500:	d903      	bls.n	800450a <_svfiprintf_r+0x1a6>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0c6      	beq.n	8004494 <_svfiprintf_r+0x130>
 8004506:	9105      	str	r1, [sp, #20]
 8004508:	e7c4      	b.n	8004494 <_svfiprintf_r+0x130>
 800450a:	4604      	mov	r4, r0
 800450c:	2301      	movs	r3, #1
 800450e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004512:	e7f0      	b.n	80044f6 <_svfiprintf_r+0x192>
 8004514:	ab03      	add	r3, sp, #12
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	462a      	mov	r2, r5
 800451a:	4638      	mov	r0, r7
 800451c:	4b0e      	ldr	r3, [pc, #56]	@ (8004558 <_svfiprintf_r+0x1f4>)
 800451e:	a904      	add	r1, sp, #16
 8004520:	f3af 8000 	nop.w
 8004524:	1c42      	adds	r2, r0, #1
 8004526:	4606      	mov	r6, r0
 8004528:	d1d6      	bne.n	80044d8 <_svfiprintf_r+0x174>
 800452a:	89ab      	ldrh	r3, [r5, #12]
 800452c:	065b      	lsls	r3, r3, #25
 800452e:	f53f af2d 	bmi.w	800438c <_svfiprintf_r+0x28>
 8004532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004534:	e72c      	b.n	8004390 <_svfiprintf_r+0x2c>
 8004536:	ab03      	add	r3, sp, #12
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	462a      	mov	r2, r5
 800453c:	4638      	mov	r0, r7
 800453e:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <_svfiprintf_r+0x1f4>)
 8004540:	a904      	add	r1, sp, #16
 8004542:	f000 f87d 	bl	8004640 <_printf_i>
 8004546:	e7ed      	b.n	8004524 <_svfiprintf_r+0x1c0>
 8004548:	080049a6 	.word	0x080049a6
 800454c:	080049ac 	.word	0x080049ac
 8004550:	080049b0 	.word	0x080049b0
 8004554:	00000000 	.word	0x00000000
 8004558:	080042ad 	.word	0x080042ad

0800455c <_printf_common>:
 800455c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004560:	4616      	mov	r6, r2
 8004562:	4698      	mov	r8, r3
 8004564:	688a      	ldr	r2, [r1, #8]
 8004566:	690b      	ldr	r3, [r1, #16]
 8004568:	4607      	mov	r7, r0
 800456a:	4293      	cmp	r3, r2
 800456c:	bfb8      	it	lt
 800456e:	4613      	movlt	r3, r2
 8004570:	6033      	str	r3, [r6, #0]
 8004572:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004576:	460c      	mov	r4, r1
 8004578:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800457c:	b10a      	cbz	r2, 8004582 <_printf_common+0x26>
 800457e:	3301      	adds	r3, #1
 8004580:	6033      	str	r3, [r6, #0]
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	0699      	lsls	r1, r3, #26
 8004586:	bf42      	ittt	mi
 8004588:	6833      	ldrmi	r3, [r6, #0]
 800458a:	3302      	addmi	r3, #2
 800458c:	6033      	strmi	r3, [r6, #0]
 800458e:	6825      	ldr	r5, [r4, #0]
 8004590:	f015 0506 	ands.w	r5, r5, #6
 8004594:	d106      	bne.n	80045a4 <_printf_common+0x48>
 8004596:	f104 0a19 	add.w	sl, r4, #25
 800459a:	68e3      	ldr	r3, [r4, #12]
 800459c:	6832      	ldr	r2, [r6, #0]
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	42ab      	cmp	r3, r5
 80045a2:	dc2b      	bgt.n	80045fc <_printf_common+0xa0>
 80045a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045a8:	6822      	ldr	r2, [r4, #0]
 80045aa:	3b00      	subs	r3, #0
 80045ac:	bf18      	it	ne
 80045ae:	2301      	movne	r3, #1
 80045b0:	0692      	lsls	r2, r2, #26
 80045b2:	d430      	bmi.n	8004616 <_printf_common+0xba>
 80045b4:	4641      	mov	r1, r8
 80045b6:	4638      	mov	r0, r7
 80045b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045bc:	47c8      	blx	r9
 80045be:	3001      	adds	r0, #1
 80045c0:	d023      	beq.n	800460a <_printf_common+0xae>
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	6922      	ldr	r2, [r4, #16]
 80045c6:	f003 0306 	and.w	r3, r3, #6
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	bf14      	ite	ne
 80045ce:	2500      	movne	r5, #0
 80045d0:	6833      	ldreq	r3, [r6, #0]
 80045d2:	f04f 0600 	mov.w	r6, #0
 80045d6:	bf08      	it	eq
 80045d8:	68e5      	ldreq	r5, [r4, #12]
 80045da:	f104 041a 	add.w	r4, r4, #26
 80045de:	bf08      	it	eq
 80045e0:	1aed      	subeq	r5, r5, r3
 80045e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80045e6:	bf08      	it	eq
 80045e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045ec:	4293      	cmp	r3, r2
 80045ee:	bfc4      	itt	gt
 80045f0:	1a9b      	subgt	r3, r3, r2
 80045f2:	18ed      	addgt	r5, r5, r3
 80045f4:	42b5      	cmp	r5, r6
 80045f6:	d11a      	bne.n	800462e <_printf_common+0xd2>
 80045f8:	2000      	movs	r0, #0
 80045fa:	e008      	b.n	800460e <_printf_common+0xb2>
 80045fc:	2301      	movs	r3, #1
 80045fe:	4652      	mov	r2, sl
 8004600:	4641      	mov	r1, r8
 8004602:	4638      	mov	r0, r7
 8004604:	47c8      	blx	r9
 8004606:	3001      	adds	r0, #1
 8004608:	d103      	bne.n	8004612 <_printf_common+0xb6>
 800460a:	f04f 30ff 	mov.w	r0, #4294967295
 800460e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004612:	3501      	adds	r5, #1
 8004614:	e7c1      	b.n	800459a <_printf_common+0x3e>
 8004616:	2030      	movs	r0, #48	@ 0x30
 8004618:	18e1      	adds	r1, r4, r3
 800461a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004624:	4422      	add	r2, r4
 8004626:	3302      	adds	r3, #2
 8004628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800462c:	e7c2      	b.n	80045b4 <_printf_common+0x58>
 800462e:	2301      	movs	r3, #1
 8004630:	4622      	mov	r2, r4
 8004632:	4641      	mov	r1, r8
 8004634:	4638      	mov	r0, r7
 8004636:	47c8      	blx	r9
 8004638:	3001      	adds	r0, #1
 800463a:	d0e6      	beq.n	800460a <_printf_common+0xae>
 800463c:	3601      	adds	r6, #1
 800463e:	e7d9      	b.n	80045f4 <_printf_common+0x98>

08004640 <_printf_i>:
 8004640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004644:	7e0f      	ldrb	r7, [r1, #24]
 8004646:	4691      	mov	r9, r2
 8004648:	2f78      	cmp	r7, #120	@ 0x78
 800464a:	4680      	mov	r8, r0
 800464c:	460c      	mov	r4, r1
 800464e:	469a      	mov	sl, r3
 8004650:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004652:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004656:	d807      	bhi.n	8004668 <_printf_i+0x28>
 8004658:	2f62      	cmp	r7, #98	@ 0x62
 800465a:	d80a      	bhi.n	8004672 <_printf_i+0x32>
 800465c:	2f00      	cmp	r7, #0
 800465e:	f000 80d3 	beq.w	8004808 <_printf_i+0x1c8>
 8004662:	2f58      	cmp	r7, #88	@ 0x58
 8004664:	f000 80ba 	beq.w	80047dc <_printf_i+0x19c>
 8004668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800466c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004670:	e03a      	b.n	80046e8 <_printf_i+0xa8>
 8004672:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004676:	2b15      	cmp	r3, #21
 8004678:	d8f6      	bhi.n	8004668 <_printf_i+0x28>
 800467a:	a101      	add	r1, pc, #4	@ (adr r1, 8004680 <_printf_i+0x40>)
 800467c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004680:	080046d9 	.word	0x080046d9
 8004684:	080046ed 	.word	0x080046ed
 8004688:	08004669 	.word	0x08004669
 800468c:	08004669 	.word	0x08004669
 8004690:	08004669 	.word	0x08004669
 8004694:	08004669 	.word	0x08004669
 8004698:	080046ed 	.word	0x080046ed
 800469c:	08004669 	.word	0x08004669
 80046a0:	08004669 	.word	0x08004669
 80046a4:	08004669 	.word	0x08004669
 80046a8:	08004669 	.word	0x08004669
 80046ac:	080047ef 	.word	0x080047ef
 80046b0:	08004717 	.word	0x08004717
 80046b4:	080047a9 	.word	0x080047a9
 80046b8:	08004669 	.word	0x08004669
 80046bc:	08004669 	.word	0x08004669
 80046c0:	08004811 	.word	0x08004811
 80046c4:	08004669 	.word	0x08004669
 80046c8:	08004717 	.word	0x08004717
 80046cc:	08004669 	.word	0x08004669
 80046d0:	08004669 	.word	0x08004669
 80046d4:	080047b1 	.word	0x080047b1
 80046d8:	6833      	ldr	r3, [r6, #0]
 80046da:	1d1a      	adds	r2, r3, #4
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6032      	str	r2, [r6, #0]
 80046e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046e8:	2301      	movs	r3, #1
 80046ea:	e09e      	b.n	800482a <_printf_i+0x1ea>
 80046ec:	6833      	ldr	r3, [r6, #0]
 80046ee:	6820      	ldr	r0, [r4, #0]
 80046f0:	1d19      	adds	r1, r3, #4
 80046f2:	6031      	str	r1, [r6, #0]
 80046f4:	0606      	lsls	r6, r0, #24
 80046f6:	d501      	bpl.n	80046fc <_printf_i+0xbc>
 80046f8:	681d      	ldr	r5, [r3, #0]
 80046fa:	e003      	b.n	8004704 <_printf_i+0xc4>
 80046fc:	0645      	lsls	r5, r0, #25
 80046fe:	d5fb      	bpl.n	80046f8 <_printf_i+0xb8>
 8004700:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004704:	2d00      	cmp	r5, #0
 8004706:	da03      	bge.n	8004710 <_printf_i+0xd0>
 8004708:	232d      	movs	r3, #45	@ 0x2d
 800470a:	426d      	negs	r5, r5
 800470c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004710:	230a      	movs	r3, #10
 8004712:	4859      	ldr	r0, [pc, #356]	@ (8004878 <_printf_i+0x238>)
 8004714:	e011      	b.n	800473a <_printf_i+0xfa>
 8004716:	6821      	ldr	r1, [r4, #0]
 8004718:	6833      	ldr	r3, [r6, #0]
 800471a:	0608      	lsls	r0, r1, #24
 800471c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004720:	d402      	bmi.n	8004728 <_printf_i+0xe8>
 8004722:	0649      	lsls	r1, r1, #25
 8004724:	bf48      	it	mi
 8004726:	b2ad      	uxthmi	r5, r5
 8004728:	2f6f      	cmp	r7, #111	@ 0x6f
 800472a:	6033      	str	r3, [r6, #0]
 800472c:	bf14      	ite	ne
 800472e:	230a      	movne	r3, #10
 8004730:	2308      	moveq	r3, #8
 8004732:	4851      	ldr	r0, [pc, #324]	@ (8004878 <_printf_i+0x238>)
 8004734:	2100      	movs	r1, #0
 8004736:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800473a:	6866      	ldr	r6, [r4, #4]
 800473c:	2e00      	cmp	r6, #0
 800473e:	bfa8      	it	ge
 8004740:	6821      	ldrge	r1, [r4, #0]
 8004742:	60a6      	str	r6, [r4, #8]
 8004744:	bfa4      	itt	ge
 8004746:	f021 0104 	bicge.w	r1, r1, #4
 800474a:	6021      	strge	r1, [r4, #0]
 800474c:	b90d      	cbnz	r5, 8004752 <_printf_i+0x112>
 800474e:	2e00      	cmp	r6, #0
 8004750:	d04b      	beq.n	80047ea <_printf_i+0x1aa>
 8004752:	4616      	mov	r6, r2
 8004754:	fbb5 f1f3 	udiv	r1, r5, r3
 8004758:	fb03 5711 	mls	r7, r3, r1, r5
 800475c:	5dc7      	ldrb	r7, [r0, r7]
 800475e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004762:	462f      	mov	r7, r5
 8004764:	42bb      	cmp	r3, r7
 8004766:	460d      	mov	r5, r1
 8004768:	d9f4      	bls.n	8004754 <_printf_i+0x114>
 800476a:	2b08      	cmp	r3, #8
 800476c:	d10b      	bne.n	8004786 <_printf_i+0x146>
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	07df      	lsls	r7, r3, #31
 8004772:	d508      	bpl.n	8004786 <_printf_i+0x146>
 8004774:	6923      	ldr	r3, [r4, #16]
 8004776:	6861      	ldr	r1, [r4, #4]
 8004778:	4299      	cmp	r1, r3
 800477a:	bfde      	ittt	le
 800477c:	2330      	movle	r3, #48	@ 0x30
 800477e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004782:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004786:	1b92      	subs	r2, r2, r6
 8004788:	6122      	str	r2, [r4, #16]
 800478a:	464b      	mov	r3, r9
 800478c:	4621      	mov	r1, r4
 800478e:	4640      	mov	r0, r8
 8004790:	f8cd a000 	str.w	sl, [sp]
 8004794:	aa03      	add	r2, sp, #12
 8004796:	f7ff fee1 	bl	800455c <_printf_common>
 800479a:	3001      	adds	r0, #1
 800479c:	d14a      	bne.n	8004834 <_printf_i+0x1f4>
 800479e:	f04f 30ff 	mov.w	r0, #4294967295
 80047a2:	b004      	add	sp, #16
 80047a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	f043 0320 	orr.w	r3, r3, #32
 80047ae:	6023      	str	r3, [r4, #0]
 80047b0:	2778      	movs	r7, #120	@ 0x78
 80047b2:	4832      	ldr	r0, [pc, #200]	@ (800487c <_printf_i+0x23c>)
 80047b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	6831      	ldr	r1, [r6, #0]
 80047bc:	061f      	lsls	r7, r3, #24
 80047be:	f851 5b04 	ldr.w	r5, [r1], #4
 80047c2:	d402      	bmi.n	80047ca <_printf_i+0x18a>
 80047c4:	065f      	lsls	r7, r3, #25
 80047c6:	bf48      	it	mi
 80047c8:	b2ad      	uxthmi	r5, r5
 80047ca:	6031      	str	r1, [r6, #0]
 80047cc:	07d9      	lsls	r1, r3, #31
 80047ce:	bf44      	itt	mi
 80047d0:	f043 0320 	orrmi.w	r3, r3, #32
 80047d4:	6023      	strmi	r3, [r4, #0]
 80047d6:	b11d      	cbz	r5, 80047e0 <_printf_i+0x1a0>
 80047d8:	2310      	movs	r3, #16
 80047da:	e7ab      	b.n	8004734 <_printf_i+0xf4>
 80047dc:	4826      	ldr	r0, [pc, #152]	@ (8004878 <_printf_i+0x238>)
 80047de:	e7e9      	b.n	80047b4 <_printf_i+0x174>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	f023 0320 	bic.w	r3, r3, #32
 80047e6:	6023      	str	r3, [r4, #0]
 80047e8:	e7f6      	b.n	80047d8 <_printf_i+0x198>
 80047ea:	4616      	mov	r6, r2
 80047ec:	e7bd      	b.n	800476a <_printf_i+0x12a>
 80047ee:	6833      	ldr	r3, [r6, #0]
 80047f0:	6825      	ldr	r5, [r4, #0]
 80047f2:	1d18      	adds	r0, r3, #4
 80047f4:	6961      	ldr	r1, [r4, #20]
 80047f6:	6030      	str	r0, [r6, #0]
 80047f8:	062e      	lsls	r6, r5, #24
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	d501      	bpl.n	8004802 <_printf_i+0x1c2>
 80047fe:	6019      	str	r1, [r3, #0]
 8004800:	e002      	b.n	8004808 <_printf_i+0x1c8>
 8004802:	0668      	lsls	r0, r5, #25
 8004804:	d5fb      	bpl.n	80047fe <_printf_i+0x1be>
 8004806:	8019      	strh	r1, [r3, #0]
 8004808:	2300      	movs	r3, #0
 800480a:	4616      	mov	r6, r2
 800480c:	6123      	str	r3, [r4, #16]
 800480e:	e7bc      	b.n	800478a <_printf_i+0x14a>
 8004810:	6833      	ldr	r3, [r6, #0]
 8004812:	2100      	movs	r1, #0
 8004814:	1d1a      	adds	r2, r3, #4
 8004816:	6032      	str	r2, [r6, #0]
 8004818:	681e      	ldr	r6, [r3, #0]
 800481a:	6862      	ldr	r2, [r4, #4]
 800481c:	4630      	mov	r0, r6
 800481e:	f000 f859 	bl	80048d4 <memchr>
 8004822:	b108      	cbz	r0, 8004828 <_printf_i+0x1e8>
 8004824:	1b80      	subs	r0, r0, r6
 8004826:	6060      	str	r0, [r4, #4]
 8004828:	6863      	ldr	r3, [r4, #4]
 800482a:	6123      	str	r3, [r4, #16]
 800482c:	2300      	movs	r3, #0
 800482e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004832:	e7aa      	b.n	800478a <_printf_i+0x14a>
 8004834:	4632      	mov	r2, r6
 8004836:	4649      	mov	r1, r9
 8004838:	4640      	mov	r0, r8
 800483a:	6923      	ldr	r3, [r4, #16]
 800483c:	47d0      	blx	sl
 800483e:	3001      	adds	r0, #1
 8004840:	d0ad      	beq.n	800479e <_printf_i+0x15e>
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	079b      	lsls	r3, r3, #30
 8004846:	d413      	bmi.n	8004870 <_printf_i+0x230>
 8004848:	68e0      	ldr	r0, [r4, #12]
 800484a:	9b03      	ldr	r3, [sp, #12]
 800484c:	4298      	cmp	r0, r3
 800484e:	bfb8      	it	lt
 8004850:	4618      	movlt	r0, r3
 8004852:	e7a6      	b.n	80047a2 <_printf_i+0x162>
 8004854:	2301      	movs	r3, #1
 8004856:	4632      	mov	r2, r6
 8004858:	4649      	mov	r1, r9
 800485a:	4640      	mov	r0, r8
 800485c:	47d0      	blx	sl
 800485e:	3001      	adds	r0, #1
 8004860:	d09d      	beq.n	800479e <_printf_i+0x15e>
 8004862:	3501      	adds	r5, #1
 8004864:	68e3      	ldr	r3, [r4, #12]
 8004866:	9903      	ldr	r1, [sp, #12]
 8004868:	1a5b      	subs	r3, r3, r1
 800486a:	42ab      	cmp	r3, r5
 800486c:	dcf2      	bgt.n	8004854 <_printf_i+0x214>
 800486e:	e7eb      	b.n	8004848 <_printf_i+0x208>
 8004870:	2500      	movs	r5, #0
 8004872:	f104 0619 	add.w	r6, r4, #25
 8004876:	e7f5      	b.n	8004864 <_printf_i+0x224>
 8004878:	080049b7 	.word	0x080049b7
 800487c:	080049c8 	.word	0x080049c8

08004880 <memmove>:
 8004880:	4288      	cmp	r0, r1
 8004882:	b510      	push	{r4, lr}
 8004884:	eb01 0402 	add.w	r4, r1, r2
 8004888:	d902      	bls.n	8004890 <memmove+0x10>
 800488a:	4284      	cmp	r4, r0
 800488c:	4623      	mov	r3, r4
 800488e:	d807      	bhi.n	80048a0 <memmove+0x20>
 8004890:	1e43      	subs	r3, r0, #1
 8004892:	42a1      	cmp	r1, r4
 8004894:	d008      	beq.n	80048a8 <memmove+0x28>
 8004896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800489a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800489e:	e7f8      	b.n	8004892 <memmove+0x12>
 80048a0:	4601      	mov	r1, r0
 80048a2:	4402      	add	r2, r0
 80048a4:	428a      	cmp	r2, r1
 80048a6:	d100      	bne.n	80048aa <memmove+0x2a>
 80048a8:	bd10      	pop	{r4, pc}
 80048aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048b2:	e7f7      	b.n	80048a4 <memmove+0x24>

080048b4 <_sbrk_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	2300      	movs	r3, #0
 80048b8:	4d05      	ldr	r5, [pc, #20]	@ (80048d0 <_sbrk_r+0x1c>)
 80048ba:	4604      	mov	r4, r0
 80048bc:	4608      	mov	r0, r1
 80048be:	602b      	str	r3, [r5, #0]
 80048c0:	f7fb ff66 	bl	8000790 <_sbrk>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d102      	bne.n	80048ce <_sbrk_r+0x1a>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	b103      	cbz	r3, 80048ce <_sbrk_r+0x1a>
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	bd38      	pop	{r3, r4, r5, pc}
 80048d0:	20000770 	.word	0x20000770

080048d4 <memchr>:
 80048d4:	4603      	mov	r3, r0
 80048d6:	b510      	push	{r4, lr}
 80048d8:	b2c9      	uxtb	r1, r1
 80048da:	4402      	add	r2, r0
 80048dc:	4293      	cmp	r3, r2
 80048de:	4618      	mov	r0, r3
 80048e0:	d101      	bne.n	80048e6 <memchr+0x12>
 80048e2:	2000      	movs	r0, #0
 80048e4:	e003      	b.n	80048ee <memchr+0x1a>
 80048e6:	7804      	ldrb	r4, [r0, #0]
 80048e8:	3301      	adds	r3, #1
 80048ea:	428c      	cmp	r4, r1
 80048ec:	d1f6      	bne.n	80048dc <memchr+0x8>
 80048ee:	bd10      	pop	{r4, pc}

080048f0 <_realloc_r>:
 80048f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f4:	4680      	mov	r8, r0
 80048f6:	4615      	mov	r5, r2
 80048f8:	460c      	mov	r4, r1
 80048fa:	b921      	cbnz	r1, 8004906 <_realloc_r+0x16>
 80048fc:	4611      	mov	r1, r2
 80048fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004902:	f7ff bc47 	b.w	8004194 <_malloc_r>
 8004906:	b92a      	cbnz	r2, 8004914 <_realloc_r+0x24>
 8004908:	f7ff fbda 	bl	80040c0 <_free_r>
 800490c:	2400      	movs	r4, #0
 800490e:	4620      	mov	r0, r4
 8004910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004914:	f000 f81a 	bl	800494c <_malloc_usable_size_r>
 8004918:	4285      	cmp	r5, r0
 800491a:	4606      	mov	r6, r0
 800491c:	d802      	bhi.n	8004924 <_realloc_r+0x34>
 800491e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004922:	d8f4      	bhi.n	800490e <_realloc_r+0x1e>
 8004924:	4629      	mov	r1, r5
 8004926:	4640      	mov	r0, r8
 8004928:	f7ff fc34 	bl	8004194 <_malloc_r>
 800492c:	4607      	mov	r7, r0
 800492e:	2800      	cmp	r0, #0
 8004930:	d0ec      	beq.n	800490c <_realloc_r+0x1c>
 8004932:	42b5      	cmp	r5, r6
 8004934:	462a      	mov	r2, r5
 8004936:	4621      	mov	r1, r4
 8004938:	bf28      	it	cs
 800493a:	4632      	movcs	r2, r6
 800493c:	f7ff fbb2 	bl	80040a4 <memcpy>
 8004940:	4621      	mov	r1, r4
 8004942:	4640      	mov	r0, r8
 8004944:	f7ff fbbc 	bl	80040c0 <_free_r>
 8004948:	463c      	mov	r4, r7
 800494a:	e7e0      	b.n	800490e <_realloc_r+0x1e>

0800494c <_malloc_usable_size_r>:
 800494c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004950:	1f18      	subs	r0, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	bfbc      	itt	lt
 8004956:	580b      	ldrlt	r3, [r1, r0]
 8004958:	18c0      	addlt	r0, r0, r3
 800495a:	4770      	bx	lr

0800495c <_init>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr

08004968 <_fini>:
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496a:	bf00      	nop
 800496c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496e:	bc08      	pop	{r3}
 8004970:	469e      	mov	lr, r3
 8004972:	4770      	bx	lr
